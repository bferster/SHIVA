<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8" />
	<link REL="SHORTCUT ICON" HREF="UVALogo.ico">
	<title>SHIVA Subway Map Maker</title>
	<link rel="stylesheet" type="text/css" href="css/smoothness/jquery-ui-1.8.16.custom.css">
	<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"></script>
	<script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js"></script>
	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
	<script type="text/javascript" src="shivalib-min.js"></script>
	<style type="text/css">
		body { font-family:Verdana,Geneva,sans-serif; font-size:xx-small; }
		p.pb { text-align:right; color:#999999; }
		.rounded-corners { -moz-border-radius:8px;-webkit-border-radius:8px;-khtml-border-radius:8px;border-radius:8px;}
		tr.odd { background-color:#e0e0e0; }
		.propTable { background-color:#eee;border-radius:8px;
				  	 background:-moz-linear-gradient(top,#f0f0f0,#dfdfdf);
				  	 background:-webkit-linear-gradient(top, #f0f0f0 0%, #dfdfdf 100%);
				  	 border-collapse: collapse;
				  	 width:278px;
				  	 }
	</style>
</head>
<body>
	<div style="width:279px;position:absolute;top:0px;left:0px">
	    <table id="propertyTable" class="propTable">
			<tr style="height:8px"><td> </td></tr>
		</table> 
	   <p style="text-align:right"><span style="vertical-align:50%">Lines </span><span id="toolbar" style="font-size:medium" >
			<button type='button' id='tb1' onclick='RemoveItem()'> </button>
			<button type='button' id='tb2' onclick='AddNewItem()'> </button>
		</span></p>
		<p style="text-align:right"><img src='annotate.gif' style='vertical-align:bottom' alt='Annotate' onclick='shivaLib.Annotate()'>
		<span id='saveAsDiv'></span>
		</p>		
		<br/>
		<div style="text-align:right">Drawing tools:&nbsp;&nbsp; 
			<span id="toolbar3" style="font-size:xx-small">
			<input type='radio' id='tb22' name="rad" onclick="Sound('click')" checked='checked' /><label for="tb22">O</label>
			<input type='radio' id='tb23' name="rad" onclick="Sound('click')" /><label for="tb23">O</label>
			<input type='radio' id='tb24' name="rad" onclick="Sound('click')" /><label for="tb24">O</label></span>
			<span id="toolbar2">
			<input type='checkbox' id='tb21' name="grd" checked='checked' onclick='Draw()'><label for="tb21">O</label></span>
			<span><br/><br/><a onclick='ShowSample()'><i>Click <u>here</u> to add sample</i></a></span>
		</div>
		<div id="helpDiv"> </div>
		<div id="outputDiv" style="width:460px;"> </div>
	</div>
 	<div id="containerDiv" style="position:absolute;top:0px;left:308px;width:800px;height:600px"> </div>
<script>

///////// GLOBALS   //////////

	var items=new Array();
	var shivaGroup="Subway"
	var curStation=0;

	var props={
		backCol: 					{	def:'ffffff', 		opt:'color',			des:'Background color'}, 
		backCorner: 				{	def:'8', 			opt:'number',			des:'Background corner'}, 
		rows:		 				{	def:'20', 			opt:'number',		 	des:'Number of rows'}, 
		cols:	 					{	def:'30', 			opt:'number',		 	des:'Number of columns'},
		gridSize: 					{	def:'20', 			opt:'number',			des:'Grid size'},
		stations: 					{	def:'', 			opt:'hidden',			des:'Stations'},
		ud: 						{	def:'false', 		opt:'true|false',		des:'Enable user draw?'}, 
		height: 					{	def:'', 			opt:'hidden',			des:'hgt'},
		width: 						{	def:'', 			opt:'hidden',			des:'wid'}, 
		item: 						{	def:'', 			opt:'|', 				des:''}, 
		title:	 					{	def:'', 			opt:'string', 			des:'Legend label'},
		lineCol: 					{	def:'990000', 		opt:'color',			des:'Line color'}, 
		lineWid: 					{	def:'8', 			opt:'number',			des:'Line width'},
		visible: 					{	def:'true', 		opt:'hidden',			des:'vis'},
		coords: 					{	def:'', 			opt:'hidden',			des:'Line points'} 
		};
	
	var helpText=new Array();
	helpText['Background color']="Use the text box to the right to set the background color for the visualization. Either click on the square color chip icon in the text box to launch the color picker and select a color, or enter a hexadecimal color value directly into the text box.";
	helpText['Background corner']="Click on the text box to the right and type a numerical corner radius for the background of the map. Use 0 to make square corners.";
	helpText['Number of rows']="Click on the text box to the right to type in the number of rows in the grid. The lines and stations fall on exact grid points. The number of rows times the grid size sets the overall height of the map.";
	helpText['Number of columns']="Click on the text box to the right to type in the number of columns in the grid. The lines and stations fall on exact grid points. The number of columns times the grid size sets the overall width of the map.";
	helpText['Grid size']="Click on the text box to the right to type in the size of each of the boxes in the grid. Note that in tandem with 'Number of columns' and 'Number or rows' this option will determine the overall size of your visualization.";
	helpText['Legend label']="Click on the text box to the right to type in the name that will appear in the legend for the line at the bottom of the map.";
	helpText['Line color']="Use the text box to the right to set the color for a particular line. Either click on the square color chip icon in the text box to launch the color picker and select a color, or enter a hexadecimal color value in the text box.";
	helpText['Line width']="Click on the text box to the right to type in a number that sets the width for this line. Default is 8 pixels.";
	helpText['OVERVIEW']="This webapp creates Harry Beck-style subway maps. Add or remove lines using the + and trash buttons. A grid can be toggled on or off using the grid button.<br/><br/>";
	helpText['OVERVIEW']+="Click on the pencil icon to draw lines. Segments will be added to the currently open line. The delete key will remove the last segment added.<br/><br/>";
	helpText['OVERVIEW']+="Adding two dots in the same spot will draw straight angles to a third point. Smooth corners need 3 evenly spaced lines: one before the turn, one at the corner, and one after the turn.<br/><br/>";
	helpText['OVERVIEW']+="Add station using the circle button. Clicking on a station brings up a dialog box to add a title, link, change station style or delete the station.<br/><br/>";
	helpText['OVERVIEW']+="If legend labels are set for a line, it will automatically create a legend at the bottom of the map.<br/><br/>";
	helpText['OVERVIEW']+="Want to add text, line drawings, circles or pictures to your project?  Just click on the grey colored pencil in a circle button below the attributes box and to activate the SHIVA drawing tool.<br/><br/>";
	helpText['OVERVIEW']+="For more information and detailed instructions for utilizing this tool please visit the UVa Knowledge Base documentation for the <a href='https://wiki.shanti.virginia.edu/display/KB/Visuals+in+Mandala' target='_blank'> Subway Tool</a>.";
	helpText['Enable user draw?']="Use the drop-down menu to the right to toggle whether or not users can interactively draw on your visualization. Note these drawings are for users only and are not saved with the visualization. In order to draw users will need to click on the pencil icon in the bottom left of your visualization.";

///////// INIT  /////////////

	$(document).ready(function() {
   		shivaLib=new SHIVA_Show("containerDiv");
		shivaLib.drupalMan=(""+window.location).match(/pr=d/);
		MakeDialog();
		$("#toolbar").buttonset();
		$("#tb1").button({text: false, icons: { primary: "ui-icon-trash"}}).css("width","25");
		$("#tb2").button({text: false, icons: { primary: "ui-icon-plus"}}).css("width","25");
		$("#toolbar2").buttonset();
		$("#tb21").button({text: false, icons: { primary: "ui-icon-calculator"}});
		$("#toolbar3").buttonset();
		$("#tb22").button({text: false, icons: { primary: "ui-icon-arrow-1-nw"}});
		$("#tb23").button({text: false, icons: { primary: "ui-icon-pencil"}});
		$("#tb24").button({text: false, icons: { primary: "ui-icon-radio-off"}});
	  	shivaLib.SetAttributes(props,items,false);
		ReEdit();
		if (!items.length)
			AddNewItem(),SetDataChanged(false);
		ShowHelp("startup");
		if (window.addEventListener) 
			window.addEventListener("message",shivaEventHandler,false);
		else
			window.attachEvent("message",shivaEventHandler);
		if (!shivaLib.drupalMan) {
			var str="&nbsp;&nbsp;Share as: <select id='formatter' onChange='SaveData(this.value)'>";
			str+="<option>Choose format</option>";
			str+="<option>WordPress</option>";
			str+="<option>eStore</option>";
			str+="<option>iFrame</option>";
			str+="<option>JSON</option>";
			str+="<option>Web-page</option>";
			str+="</select>"; 
			$("#saveAsDiv").html(str);
			}

		shivaLib.g.AddListener("containerDiv","mouseup",onMouseUp)
		document.onkeyup=onKeyUp;
		document.onkeydown=onKeyDown;
	});

	function shivaEventHandler(e)
	{
		if (e.data.indexOf("GetJSON") == 0) 
			e.source.postMessage("GetJSON="+SaveData("GetJSON"),"*");
		else if (e.data.indexOf("GetWebPage") == 0) 
			e.source.postMessage("GetWebPage="+SaveData("Web-page"),"*");
		else if (e.data.indexOf("GetWordPress") == 0) 
			e.source.postMessage("GetWordPress="+SaveData("WordPress"),"*");
		else if (e.data.indexOf("GetType") == 0) 
			e.source.postMessage("GetType="+shivaGroup,"*");
		else if (e.data.indexOf("PutJSON") == 0) 
			ReEdit($.parseJSON(e.data.substr(8)));
	}

	function SetDataChanged(mode)
	{
		if (shivaLib.drupalMan) 
			window.parent.postMessage("DataChanged="+mode.toString(),"*");
	} 

	function EditStation(x,y)
	{
		var i;
		var str=$("#propInput5").val();
		Sound("click");
		var stations=str.split("~");
		for (i=0;i<stations.length;++i) {	
			if (stations[i].indexOf(x+"`"+y) != -1) {
				break;
				}
			}
		curStation=i;
		var parts=stations[i].split("`");
		$("#dialogLabelPos").val(parts[2]);
		$("#dialogStyle").val(parts[3]);
		$("#dialogLabel").val(parts[4]);
		$("#dialogLink").val(parts[5]);
		$("#dialogDiv").dialog("open");
	}

	function onStationDialog() 
	{
		var i;
		var str=$("#propInput5").val();
		var stations=str.split("~");
		parts=stations[curStation].split("`");
		parts[2]=$("#dialogLabelPos").val();
		parts[3]=$("#dialogStyle").val();
		parts[4]=$("#dialogLabel").val();
		parts[5]=$("#dialogLink").val();
		$("#dialogDiv").dialog("open");
		stations[curStation]="";
		for (i=0;i<parts.length;++i) {
			stations[curStation]+=parts[i];
			if (i < parts.length-1)
				stations[curStation]+="`";	
			}
		str="";
		for (i=0;i<stations.length;++i) {	
			str+=stations[i];
			if (i < stations.length-1)
				str+="~";	
			}
		$("#propInput5").val(str);
		Draw();			
	}			

	function onDeleteStation()
	{
		var str=$("#propInput5").val();
		var stations=str.split("~");
		str="";
		stations.splice(curStation,1);
		for (var i=0;i<stations.length;++i) {	
			str+=stations[i];
			if (i < stations.length-1)
				str+="~";	
			}
		$("#propInput5").val(str);
		Draw();			
		SetDataChanged(true);
	}

	function onMouseUp(e)
	{
		var gridSize=Number($("#propInput4").val());
		var x=Math.round((e.pageX-this.offsetLeft)/gridSize);
		var y=Math.round((e.pageY-this.offsetTop)/gridSize);
		var active=$("#accord").accordion("option","active");
		if (!x || !y)
			return;
		if ((x > Number($("#propInput3").val())) || (y > Number($("#propInput2").val())))
			return;
		if ($("#tb23").attr("checked") == "checked") {
			if (active === false)
				return;
			var str=$("#itemInput"+active+"-5").val();
			if (str)
				str+=",";			
			str+=x+"."+y;
			$("#itemInput"+active+"-5").val(str);
			Sound("click");
			Draw();
			SetDataChanged(true);
			}
		else if ($("#tb24").attr("checked") == "checked") {
			var str=$("#propInput5").val();
			if (str.indexOf(x+"`"+y) != -1) {
				EditStation(x,y);
				SetDataChanged(true);
				return;
				}
			if (str)
				str+="~";			
			str+=x+"`"+y+"`t`S``";
			$("#propInput5").val(str);
			Sound("ding");
			SetDataChanged(true);
			Draw();
		}
		else if ($("#tb22").attr("checked") == "checked") {
			var str=$("#propInput5").val();
			if (str.indexOf(x+"`"+y) != -1)
				EditStation(x,y);
			SetDataChanged(true);
			}
	}
	
	function onKeyDown(e)	
	{
		if ((e.keyCode == 8) &&													
	        (e.target.tagName != "TEXTAREA") && 								
	        (e.target.tagName != "INPUT")) { 									
			e.stopPropagation();												
	        return false;
	    	}
	}

	function onKeyUp(e)
	{
		if ($("#tb23").attr("checked") == "checked") {
			var active=$("#accord").accordion("option","active");
			if (((e.which == 8) || (e.which == 46)) && (active !== false)) {
				var str=$("#itemInput"+active+"-5").val();
				if (!str) 
					return;
				var s=str.lastIndexOf(",");
					$("#itemInput"+active+"-5").val(str.substr(0,s));
				Sound("delete");
				Draw();
				SetDataChanged(true);
				}
			}
	}
	
	function Draw(mode)
	{	
		var jsonData=$.parseJSON(SaveData("GetJSON"));
		jsonData.showGrid=($("#tb21").attr("checked") == "checked")
		shivaLib.Draw(jsonData);
	}

	function SaveData(mode)
	{
		SetDataChanged(false);
		$("#helpDiv").html("");		
		return shivaLib.SaveData(mode,shivaGroup,items,props);
	}	

	function ReEdit(jsonData)
	{
		var it=shivaLib.ReEdit(jsonData,props);
		if (it)
			items=it;
	  	shivaLib.SetAttributes(props,items,true);
		Draw();
	}	

	function ShowHelp(att)
	{
		if (att == "startup") 
			$("#helpDiv").html("<br/><p class='pb'><br/>Built by SHANTI<br/>The University of Virginia</p>");
		else
			shivaLib.ShowHelp(att,helpText);
	}	
	
	function AddNewItem()
	{
		var o=new Object;
		var s=0,i=0;
		for (var key in props) {
			if (key == "item")
				s=i;
			++i;
			if (!s)
				continue;
			o[key]=props[key].def;
			}
		items.push(o);
		for (var i=0;i<items.length;++i)
			items[i].name="Line-"+(i+1);
	  	shivaLib.SetAttributes(props,items,true);
		Sound("ding");
		Draw();
		SetDataChanged(true);
		$("#accord").accordion({ active: items.length-1 });
	}	
	
	function RemoveItem()
	{
		var active=$("#accord").accordion("option","active");
		if (active === false)
			return;
		items.splice(active,1);
		for (var i=0;i<items.length;++i) 
			items[i].name="Line-"+(i+1);
	  	shivaLib.SetAttributes(props,items,true);
		Sound("delete");
		Draw();
		SetDataChanged(true);
	}

	function Sound(sound)
	{	
		var clickSound=new Audio(sound+".mp3");
		clickSound.play();
	}

	function MakeDialog()
	{
		var ops={ 
			width:'auto',height:'auto',modal:true,autoOpen:false,title:'Edit station',
			buttons: {
				OK: function() {
					onStationDialog();
					$( this ).dialog("close");
					},
				'Delete': function() {
					onDeleteStation();
					$( this ).dialog("close");
					}
				}
			}
		var str="";
		$("body").append("<div id='dialogDiv'/>");
		$("#dialogDiv").dialog(ops);
		str+="<input type='input' size='23' id='dialogLabel' style='margin-top:.5em;margin-bottom:.5em'/> Label<br/>";
		str+="<input type='input' size='23' id='dialogLink' style='margin-top:.5em;margin-bottom:.5em'/> Link<br/>";
		str+="<select id='dialogStyle' style='margin-top:.5em;margin-bottom:.5em'>";
		str+="<option value='s'>Small station</option>";
		str+="<option value='S'>Big station</option>";
		str+="<option value='i1'>2-line horizontal station</option>";
		str+="<option value='i2'>3-line horizontal station</option>";
		str+="<option value='i3'>4-line horizontal station</option>";
		str+="<option value='i4'>5-line horizontal station</option>";
		str+="<option value='I1'>2-line vertical station</option>";
		str+="<option value='I2'>3-line vertical station</option>";
		str+="<option value='I3'>4-line vertical station</option>";
		str+="<option value='I4'>5-line vertical station</option>";
		str+="</select><br/>";
		str+="<select id='dialogLabelPos' style='margin-top:.5em;margin-bottom:.5em'>";
		str+="<option value='t'>Label on top</option>";
		str+="<option value='b'>Label on bottom</option>";
		str+="<option value='l'>Label on left</option>";
		str+="<option value='r'>Label on right</option>";
		str+="</select><br/>";
		$("#dialogDiv").html(str);
	}

function ShowSample()
{
	var data={
		"item-1": "name:Line-1;title:HistoryBrowser;lineCol:990000;lineWid:8;coords:4.2,4.12,4.14,6.14,8.14,8.12,8.10,10.10,11.10;visible:true",
		"item-2": "name:Line-3;title:VisualEyes;lineCol:009900;lineWid:8;coords:11.10,14.10,15.10,15.9,15.5,15.4,16.4,27.4;visible:true",
		"item-3": "name:Line-2;title:SHIVA;lineCol:0000FF;lineWid:8;coords:4.2,9.2,11.2,11.4,11.15,11.17,13.17,13.15,15.15,17.15,19.15,19.13,21.13,27.13;visible:true",
		"backCol": "efefef",
		"backCorner": "8",
		"rows": "20",
		"cols": "30",
		"gridSize": "20",
		"stations": "4`6`l`S`VCDH`http://www.vcdh.virginia.edu~11`10`r`I2`SHANTI`http://shanti.virginia.edu/~4`2`l`S`<b>UVA</b>`http://www.virginia.edu~4`8`r`s`Jeffersons Travels`http://www.viseyes.org/show?base=jt~6`14`b`s`First Library`http://www.viseyes.org/show?base=library~4`10`r`s`Vinegar<br/>Hill`http://www.viseyes.org/show?base=vh~4`12`r`s`TSP`http://www.viseyes.org/show?base=tsp~12`17`b`s`Charts`http://www.viseyes.org/shiva/~15`7`r`s`Maps of Empire`http://www.viseyes.org/show?id=66217~24`4`t`s`Notes on Virginia`http://www.viseyes.org/show?id=62287~16`4`t`s`Bleak House`http://www.viseyes.org/show?id=64541~20`4`b`s`Khacloe Drubling`http://www.viseyes.org/show?id=64938~15`15`t`s`Maps`http://www.viseyes.org/shiva/~17`15`b`s`Timelines`http://www.viseyes.org/shiva/~19`14`r`s`Video`http://www.viseyes.org/shiva/~20`13`t`s`Images`http://www.viseyes.org/shiva/~27`13`r`S`?`~27`4`r`S`?`~23`13`t`s`Canvas`http://www.viseyes.org/shiva/~27`4`r`S`?`~4`4`l`S`IATH`http://iath.virginia.edu",
		"shivaGroup": "Subway"
		}
	ReEdit(data);
}

function trace(str) { console.log(str) };
	
</script>
</body></html>
