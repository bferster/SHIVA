///////////////////////////////////////////////////////////////////////////////////////////////
//  SHIVALIB MAIN
///////////////////////////////////////////////////////////////////////////////////////////////

function SHIVA_Show(container, options, editMode) 						// CONSTRUCTOR
{
	this.drupalMan=false;
	this.inGo=false;
	this.options=null;
	this.map=null;															
	this.player=null;
	this.timeLine=null;															
	this.container=container;
	this.editMode=editMode;
	this.items=null;
	this.overlay=null;
	this.g=null;
	this.qe=null;
	this.ev=null;
	this.jit=null;
	this.cvs=null;
	this.group=null;
	this.msgAction=new Array();
	this.ready=false;
	this.actionCache=new Array();
	if (options)
		this.Draw(options);
}

SHIVA_Show.prototype.Draw=function(ops) 								//	DRAW LOADER/DIRECTOR
{
	if (!ops)
		return;
	_this=this;
	this.options=ops;
	this.LoadJSLib("Visualization",$.proxy(function() {
			_this.LoadJSLib(ops.shivaGroup,$.proxy(function() { _this.DrawElement(ops) },_this))
			},_this));
}

SHIVA_Show.prototype.DrawElement=function(ops) 							//	DRAW DIRECTOR
{
	var _this=this;
	this.group=group=ops.shivaGroup;
	if (group == 'Visualization') 
		this.DrawChart();
	else if (group == 'Map')
		this.DrawMap();
	else if (group == 'Timeline')
		this.DrawTimeline();
	else if (group == 'Timeglider')
		this.DrawTimeGlider();
	else if (group == 'Control')
		this.DrawControl();
	else if (group == 'Video')
		this.DrawVideo();
	else if (group == 'Image')
		this.DrawImage();
	else if (group == 'Subway')
		this.DrawSubway();
	else if (group == 'Data')
		this.DrawChart();
	else if (group == 'Network')
		this.DrawNetwork();
	else if (group == 'Earth')
		this.DrawEarth();
	else if (group == 'Draw') {
		if (ops.width)	$("#"+this.container).css("width",ops.width+"px");
		if (ops.height)	$("#"+this.container).css("height",ops.height+"px");
		this.DrawOverlay();
		this.SendReadyMessage(true);											
		}
	else if (group == 'Webpage')
		this.DrawWebpage();
	else if (group == 'HTML')
		this.DrawHTML();
   	else if (group == 'WordCloud')
        this.DrawWordCloud();
  	else if (group == 'Poster')
        this.DrawPoster();
  	else if (group == 'Graph')
        this.DrawGraph();
	if (ops["draw-1"])
		this.AddOverlay();
	var ud=ops["ud"];														// Get ud flag
	if (ud == "true")		ud=true;										// Convert to boolean
	else if (ud == "false")	ud=false;										// Convert to boolean
	if ((ud) && (this.inGo)) {												// If allowing user annotation in go.htm														
		var h=$("#"+this.container).css("height").replace(/px/g,"");		// Get height
		var str="<img  id='shivaAnnotateBut' src='annotate.gif' style='position:absolute";	
		str+=";top:"+(h-0+12)+"px'>";										// Bottom of container div
		$("body").append(str);												// Add button
		$("#shivaAnnotateBut").click(function() { _this.Annotate(); });		// Click event
		$("#shivaAnnotateBut").css('pointer-events','auto');				// Inibit pointer clicks if menu gone
		}
}

var jslibLoading="";

SHIVA_Show.prototype.LoadJSLib=function(which, callback) 				// LOAD JS LIBRARY
{
 	var i,obj,lib="";
  	switch(which) {															// Route on type
		case "Timeline": 													// Simile			
			obj="Timeline.DefaultEventSource";								// Object to test for
			lib="//api.simile-widgets.org/timeline/2.3.1/timeline-api.js?bundle=true";  // Lib to load
          	break;
		case "Visualization": 												// Google charts
  			if (!google.charts.versionSpecific) {
	 			google.charts.load('current', {packages: ['corechart']});	// Load package
				google.charts.setOnLoadCallback(callback); 					// Set callback
				return;														// Quit
				}
			break;
		case "Timeglider": 													// Time glider			
			obj="timeglider";								    			// Object to test for
			lib="timeglider-all.js";										// Lib to load
         	break;
		case "Image": 														// Ad gallery
			obj="jQuery.prototype.adGallery";								// Object to test for
			lib="jquery.ad-gallery.min.js";  								// Lib to load
           	break;
		case "Network": 													// JIT
			obj="$jit.id";													// Object to test for
			lib="jit-yc.js";  												// Lib to load
           	break;
		case "Graph": 														// Graph
			obj="d3.select";												// Object to test for
			lib="d3.v3.min.js";  											// Lib to load
           	break;
		case "Map": 														// Google maps		
 	 		var key="AIzaSyAVjuoRt0060MnK_5_C-xenBkgUaxVBEug";
			if (window.location.hostname.match("virginia.edu") || window.location.hostname.match("visuals.dd")) {
				key="AIzaSyDO7EDm14EXi44pLkarnB8jjqI90LSa61g";
				}
 			obj="google.maps.LatLng";										// Object to test for
         	lib="//maps.googleapis.com/maps/api/js?callback=shivaJSLoaded&key="+key; // Lib to load
         	if (jslibLoading == lib)										// If already loading it
         		return;														// Quit
             break;
       case "WordCloud":
            obj="d3.layout.cloud";
            lib="d3_cloud_combined.js";
            break;
		}
	if (lib) {																// If a lib to load
		var v=obj.split(".");												// Split by parts
		var n=v.length;														// Number of parts
		var o=$(window)[0];													// Point at root
		for (i=0;i<n;++i) 													// For each part
			if (!(o=o[v[i]])) 												// Not a match
				break;														// Quit looking
		if (o && (i == n)) {												// Got them all		
			callback();														// Call callback
			return;															// Quit
			}
		var head=document.getElementsByTagName('head')[0];					// Point at head
		var script=document.createElement('script');						// Point at script
   		script.type="text/javascript";										// Set type
       	script.src=lib; 													// URL
    	jslibLoading=lib;													// Save current loading library
     	script.onload=shivaJSLoaded(obj,callback);							// Set callback
       	head.appendChild(script);											// Add to script
		}
	else																	// No lib
		callback();															// Call callback
}

function shivaJSLoaded(obj, callback) 									// RECURSE UNTIL JS METHOD/PROPERTY IS AVAILABLE
{
	var i;
	if (!obj)																// If no obj
		return;																// Return
	var v=obj.split(".");													// Split by parts
	var n=v.length;															// Number of parts
	var o=$(window)[0];														// Point at root
	for (i=0;i<n;++i) 														// For each part
		if (!(o=o[v[i]])) 													// Not a match
			break;															// Quit looking
	if (o && (i == n)) { 													// Got them all		
		jslibLoading="";													// Reset loading flag
		callback();															// Call callback
		}
	else																	// No loaded yet
		setTimeout(function() { shivaJSLoaded(obj,callback); },50);			// Recurse		
}

SHIVA_Show.prototype.SendReadyMessage=function(mode) 					// SEND READY MESSAGE TO DRUPAL MANAGER
{
	var i;
	if (shivaLib.drupalMan) 												// If called from Drupal manager
		window.parent.postMessage("ShivaReady="+mode.toString(),"*");		// Send message to parent wind		
	var asp=$("#"+shivaLib.container).height()/$("#"+shivaLib.container).width();	// Get asp of container															// Assume 1:1
	if (this.options.height && this.options.width)							// If height and width defined
		asp=this.options.height/this.options.width;							// Calc asp
	shivaLib.SendShivaMessage("ShivaChart=ready",Math.round(asp*1000)); 	// Send ready message to EvA with aspect ratio
	shivaLib.ready=true;													// We're ready now
	for (i=0;i<shivaLib.actionCache.length;++i)								// For each action stored
		shivaLib.RunActions(shivaLib.actionCache[i]);						// Send command
	shivaLib.actionCache=[];												// Clear action store
}

SHIVA_Show.prototype.SendShivaMessage=function(src, msg) 				// SEND SHIVA MESSAGE 
{
	var id=window.name;														// Get from name
	if (!id) 																// Firefox/IE issue
		id="posterFrame-"+(""+window.location.search.match(/&if=[0-9A-z]+/)).substr(4);	// Extract id
	var str=src+"|"+id;														// Add src and window						
	if (msg)																// If more to it
		str+="|"+msg;														// Add it
	if (window.parent)														// If has a parent
		window.parent.postMessage(str,"*");									// Send message to parent wind
	else																	// Local	
		window.postMessage(str,"*");										// Send message to wind
}

SHIVA_Show.prototype.ShivaEventHandler=function(e) 						//	HANDLE SHIVA EVENTS
{
	if (e == "init") {														// If installing listener
		if (window.addEventListener) 
			window.addEventListener("message",shivaLib.ShivaEventHandler,false);
		else
			window.attachEvent("message",shivaLib.ShivaEventHandler);	
		return;
		}
	if (!e.data)															// No data
		return;																// Quit
	for (var i=0;i<shivaLib.msgAction.length;++i)							// For each possible event								
		if (e.data.indexOf(shivaLib.msgAction[i].id) != -1)					// The one						
			shivaLib.msgAction[i].Do(i);									// Run callback
	if (!shivaLib.options)													// If no options
		return;																// Quit
	if (e.data.indexOf("ShivaAct") != -1) {									// If an action
		if (!shivaLib.ready)													// If not ready yet
			shivaLib.actionCache.push(e.data);								// Save action until initted
		else																// Send it
			shivaLib.RunActions(e.data);									// Route to action handler
		}
}

SHIVA_Show.prototype.RunActions=function(data) 							// ROUTE ACTIONS
{
	var group=shivaLib.options.shivaGroup;									// Get group
	if (group == "Map")														// If a map action
		shivaLib.MapActions(data);											// Route
	else if (group == "Video")												// If a video action
		shivaLib.VideoActions(data);										// Route 
	else if (group == "Timeglider")											// If a timeline action
		shivaLib.TimeActions(data);											// Route 
	else if (group == "Visualization")										// If a chart action
		shivaLib.ChartActions(data);										// Route to chart actions
	else if (group == "Image")												// If an image action
		shivaLib.ImageActions(data);										// Route
	else if (group == "Network")											// If an network action
		shivaLib.NetworkActions(data);										// Route
	else if (group == "WordCloud")											// If an wordcloud action
		shivaLib.WordActions(data);											// Route
	else if (group == "Control")											// If an control action
		shivaLib.ControlActions(data);										// Route
	else if (group == "HTML")												// If an HTML action
		shivaLib.HTMLActions(data);											// Route
	else if (group == "Graph")												// If an graph action
		shivaLib.GraphActions(data);										// Route

}


SHIVA_Show.prototype.AddOverlay=function(data) 							// ADD OVERLAY
{
	var key;
   	this.overlay=new Array();												// Alloc new array
	this.DrawOverlay();														// Initialize
   	if (data){																// If data provided
		var v=data.split("&draw-");											// Divide into segs
		for (var i=0;i<v.length;++i) 										// For each seg
			this.AddOverlaySeg(v[i].replace(/^[0-9]+=/,""),true);			// Add seg after replacing seg num
  		}
   	else{																	// Get draw data from options
	   	for (key in this.options) {											// For each element
			if (key.match(/draw-/g)) 										// If a drawing	segment					
				this.AddOverlaySeg(this.options[key],false);				// Add seg
			}
		}
	$("#shivaDrawDiv").css('pointer-events','none');						// Inibit pointer clicks if menu gone
 	this.DrawOverlay();														// Draw
}	

SHIVA_Show.prototype.AddOverlaySeg=function(seg, init)					// ADD SEGMENT TO OVERLAY
{
	var i,key;
	if (!seg)																// No seg
		return;																// Quit
	var o=new Object();														// Alloc object
	if (!this.overlay)														// If not alloc'd
	   	this.overlay=new Array();											// Alloc new array
	if (!this.dr && init) {													// If not already instantiated
		this.Draw({shivaGroup:"Draw"});										// Create canvas
		this.dr=new SHIVA_Draw(this.container,true);						// Alloc drawing module
		}
	var v=seg.split(';');													// Split into parts
	for (i=0;i<v.length;++i) {												// For each param
		key=v[i].split(':')[0];												// Get key
		o[key]=v[i].split(':')[1].replace(/\~/g,"#").replace(/\|/g,"\n").replace(/\`/g,":");
		if (o[key] == "true")		o[key]=true;							// Force boolean
		if (o[key] == "false")		o[key]=false;							// Force boolean
		}	
	if (o.x)	o.x=o.x.split(",");											// Force arrays
	if (o.y)	o.y=o.y.split(",");											// Force arrays
	this.overlay.push(o);													// Add segment
}

SHIVA_Show.prototype.DrawOverlay=function() 							// DRAW OVERLAY
{
	var o,i,col,ecol,ewid,a,cur,ctx,str,now,s=0,e=36000;
	var con="#"+this.container;
	if (!this.g)															// If no graphics lib
		this.g=new SHIVA_Graphics();										// Allocate it
	var l=$(con).css("left");	var t=$(con).css("top");					// Get pos
	if (l == "auto")	l="0px";											// Turn auto into 0
	if (t == "auto")	t="0px";											// Turn auto into 0
	i=$(con).css("height").replace(/px/g,"");								// Get hgt
	if (this.player)														// If a player object
		i=Math.max(0,i-=40);												// Don't hide controls, cap at 0
	if (!$("#shivaDrawCanvas").length) {									// No canvas yet	
		if (!$("#shivaDrawDiv").length) {									// No draw div yet	
			str="<div id='shivaDrawDiv' style='position:absolute";			// Div
			str+=";width:"+$(con).css("width");								// Make div
			str+=";top:"+t;													// same as
			str+=";left:"+l;												// container div
			str+=";height:"+i+"px'/>";										// Set hgt
			$('body').append(str);											// Add to dom								
			}
		this.g.CreateCanvas("shivaDrawCanvas","shivaDrawDiv");				// Create canvas
		}
	$("#shivaDrawCanvas").attr("width",$(con).css("width"));				// Wid
	$("#shivaDrawCanvas").attr("height",i+"px");							// Hgt
	$("#shivaDrawDiv").css("left",l);										// Left div
	$("#shivaDrawDiv").css("top",t);										// Top
	$("#shivaDrawDiv").css("width",$(con).css("width"));					// Wid
	$("#shivaDrawDiv").css("height",i+"px");								// Hgt
	ctx=$("#shivaDrawCanvas")[0].getContext('2d');							// Get context
	ctx.clearRect(0,0,1600,1600);											// Clear canvas
	if (navigator.userAgent.match(/\.NET CLR/))								// If IE
		$("#shivaDrawDiv").css("z-index",2);								// Force on top
	else																	// All else
		$("#shivaDrawDiv").css("z-index",2000);								// Force on top
	if ($("#shivaDrawPaletteDiv").length)									// If palette is up
		$("#shivaDrawDiv").css('pointer-events','auto');					// Enable pointer clicks 
	else																	// If menu gone
		$("#shivaDrawDiv").css('pointer-events','none');					// Inibit pointer clicks 
	if (!this.overlay)														// Nothing to draw
		return;																// Quit
	this.DrawIdeaLinks(false);												// Draw idea link lines, if any												
	for (i=0;i<this.overlay.length;++i) {									// For each seg
		o=this.overlay[i];													// Point at it
	$("#shtx"+i).remove();													// Remove text
		$("#shim"+i).remove();												// Remove image
		$("#shivaIdea"+i).remove();											// Remove idea node
		if (o.type == 5) {													// Idea map
			var dd="#shivaIdea"+i;											// Div id										
			str="<div id='"+dd.substr(1)+"'";
			str+="style='position:absolute;padding:8px;font-family:sans-serif;text-align:center;";
			str+="margin:0px;border:1px solid "+o.ideaEdgeCol+";background-color:"+o.ideaBackCol+";";
			str+="left:"+o.ideaLeft+"px;top:"+o.ideaTop+"px;'>";
			str+="</div>";		
			$("#shivaDrawDiv").append(str);									// Add div
			str="<textarea";												// Assume display mode
			if ((shivaLib.dr) && (shivaLib.dr.curTool != 6))				// If not idea editing
				str+=" readonly='readonly'"; 								// Makes it read only
			str+=" id='shtx"+i+"' onchange='shivaLib.dr.SetShivaText(this.value,"+i+")' "
			str+="style='overflow:none;vertical-align:middle;";				// Textarea style
			if ((!shivaLib.dr) || ((shivaLib.dr) && (shivaLib.dr.curTool != 6)))	 // If not idea editing
				str+="resize:none;"; 										// Remove resizer
			str+="height:"+o.ideaHgt+"px;width:"+o.ideaWid+"px;color:"+o.ideaTextCol+";" // Size/color textarea
			if (o.ideaBold)													// If bold
				str+="font-weight:bold;";									// Add tag
			str+="background:transparent;border:none;margin:0px;padding:0px;font-family:sans-serif;text-align:center;'/>";
			$(dd).append(str);												// Add text area
			$("#shtx"+i).html(o.text);										// Set text
			if (o.ideaShape == "Round box") 								// Round box
				$(dd).css("border-radius","8px");							// Small round border
			else if (o.ideaShape == "Oval") 								// Oval
				$(dd).css("border-radius",$(dd).css("height"));				// Set border to height
			else if (o.ideaShape == "Circle") {								// Circle
				var w=$(dd).width();										// Get wid
				$(dd).css("border-radius",(w/2+16)+"px");					// Set border 1/2 wid + padding
				$(dd).css("height",w+"px");									// Hgt same as wid
				}
			if (o.ideaGradient) 											// If a gradient
				 $(dd).css({background:"-webkit-linear-gradient(top, #f0f0f0 0%,"+o.ideaBackCol+" 100%)",
				 			background:"linear-gradient(#f0f0f0,"+o.ideaBackCol+")"
				 			});

			if ((shivaLib.dr) && (shivaLib.dr.curTool == 6)) {				// If in idea map editing mode

				$("#shtx"+i).resizable( { stop: function(event,ui) {		// ON RESIZE HANDLER
					var num=ui.originalElement[0].id.substr(4);				// Get index
					shivaLib.dr.segs[num].ideaWid=ui.size.width-4;			// Set width
					shivaLib.dr.segs[num].ideaHgt=ui.size.height-4;			// Set height
					},handles:"se" });										// Only SE handle
	
				$(dd).draggable( { drag:function(event, ui) {				// ON DRAG HANDLER
						var num=this.id.substr(9);							// Get index
						var dx=ui.position.left-shivaLib.dr.segs[num].ideaLeft;	// Dx
						var dy=ui.position.top-shivaLib.dr.segs[num].ideaTop;	// Dy
						shivaLib.dr.segs[num].ideaLeft=ui.position.left;		// Set left
						shivaLib.dr.segs[num].ideaTop=ui.position.top;			// Set top
						shivaLib.dr.segs[num].ideaText=$("#"+this.id).val();	// Set current text
						shivaLib.dr.MoveIdeaChildren(num,dx,dy);			// Move children
						shivaLib.DrawIdeaLinks(true);						// Draw idea link lines										
						},
					containment:"parent", 
					stop:function(event, ui) {
						shivaLib.dr.DrawOverlay();							// Redraw
						} 
					});

				$(dd).droppable( { drop:function(event, ui) {				// ON DROP HANDLER
					var from=ui.draggable.context.id.substr(9);				// From id
					var to=event.target.id.substr(9);						// To id
					shivaLib.dr.IdeaDrop(from,to);							// React to drop			
					}});
	
				}	
			continue;														// Next segment
			}
		cur=o.curve;														// Curve
		col=o.color;														// Get col
		ecol=o.edgeColor;													// Ecol
		ewid=Math.floor(o.edgeWidth/10)+1;									// Edge is .5-10							 															
		a=Number(o.alpha)/100;												// Alpha is 0-1											
		if (o.edgeColor == -1)	ewid=0;										// None has no width
		if ((o.x) && (o.x.length < 2))										// If only 1 point
			continue;														// Skip it
		if (o.type == 1) 													// Circle
			this.g.DrawCircle(ctx,o.color,a,o.x[0],o.y[0],Math.abs(o.x[0]-o.x[1]),ecol,ewid);
		else if (o.type == 2) {												// Box
			if (o.curve)													// If curves on
				this.g.DrawRoundBar(ctx,o.color,a,o.x[0],o.y[0],o.x[1],o.y[1],12,ecol,ewid);
			else															// Line
				this.g.DrawBar(ctx,o.color,a,o.x[0],o.y[0],o.x[1],o.y[1],ecol,ewid);
			}
		else if (o.type == 3) {												// Text
			if (o.curve)													// If curves
				this.g.DrawRoundBar(ctx,o.boxColor,a,o.x[0],o.y[0],o.x[1],o.y[1],12,ecol,ewid);
			else															// Lines
				this.g.DrawBar(ctx,o.boxColor,a,o.x[0],o.y[0],o.x[1],o.y[1],ecol,ewid);
			str="<text";													// Assume display mode
			if ($("#shivaDrawPaletteDiv").length)							// If palette is up
				str+="area rows='8'"; 										// Textarea makes it editable
			str+=" id='shtx"+i+"' ";
			str+="style='position:absolute;background:transparent;border:none;margin:8px;font-family:sans-serif;overflow:none;";
			str+="left:"+Math.min(o.x[0],o.x[1])+"px;top:"+Math.min(o.y[0],o.y[1])+"px;opacity:"+(o.alpha/100)+";";
			str+="width:"+(Math.abs(o.x[1]-o.x[0])-18)+"px'/>";
			$("#shivaDrawDiv").append(str);									// Add div
			$("#shtx"+i).css("color",o.textColor).css("text-align",o.textAlign.toLowerCase());	// Color/align
			$("#shtx"+i).css("font-size",Number(o.textSize/2)+10);			// Set font size
			$("#shtx"+i).html(o.text);										// Set text
			$("#shtx"+i).bind("change input propertychange",function(e) {	// Change event
				var i=e.target.id.substr(4);								// Extract index
				var val=$("#shtx"+i).val();									// Get text
				shivaLib.dr.SetShivaText(val,i);							// Set structure
				});
			}
		else if (o.type == 4) {												// Image
			this.g.DrawBar(ctx,-1,a,o.x[0],o.y[0],o.x[1],o.y[1],ecol,ewid);
			str="<div id='shim"+i+"' style='position:absolute;background:transparent;opacity:"+(o.alpha/100)+";";
			w=Math.abs(o.x[1]-o.x[0]);
			h=Math.abs(o.y[1]-o.y[0]);
			str+="left:"+Math.min(o.x[0],o.x[1])+"px;top:"+Math.min(o.y[0],o.y[1])+"px;";
			str+="width:"+(w-16)+"px;height:"+h+"px'>";
			str+="<img id=shimi"+i+" src='"+o.imageURL+"' width='"+w+"'/>";	// Add img tag
			$("#shivaDrawDiv").append(str);									// Add div
			}
		else if ((o.x) && (o.x.length == 2) && (!o.arrow))					// Polygon
			this.g.DrawPolygon(ctx,-1,a,o.x,o.y,ecol,Math.max(ewid,2),false);	// Use line if only 2 points
		else if ((o.x) && (!o.arrow)) 										// > 2 pts
			this.g.DrawPolygon(ctx,o.color,a,o.x,o.y,ecol,ewid,(cur == true));	// Regular poly
		if ((o.x) && (o.type == 0) && (o.arrow)) {							// If line arrow
			var xx=[],yy=[];												// Arrow arrays
			var n=o.x.length-1;												// Last point
			var aa=Math.atan2(o.y[n]-o.y[n-1],o.x[n]-o.x[n-1]);				// Angle of line
			var h=Math.max(12,ewid*4);										// Set size
			xx[0]=o.x[n]-h*Math.cos(aa-Math.PI/6),
			yy[0]=o.y[n]-h*Math.sin(aa-Math.PI/6);			
 			xx[1]=o.x[n];	yy[1]=o.y[n];									// Tip point
			xx[2]=o.x[n]-h*Math.cos(aa+Math.PI/6),
			yy[2]=o.y[n]-h*Math.sin(aa+Math.PI/6);			
 			this.g.DrawPolygon(ctx,ecol,a,xx,yy,ecol,0,false);				// Regular draw arrow
			o.x[n]=((xx[2]-xx[0])/2)+xx[0];									// Mid x
			o.y[n]=((yy[2]-yy[0])/2)+yy[0];									// Mid y
			if (o.x.length == 2)											// Only 2 pyt
				this.g.DrawPolygon(ctx,-1,a,o.x,o.y,ecol,Math.max(ewid,2),false);	// Use line if only 2 points
			else
				this.g.DrawPolygon(ctx,o.color,a,o.x,o.y,ecol,ewid,(cur == true));	// Regular poly
			o.x[n]=xx[1];	o.y[n]=yy[1];									// Restore last point
			}
		}
	if ((shivaLib.dr) && (shivaLib.dr.curTool == 6)) 						// If in idea map editing mode
		$.proxy(shivaLib.dr.HighlightIdea(),shivaLib.dr);					// Set highlight
}

SHIVA_Show.prototype.DrawIdeaLinks=function(clear)							// DRAW IDEA LINK LINES
{
	var i,o,fx,fy,tx,ty;
	var ctx=$("#shivaDrawCanvas")[0].getContext('2d');						// Get context
	if (clear)																// If clearing the canvas
		ctx.clearRect(0,0,1600,1600);										// Clear canvas
	for (i=0;i<this.overlay.length;++i) {									// For each idea
		o=this.overlay[i];													// Point at idea
		if ((o.type != 5) || (o.ideaParent == -1))							// Not an idea node or a base node
			continue;														// Skip it
		dleftToRight=leftToRight=true;										// Assume l-r
		dir2=dir=2;															// Dir divisors
		tx=o.ideaLeft-0+(o.ideaWid/2+8);									// Cx from
		ty=o.ideaTop-0+(o.ideaHgt/2)+12;									// Cy
		o=this.overlay[o.ideaParent];										// Point at parent
		fx=o.ideaLeft-0+(o.ideaWid/2+8);									// Cx to
		fy=o.ideaTop-0+(o.ideaHgt/2+12);									// Cy
		if (tx < fx)														// If a set and left of control
			dleftToRight=leftToRight=false;									// Set l-r flag to false
		var x=[fx,tx];														// line
		var y=[fy,ty];														// line
		this.g.DrawPolygon(ctx,-1,.75,x,y,"#666",1,true);					// Draw line
		}
}

SHIVA_Show.prototype.Resize=function(wid) 								// RESIZE ELEMENT
{
	if (this.options) {														// If has data
		if (this.options.width) {											// And width
			if (this.options.width != wid) {								// And width is different
 				var asp=1.0;												// Assume 1:1
				if (this.options.height)									// If a height set
					asp=this.options.height/this.options.width;				// Get aspect
				this.options.width=wid;										// Set wid
				this.options.height=wid*asp;								// Set calculated hgt
				this.DrawElement(this.options);								// Redraw
				return true;												// Changed
				}
			}
		}
	return false;															// Unchanged
}

SHIVA_Show.prototype.SetLayer=function(num, mode, type) 				// SET LAYER
{
	var i;
	var group=this.options.shivaGroup;										// Get group
	if (this.items) {														// If items
		if (type == "GoTo")	{												// If a goto 
			for (i=0;i<this.items.length;++i) {								// For each item
				if (this.items[i].layerType == "GoTo")						// If a goto
					this.items[i].visible="false";							// Turn them all off
				}
			}
		if (this.items[num]) 												// If valid item	
			this.items[num].visible=mode.toString();						// Set visibility to mode as string
		}

	if (group == "Map")														// Route on type
		this.DrawMapOverlays();												
	else if (group == "Earth") 
		this.DrawEarthOverlays();												
	else if (group == "Subway") 
		this.DrawSubway();
	else if (group == "Timeline") 
		this.DrawTimeline();
	else if (group == "Poster") 
		this.GoToPosterPane(num);
}

SHIVA_Show.prototype.FillElement=function(table, query) 								// FILL ELEMENT WITH DATA TABLE
{
	var group=this.options.shivaGroup;														// Get type
	if (group == "Visualization") {															// Google api
	 	this.map.setDataSourceUrl(table);													// Set table
	 	if ((query) && (query != "NO CONDITIONS SET")) {									// If query set
	  		var v=query.split(" ");															// Divide into parts
	  		for (i=0;i<v.length;++i) {														// For each part
	  			if (v[i] == "has") {														// If has
	  				v[i++]="LIKE";															// Use LIKE
	  				v[i]="'%"+v[i]+"%'";													// %%
	  				}
	  			}
	 		query="";																		// Clear
	 		for (i=0;i<v.length;++i) 														// For each part
	  			query+=v[i]+" ";															// Rebuild query
	 		this.map.setQuery(query);														// Set query
			}
		this.map.draw();																	// Redraw
		}
	else if (group == "Dialog") {															// Infobox
	}
}

SHIVA_Show.prototype.Annotate=function(x,y) 											// SHOW ANNOTATION PALATTE
{
	if (!this.dr) {																			// If not already instantiated
		this.Draw({shivaGroup:"Draw"});														// Create canvas
		this.dr=new SHIVA_Draw(this.container);												// Alloc drawing module
		}
	else this.dr.DrawPalette();																// Draw palette
	if (x != undefined) {																	// If a position set
		$("#shivaDrawPaletteDiv").css("left",x+"px");										// Set x
		$("#shivaDrawPaletteDiv").css("top",y+"px");										// Set y
		}
	this.Sound("click");																	// Click
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	HTML
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Show.prototype.DrawHTML=function() 												//	DRAW HTML
{
	$("#"+this.container).width("100%");													// Set width
	$("#"+this.container).height("100%");													// Set height
	var w=$("#"+this.container).width();													// Get true width
	var sca=w/this.options.oWid;															// Get scale
	$("#"+this.container).html(this.options.html.replace(/&quot;/g,"\""));					// Add to container
	$("#"+this.container).css({"transform":"scale("+sca+")","-webkit-transform":"scale("+sca+")","transform-origin":"0% 0%","-webkit-transform-origin":"0% 0%"});
	$("#"+this.container).css({"font-family":"Verdana,Geneva,sans-serif","font-size":"small","padding":"16px"});
	this.SendReadyMessage(true);															// Send ready message									
}

SHIVA_Show.prototype.HTMLActions=function(msg)											// REACT TO SHIVA ACTION MESSAGE
{
	var v=msg.split("|");																	// Split msg into parts
	if (v[0] == "ShivaAct=resize")  														// RESIZE
		this.DrawHTML();																	// Redraw
	else if (v[0] == "ShivaAct=data") {														// DATA
		}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	WEBPAGE
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Show.prototype.DrawWebpage=function() 											//	DRAW WEBPAGE
{
	$("#"+this.container+"IF").remove();													// Remove old one
	var h=this.options.height;																// Get height
	var w=this.options.width;																// Get width
	if (!isNaN(h))	h+="px";																// Add px
	if (!isNaN(w))	w+="px";																// Add px
	h=h.replace(/%25/,"%");																	// Unencode
	w=w.replace(/%25/,"%");																	// Unencode
	$("#"+this.container).css("height",h);													// Container height
	$("#"+this.container).css("width",w);													// Container width
	var	str="<iframe src='"+this.options.url+"' id='"+this.container+"IF' style='"; 		// Iframe
	str+="width:"+w+";height:"+h+"'>";														// Dimensions
	$("#"+this.container).append(str);														// Add to container
	this.SendReadyMessage(true);															// Send ready message									
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	CHART
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


SHIVA_Show.prototype.DrawChart=function() 												//	DRAW CHART
{	
	var i=0,array,val;
	var ops=new Object();
	var options=this.options;
	var container=this.container;
	var con="#"+container;
  	var _this=this;
	for (o in options) {
		val="";
		if (options[o]) {
			val=options[o].toString();
  			val=ops[o]=val.replace(/~/g,"#")
  			}
		if ((val.indexOf(",") != -1) && (o != "query") && (o != "title")) {
			if (val) {
				array=true;
				if (val.indexOf('=') == -1)
 					ops[o]=new Array();
				else{
					ops[o]=new Object();
					array=false;
					}
				var pairs=val.split(',');
				for (j=0;j<pairs.length;++j) {
					if (!pairs[j])
						continue;
					if (array)
						ops[o].push(pairs[j].replace(/ /g,""));
					else{
						v=pairs[j].split("=");
						if (o == "options")
							ops[v[0]]=v[1].replace(/ /g,"");
						else if (v[0].indexOf(".") != -1) {
							ops[o][v[0].split(".")[0]]={};
							ops[o][v[0].split(".")[0]][v[0].split(".")[1]]=v[1];
							}
						else if (v[0].indexOf("_") != -1) {
							ops[o][v[0].split("_")[0]]={};
							ops[o][v[0].split("_")[0]][v[0].split("_")[1]]=v[1];
							}
						else
							ops[o][v[0]]=v[1];
						}
					}
				}
			}
   		if (ops[o] == 'true') 	ops[o]=true;
  		if (ops[o] == 'false') 	ops[o]=false;
   		}
	if (options['width'])		$(con).width(options['width']);
	if (options['height'])		$(con).height(options['height']);
	ops.containerId=this.container;
	if (!ops.colors)	delete ops.colors;
   	if (ops.query) {
  		var v=ops.query.split(" ");
  		for (i=0;i<v.length;++i) {
  			if (v[i] == "has") {
  				v[i++]="LIKE";
  				v[i]="'%"+v[i]+"%'";
  				}
  			}
 		ops.query="";
 		for (i=0;i<v.length;++i) 
  			ops.query+=v[i]+" ";
 		}
    if (options.series) {
        var v=options.series.split(",")
        ops.series=new Array();
        var o={};
        for (i=1;i<v.length;++i) {
            if (!isNaN(v[i]))
            ops.series.push(o),o={};
        else
            o[v[i].split("=")[0]]=v[i].split("=")[1];
        }
        ops.series.push(o);
        }
 	var wrap=new google.visualization.ChartWrapper(ops);				// Get google chart obj
	this.map=wrap;														// Save ptr in map
 	if (ops.dataSourceUrl) 												// If a data source spec'd
 		ops.dataSourceUrl=""+ops.dataSourceUrl.replace(/\^/g,"&");		// Restore special chars
 	wrap.setOptions(ops);												// Set options
 
 	if (ops.dataSourceUrl.indexOf("google.com") == -1) {				// Not a google doc
    	shivaLib.GetSpreadsheet(ops.dataSourceUrl,false,ops.query,function(data) {	// Get spreadsheet data
			ops.dataSourceUrl=ops.query="";								// Null source/query out
		  	wrap.setOptions(ops);										// Re-set options
			wrap.setDataTable(data);									// Add the data
		    wrap.draw();												// Draw chart
  			});
		}
	else  																// Google doc
	    wrap.draw();													// Draw chart
 
 	google.visualization.events.addListener(wrap,"ready", function() { _this.SendReadyMessage(true); });
  	google.visualization.events.addListener(wrap,"select", function(r) { 
  		var o=wrap.getChart().getSelection()[0];						// Get element clicked
   		var row="-", col="-";											// Clear
   		if ((o) && (o.row != undefined))								// If a row
   			row=o.row;													// Set it
   		if ((o) && (o.column != undefined))								// If a col
   			col=o.column;												// Set it
  		_this.SendShivaMessage("ShivaChart=click",row+"|"+col); 		// Send EVA message
   		});
}

SHIVA_Show.prototype.ChartActions=function(msg)						// REACT TO SHIVA ACTION MESSAGE
{
	var v=msg.split("|");												// Split msg into parts
	if (v[0] == "ShivaAct=resize") { 									// RESIZE
		if (v[1] == "100") {											// If forcing 100%
			$("#containerDiv").width("100%");							// Set container 100%
			$("#containerDiv").height("100%");							// Set container 100%
			shivaLib.map.setOption("width","100%");						// Set chart wid 100%
			shivaLib.map.setOption("height","100%");					// Set chart hgt 100%
			}
		shivaLib.map.draw();											// Redraw chart
		}
	else if (v[0] == "ShivaAct=data") {									// DATA
		var data=google.visualization.arrayToDataTable($.parseJSON(v[1]));	// Convert to table format
		shivaLib.map.setDataTable(data);								// Set data
		shivaLib.map.draw();											// Redraw chart
		}
}

SHIVA_Show.prototype.Sound=function(sound, mode)				// PLAY SOUND
{	
	var snd=new Audio();
	if (!snd.canPlayType("audio/mpeg") || (snd.canPlayType("audio/mpeg") == "maybe")) 
		snd=new Audio(sound+".ogg");
	else	
		snd=new Audio(sound+".mp3");
	if (mode != "init")
		snd.play();
}

SHIVA_Show.prototype.ShowIframe=function(left, top, wid, hgt, url, id, mode, content)
{
	$("#"+id).remove();															
	$("#CL-"+id).remove();															
	if ((hgt == 0) || (wid == 0))
		return;
	var	str="<iframe id='"+id+"' ";
	if (url)
		str+="src='"+url+"' ";
	str+="style='position:absolute;"; 					
	if (mode == "black")
		str+="border:none;background:black;"
	else if (mode == "transparent")
		str+="border:none;background:transparent;"
	else
		str+="background:white;"
	str+="width:"+(wid+2)+"px;height:"+(hgt+2)+"px;left:"+left+"px;top:"+top+"px;'";
	if (mode == "black")
		str+=" scrolling='no'";
	else if (mode == "transparent")
		str+=" allowtransparency='true'";
	$("body").append(str+"></iframe>");	
	str="<iframe marginwidth='0' marginheight='0' src='closedot.gif' id='CL-"+id+"' style='position:absolute;margin:0px;padding:0px;border:none;"; 					
	str+="width:17px;height:18px;left:"+(wid-13+left)+"px;top:"+(top+3)+"px'/>";
	if (mode != "black")
		$("body").append(str);	

	$("#"+id).bind("load",function(e) {
    	if (content)
    		this.contentWindow.document.body.innerHTML=content;
      });
	$("#CL-"+id).bind("load",function(e) {
  		this.contentWindow.document.body.onclick=function(e) {
     	shivaLib.Sound("delete");
		$("#"+id).remove();															
		$("#CL-"+id).remove();															
      }});
}

SHIVA_Show.prototype.ShowLightBox=function(width, top, title, content)
{
	var str;
	str="<div id='shivaLightBoxDiv' style='position:fixed;width:100%;height:100%;";	
	str+="background:url(overlay.png) repeat;top:0px;left:0px';</div>";
	$("body").append(str);														
	str="<div id='shivaLightBoxIntDiv' style='position:absolute;padding:10px;width:";
	if (width != "auto") 
		str+=Math.abs(width)+"px";	
	else
		width=400;
	var x=($("#shivaLightBoxDiv").width()-width)/2;
	if (width < 0) {												// EARTH KLUDGE!!
		x=$("#"+this.container).css("left").replace(/px/,"");
		x=x-0+$("#"+this.container).width()/2+(width/2);
		}
	str+=";border-radius:12px;moz-border-radius:12px;z-index:2003;"
	str+="border:1px solid; left:"+x+"px;top:"+top+"%;background-color:#f8f8f8'>";
	str+="<img src='shivalogo32.png' style='vertical-align:-30%'/>&nbsp;&nbsp;";								
	str+="<span style='font-size:large;text-shadow:1px 1px #ccc'><b>"+title+"</b></span>";
	str+="<div id='shivaLightContentDiv'>"+content+"</div>";					
	$("#shivaLightBoxDiv").append(str);	
	$("#shivaLightBoxDiv").css("z-index",2500);						
}

SHIVA_Show.prototype.Prompt=function(title, message, def, id)
{
	var ops={ width:'auto',height:'auto',modal:true,autoOpen:true,title:title,
			buttons: {
				OK: function() {
					$("#"+id).val($("#shiva_dialogInput").val());
					$(this).remove();
					},
				CANCEL: function() { $(this).remove(); }
				}
		}
	var str="<br/><b>"+message+"</b><br/><br/>";
	str+="<input type='input' size='23' id='shiva_dialogInput' value='"+def+"'/>";
	$("body").append("<div id='shiva_dialogDiv'/>");
	$("#shiva_dialogDiv").dialog(ops);
	$("#shiva_dialogDiv").html(str);
}

SHIVA_Show.prototype.MakeSelect=function(id, multi, items, sel, extra, values)
{
	var	str="<select id='"+id+"'";
	if (multi)
		str+="multiple='multiple' size='"+multi+"'";
	if (extra)
		str+=extra;
	str+=">";
	for (i=0;i<items.length;++i) {
		str+="<option";
		if (sel == items[i])
			str+=" selected='selected'"
		if (values && values[i])
			str+=" value='"+values[i]+"'";
		str+=">"+items[i]+"</option>";
		}	
	return str+"</select>"
}

SHIVA_Show.prototype.GetTextFile=function(file, callback)
{
	var syncMode=false;
	if (file.charAt(0) == "@")														
		file="proxy.php?url="+file.substr(1);				
	xmlhttp=new XMLHttpRequest();
	if (callback) {
		syncMode=true;
		xmlhttp.onload=function(e){ callback(e.target.responseText); }
		}
	xmlhttp.open("GET",file,syncMode);
	xmlhttp.send();
	return(xmlhttp.responseText);
}

SHIVA_Show.prototype.ConvertDateToJSON=function(dateTime) 									
{
	var mos=new Array("","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
	var v=String(dateTime).split('/');
	if (v.length == 2)
		return(mos[v[0]]+" "+v[1]);
	else if (v.length == 3)
		return(mos[v[0]]+" "+v[1]+" "+v[2]);
	return v[0];
}

SHIVA_Show.prototype.FormatDate=function(date, format) 					//	FORMAT DATE STRING
{
	var mos=new Array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
	var d=new Date(date);													// Parse into date format
	var t=d.toString().match(/.{16}(.{8})/)[1];								// Get time
	if (format)																// If defined
		format=format.toLowerCase();										// Force lc
	if (format == "m/d/y")													// Based on format...												
		return (d.getMonth()+1)+"/"+d.getDate()+"/"+d.getFullYear();		// Return string
	else if (format == "m/y")
		return (d.getMonth()+1)+"/"+d.getFullYear();
	else if (format == "mo d, y")
		return mos[d.getMonth()]+" "+d.getDate()+", "+d.getFullYear();
	else if (format == "mo, y")
		return mos[d.getMonth()]+" "+d.getFullYear();
	else if (format == "mo d, y h:m")
		return mos[d.getMonth()]+" "+d.getDate()+", "+d.getFullYear()+" "+t.substring(0,5);
	else if (format == "m/d/y h:m:s")
		return (d.getMonth()+1)+"/"+d.getDate()+"/"+d.getFullYear()+" "+t;
	else if (format == "m/d/y h:m")
		return (d.getMonth()+1)+"/"+d.getDate()+"/"+d.getFullYear()+" "+t.substring(0,5);
	else (format == "y")
		return d.getFullYear();
}


SHIVA_Show.prototype.ArrayToString=function(jsonArray) 					// SAVE JSON ARRAY AS STRING
{
	var i,o,oo,str="[",key,val;
	for (i=0;i<jsonArray.length;++i) {										// For each event
		str+="{";															// Beginning item
		o=jsonArray[i];														// Point at data
		for (key in o) {													// For each item
			val=o[key];														// Get val
			str+="\""+key+"\":";											// Add key
			if (typeof(o[key]) == "object")  {								// An object
				str+="{";													// Initial {
				oo=o[key];													// Point at interior obj									
				for (key in oo) {											// For each item
					str+="\""+key+"\":";									// Add key
					val=oo[key];											// Get val
					str+="\""+val+"\",";									// Add to val
					}	
				str=str.substr(0,str.length-1)+"\t},";						// Remove last comma and add final },
				}
			else															// Regular one
				str+="\""+val+"\",";										// Add val
			}
		str=str.substr(0,str.length-1);										// Lop off last comma
		if (i != jsonArray.length-1)	str+="},\n";						// Not the last one use comma
		else							str+="}]";							// No comma or LF on last 
		}
	return str;
}


SHIVA_Show.prototype.LinkToAnchor=function(str) 						// CONVERT LINKS TO ANCHORS
{
	var i,v,vv,url,title;
	if (!str)																// If no string
		return "";															// Return null
	if (str.match(/href=/)) 												// If an embedded <a> tag
		return str;															// Don't convert
	if (str.match(/http/)) {												// If an embedded url
		v=(str+" ").match(/http.?:\/\/.*?\s/ig);							// Extract url(s)
		for (i=0;i<v.length;++i) {											// For each url
			
			v[i]=$.trim(v[i]);												// Trim it
			vv=v[i].split("|");												// Split by bar
			url=title=vv[0];												// Get url/title 
			if (vv.length > 1) 												// If a title spec'd
				title=vv[1].replace(/_/g," ");								// Get separate title and restore spaces
			str=str.replace(RegExp(v[i].replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"))," <a href='"+url+"' target='_blank'>"+title+"</a> ");	// Replace with anchor tag
			}
		}
	return str;																// Return converted string
}

SHIVA_Show.prototype.Clone=function(obj) 								// CLONE OBJECT/ARRAY
{
    var i;
    if (null == obj || "object" != typeof obj) return obj;					// Singleton
	else if (obj instanceof Array) {   										// Handle Array
	    var copy=[];														// Copy array
        for (i=0;i<obj.length;++i) 											// For each member 
        	copy[i]=this.Clone(obj[i]);										// Copy with recursion
        return copy;														// Return array
    	}
	else if (obj instanceof Object) {   									// Handle Object
	    var copy={};														// Copy objecy
 		for (var attr in obj)												// For each part
			if (obj.hasOwnProperty(attr)) 									// ?
				copy[attr]=this.Clone(obj[attr]);							// Copy with recursion
        return copy;														// Return obj
   	 	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	ESTORE
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Show.prototype.EasyFile=function(_data, callback, type) 			// EASYFILE MENU
{
	var i,email="",w=350;											
	var v=document.cookie.split(';');										// Get cookie array
	for (var i=0;i<v.length;i++) 											// for each cookie
		if (v[i].indexOf("ez-email=") != -1)								// If an email set
			email=v[i].substr(9);											// Use it
	var str="<br/>Use <b>eStore</b> to save and load projects under your email address. When saving, type a title when asked and when loading, choose a project from a list of your saved projects.<br/>"
		str+="<br/><table id='ez-maintbl' cellspacing=0 cellpadding=0 style='font-size:small'>";
	str+="<tr><td width='25%'>Email</td><td><input type='text' id='email' size='40' value='"+email+"'/></td></tr>";
	str+="</table><div align='right' style='font-size:x-small'><br/>";	
	if (type != "all")
		str+=" <button id='saveBut'>Save</button>";	
	str+=" <button id='loadBut'>Load</button>";	
	if (type != "all")
		str+=" <button id='linkBut'>Link</button>";	
	str+=" <button id='cancelBut'>Cancel</button></div>";	
	if ((type == "KML") || (this.group == "Earth")) {						// Earth kluge
		 w=-400;															// Move left
		 $("#containerDiv").height($("#containerDiv").height()/100);		// Shrink it
		 }																
	this.ShowLightBox(w,20,"SHIVA eStore",str)								// Create light box
	$("#cancelBut").button().click(function() { $("#shivaLightBoxDiv").remove();		// Remove box
												if ($("#containerDiv").height() < 10)	// If a shrunken frame
													$("#containerDiv").height($("#containerDiv").height()*100);	// Restore it
												});
	$("#saveBut").button().click(function() {								// SAVE
		var _email=$("#email").val();										// Get email
		var _title=$("#ez-title").val();									// Get title
		var _type=type;														// Get type
		if (!_email) {														// Need email
			alert("Please type your email");								// Alertsh
			return;															// Don't save
			}						
		if (((_email.toLowerCase() == "samples") && (_email != "SaMpLeS")) || // Samples
			((_email.toLowerCase() == "canvas") && (_email != "CaNvAs"))) {	// Canvas
			alert("Sorry, but you can't save using this name");				// Alert
			return;															// Don't save
			}						
		if (!$("#ez-title").length) {										// If no title
			str="<tr><td>Title</td><td><input type='text' size='40' id='ez-title'/></td></tr>";
			$(str).appendTo("#ez-maintbl tbody");							// Add title to table
			$("#ez-title").focus();											// Focus on title
			return;
			}
		if (!_title) {														// Need title
			alert("Please type title to save under");						// Alert
			return;															// Don't save
			}						
		document.cookie="ez-email="+_email;									// Save email in cookie
		$("#shivaLightBoxDiv").remove();									// Close box						
		if ($("#containerDiv").height() < 10)								// If a shrunken frame (Earth kluge)
			$("#containerDiv").height($("#containerDiv").height()*100);		// Restore it
		str="\",\n\t\"shivaTitle\": \""+_title+"\"\n}";						// Add title
		if ((type != "Canvas") && (type != "KML"))							// Not for canvas or KML
			_data=_data.substr(0,_data.lastIndexOf("\""))+str;				// Remove last "\n}
		$.post("http://www.primaryaccess.org/REST/addeasyfile.php",{ email:_email, type: _type, title:_title,data:_data.replace(/'/g,"\\'") });
		});
	
	$("#loadBut").button().click(function() {								// LOAD
		email=$("#email").val();											// Get email
		if (!email) {														// Need email
			alert("Please type your email");								// Alert
			return;															// Don't save
			}						
		if (!isNaN(email)) {												// If just a number
			shivaLib.LoadEasyFile(email, callback);							// Load it directly
			return;															// Quit
			}	
		document.cookie="ez-email="+email;									// Save email in cookie
		var dat={ email:email };											// Set email to look for
		if (type != "all")													// If not loading all
			dat["type"]=type;												// Filter by type
		str="http://www.primaryaccess.org/REST/listeasyfile.php";			// eStore list url
		shivaLib.ezcb=callback;		shivaLib.ezmode="load";					// Set callback and mode
		$.ajax({ url: str, data:dat, dataType:'jsonp' });					// Get jsonp
		});
			
	$("#linkBut").button().click(function() {								// LINK
		email=$("#email").val();											// Get email
		if (!email) {														// Need email
			alert("Please type your email");								// Alert
			return;															// Don't save
			}						
		document.cookie="ez-email="+email;									// Save email in cookie
		var dat={ email:email };											// Set emila to look for
		if (type != "all")													// If not loading all
			dat["type"]=type;												// Filter by type
		str="http://www.primaryaccess.org/REST/listeasyfile.php";			// eStore list url
		shivaLib.ezcb="";		shivaLib.ezmode="link";						// Set callback and mode
		$.ajax({ url: str, data:dat, dataType:'jsonp' });					// Get jsonp
		});
	}

SHIVA_Show.prototype.ShowEasyFile=function(files, callback, mode) 		// GET DATA FROM EASYFILE
{
		var i;
		var str="<br/><div style='overflow:auto;overflow-x:hidden;height:200px;font-size:x-small;padding:8px;border:1px solid #cccccc'>";
		str+="<table id='ezFilesTable' cellspacing=0 cellpadding=4><tr><td></td></tr></table></div>";
		$("#shivaLightContentDiv").html(str);													
		str="<div align='right' style='font-size:x-small'><br>Show only with this in title: <input type='text' size='10' id='ezFileFilter'/>";
		str+=" <button id='cancelBut'>Cancel</button></div>";	
		$("#shivaLightContentDiv").append(str);
		$("#cancelBut").button().click(function() { $("#shivaLightBoxDiv").remove();
													if ($("#containerDiv").height() < 10)	// If a shrunken frame (Earth kluge)
													$("#containerDiv").height($("#containerDiv").height()*100);		// Restore it
													});
		this.MakeEasyFileList(files,"",callback,mode);						// Show files
		$("#ezFileFilter").keyup($.proxy(function() {						// Add change handler
 			var filter=$("#ezFileFilter").val();							// Get filter
			$("#ezFilesTable tbody").empty();								// Empty all rows
			this.MakeEasyFileList(files,filter,callback,mode);				// Show files
			},this));
}

SHIVA_Show.prototype.MakeEasyFileList=function(files, filter, callback, mode) 	// SHOW LIST OF FILES
{
	var i,str,type;
	files.sort(function(a, b) { 												// Sort by date
		var A=new Date(a.created.substr(0,5)+"/2012 "+a.created.substr(6) );
		var B=new Date(b.created.substr(0,5)+"/2012 "+b.created.substr(6) );
		return B-A; 
		});												
	for (i=0;i<files.length;++i) {											// For each file
		if ((filter) && (files[i].title.toLowerCase().indexOf(filter.toLowerCase()) == -1)) // If  filter not in title
			continue;														// Skip it
		str="<tr id='ezfile-"+files[i].id+"'><td>"+files[i].created.replace(/ /,"&nbsp")+"</td>";		// Add date
		str+="<td width='100%'><img  src='adddot.gif'  height='11'> &nbsp;";
		str+=files[i].id+" "+files[i].title+"</td></tr>";					// Add title
		$(str).appendTo("#ezFilesTable tbody");								// Add file to table
		$("#ezFilesTable tr:odd").addClass("odd");							// Color
		}
	for (i=0;i<files.length;++i) {											// For each file
		type=files[i].type;													// Set type
		$("#ezfile-"+files[i].id).click(function() {						// Add click handler
			if ((mode == "link") && (type == "KML"))						// If a KML link
				prompt("Press Ctrl-C to copy link","http://www.primaryaccess.org/REST/getkml.php?id="+this.id.substr(7));	// Show url
			if ((mode == "link") && (type != "KML"))						// If a SHIVA link
				prompt("Press Ctrl-C to copy link","www.viseyes.org/shiva/go.htm?e="+this.id.substr(7));	// Show url
			else{															// If a load
				var dat={ id:this.id.substr(7) };							// Set id to look for
				str="http://www.primaryaccess.org/REST/geteasyfile.php";	// eStore list url
				shivaLib.ezcb=callback;										// Set callback
				shivaLib.ezmode=this.id.substr(7);	 						// Set ID
				$.ajax({ url: str, data:dat, dataType:'jsonp' });			// Get jsonp
				}
			$("#shivaLightBoxDiv").remove();								// Close lightbox
			if ($("#containerDiv").height() < 10)							// If a shrunken frame (Earth kluge)
				$("#containerDiv").height($("#containerDiv").height()*100);	// Restore it
			});	
		}
}

SHIVA_Show.prototype.LoadEasyFile=function(num, callback) 				// GET SINGLE EASYFILE 
{
	var str="http://www.primaryaccess.org/REST/geteasyfile.php";			// eStore url
	shivaLib.ezcb=callback;													// Set callback
	shivaLib.ezmode=num;	 												// Set ID
	$.ajax({ url: str, data:{id:num}, dataType:'jsonp' });					// Get jsonp
	$("#shivaLightBoxDiv").remove();										// Close lightbox
	if ($("#containerDiv").height() < 10)									// If a shrunken frame (Earth kluge)
		$("#containerDiv").height($("#containerDiv").height()*100);			// Restore it
}

function easyFileListWrapper(data)										// LOAD EASY FILE LIST
{
	shivaLib.ShowEasyFile(data,shivaLib.ezcb,shivaLib.ezmode); 				// Show list of files
}

function easyFileDataWrapper(data)										// LOAD EASY FILE DATA
{
	if (!data["Element-0"])													// If not a canvas element
		data.shivaId=Number(shivaLib.ezmode);								// Set ID
	shivaLib.ezcb(data);													// Callback
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	HELPERS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Graphics.prototype.EnumObject=function(obj) 														// DEBUG TOOL
{
	trace("------------------------------------------------------------");		
	for (var key in obj) 														
		trace(key+"="+obj[key])													
}

function trace(msg, p1, p2, p3, p4)
{
	if (p4)
		console.log(msg,p1,p2,p3,p4);
	else if (p3)
		console.log(msg,p1,p2,p3);
	else if (p2)
		console.log(msg,p1,p2);
	else if (p1)
		console.log(msg,p1);
	else
		console.log(msg);
	
}

SHIVA_Draw.prototype.isTouchDevice=function() 							// IS THIS A TOUCH DEVICE?
{
	var el=document.createElement('div');									// Make div
	el.setAttribute('ongesturestart', 'return;');							// Try to set gesture
	if (typeof el.ongesturestart == "function")								// If supports touch		
		return true;														// Return true
	else 																	// Doesn't support touch
		return false;														// Return false
}

//  ///////////////////////////////////////////////////////////////////////////////////////////////////// 
//  SHIVALIB PROPERTIES  
//  ///////////////////////////////////////////////////////////////////////////////////////////////////// 

SHIVA_Show.prototype.SaveData=function(mode, style, items, props, type) 			// SAVE DATA FROM FROM TO JSON, ETC
{
		var i,j,k,o,str1;
		var ovr=""
		var itemStart;
		var str="{\n";
		$('#formatter').val(0)
		var atts=new Array();
		for (o in props) 
			atts.push(o);
		if (items) {
			for (i=0;i<atts.length;++i)
				if (atts[i] == "item") {
					atts[i]="name";
					break;
				}
			itemStart=i;
			for (j=0;j<items.length;++j) 
				for (k=itemStart+1;k<atts.length;++k)	
					items[j][atts[k]]=$("#itemInput"+j+"-"+(k-i)).val();
			}
		if ((mode == 'JSON') || (mode == "GetJSON") || (mode == "Canvas") || (mode == "eStore")) {
			if (items && items.length) {
				for (i=0;i<items.length;++i) {
					str+="\t\"item-"+(i+1)+"\": \"";
					for (k=itemStart;k<atts.length;++k)	{
						str1=items[i][atts[k]];
						if (str1) {
							if ((props[atts[k]]) && (props[atts[k]].opt == "list"))
								str1=str1.replace(/\n/g,"<br/>").replace(/\r/g,"").replace(/\:/g,"`");
							else
								str1=str1.replace(/\n/g,",").replace(/\r/g,"").replace(/\:/g,"`");
							}
						str+=atts[k]+":"+str1+";"; 
						}
					str=str.substring(0,str.length-1)+"\",\n";	
					}
			if (!this.overlay)
				str=str.substring(0,str.length-3)+"\",\n";	
				}
			if (this.overlay && this.dr)
				str+=this.dr.SaveDrawData(true);
			var j=0;
			if (type)
		        str+="\t\"chartType\": \""+type+"\",\n";
			for (o in props) {
		        if (o == "item")
		        	break;
		       	str1=$("#propInput"+(j++)).val(); 	
		        if ((props[o].opt == "list") && (str1))
		        	str1=str1.replace(/\n/g,",").replace(/\r/g,"");
	        	str+="\t\""+o+"\": \""+str1+"\",\n";
		        }
			d=new Date().toUTCString();
			str+="\t\"shivaMod\": \""+d.substring(0,d.length-13)+"\",\n";
			str+="\t\"shivaGroup\": \""+style+"\"\n}";
			if (mode == 'Canvas') {
	   			window.parent.document.getElementById("shivaCan").contentWindow.postMessage("PutJSON:"+str,"*");
	   			this.Sound("ding");
	   			window.parent.OpenTab(8);
				return ;
				}
			if (mode == 'GetJSON')
				return str;
			$('#formatter').val(0);
			if (mode == 'eStore')
				return this.EasyFile(str,$.proxy(function(data) { ReEdit(data) },this),style);
			$("#helpDiv").html("");	
			}	
		else{
			$('#formatter').val(0);
			$("#helpDiv").html("");		
			str="http://www.viseyes.org/shiva/go.htm";
			str+="?shivaGroup="+style;
			if (items && items.length) {
				for (i=0;i<items.length;++i) {
					str+="&item-"+(i+1)+"=";
					for (k=itemStart;k<atts.length;++k)	{
						str1=items[i][atts[k]];
						if (str1)
							str1=str1.replace(/\n/g,",").replace(/\r/g,"").replace(/\:/g,"`");
						str+=atts[k]+":"+str1+";"; 
						}
					str=str.substring(0,str.length-1);	
					}
				}
			if (this.overlay)
				str+=this.dr.SaveDrawData(false);
			if (type)
				str+="&chartType="+type;
			var j=0;
			for (o in props) {
		        if (o == "item")
		        	break;
		        str1=$("#propInput"+(j++)).val();
		        if (str1)
		        	str1=str1.replace(/&/g,"^").replace(/#/g,"``");
		        if ((props[o].opt == "list") && (str1))
		        	str1=str1.replace(/\n/g,",").replace(/\r/g,"");
		        str+="&"+o+"="+str1;
		        }
			if (mode == 'WordPress')
		 		str="[iframe src='"+encodeURI(str)+"']";
			else if ((mode == 'iFrame') || (mode == 'Drupal'))
		 		str="<iframe width='600' height='400' src='"+encodeURI(str)+"'></iframe>";
			}
	$("#outputDiv").html("<br/><br/>Embed code:<br><textarea readonly='yes' rows='6' cols='60' id='tmptxt1'>"+str+"</textarea>");
	$("#tmptxt1").select();
	return str;
}

SHIVA_Show.prototype.ReEdit=function(jsonData, propertyList)	
{
		var p,v,i=0,j,k=0,pair,key,o;
		var query=window.location.search.substring(1);
		if (!query && !jsonData)
			return;
		if (jsonData) {
			var items=new Array();
			for (key in jsonData) {
	 			if (key == "shivaEvents") 
		 			continue;
	 			if (key.indexOf("item-") != -1) {
		 			v=jsonData[key].split(";");
					o=new Object;
		 			for (j=0;j<v.length;++j) {
		 				p=v[j].split(":");
		 				o[p[0]]=p[1];
		 				}
					items.push(o);
		 			continue;
		 			}
				else if (key.indexOf("draw-") != -1) 
					this.AddOverlaySeg(jsonData[key],true);					
				else{
					k=0;
					for (o in propertyList) {
						if (key == o) {
							$("#propInput"+k).val(jsonData[key]);
							break;
							}
						k++;
						}
					}
				}
			return items;
			}
		var vars=query.replace(/%C2%AE/g,"&reg").split("&");
		if (vars.length < 4)
			return;
		var items=new Array();
		for (var i=0;i<vars.length;i++) {
			vars[i]=vars[i].replace(/\^/g,"&").replace(/%20/g," ").replace(/%60/g,"`").replace(/%3C/g,"<").replace(/%3E/g,">").replace(/%3c/g,"<").replace(/%3e/g,">").replace(/``/g,"#");
			pair=vars[i].split("=");
			for (j=2;j<pair.length;++j)
				pair[1]+="="+pair[j];
			if (pair[1]) 
				pair[0]=unescape(pair[0]);
	 		if (pair[0].indexOf("draw-") != -1) 
				this.AddOverlaySeg(pair[1],true);					
	 		if (pair[0].indexOf("item-") != -1) {
	 			v=pair[1].split(";");
				o=new Object;
	 			for (j=0;j<v.length;++j) {
	 				p=v[j].split(":");
	 				o[p[0]]=p[1];
	 				}
				items.push(o);
	 			}
			else{
				for (o in propertyList) 
					if (pair[0] == o) {
						$("#propInput"+(k++)).val(pair[1]);
						break;
						}
				}
			}
	return items;
}

SHIVA_Show.prototype.ShowHelp=function(att, helpText, chartType)
{
		var v;
		var str="<br/><hr/>";
		$("#outputDiv").text(" ");
		if (att) {
			if (att.charAt(0) == ' ')
				att=att.substr(1)
			v=att.split("&nbsp;");
			str+="<b>How to set "+v[0]+"</b><br/><br/>";
			if (helpText[v[0]])
				str+=helpText[v[0]];
			}
		else
			str+="Click on a label to show help."
		if (att == "Data source URL") {
			if (helpText[chartType]) {
				str+="<br/><br/><b>Data Format for "+chartType+"</b><br/><br/><table>";
				str+="<tr><td>"+helpText[chartType]+"</td></tr>";
				str+="</table>";
				}
			}
		if (helpText["OVERVIEW"]) 
			str+="<br/><br/><b><i>Click <a onClick='shivaLib.ShowOverview()'><u>here</u></a> for an overview on the entire element.</b>";
		$("#helpDiv").html(str);
}
		
SHIVA_Show.prototype.ShowOverview=function()
{
	var str="<br/><hr/><b>"+shivaLib.options.shivaGroup+" overview</b><br/><br/>";
	str+=helpText["OVERVIEW"];
	$("#helpDiv").html(str);
}
	
SHIVA_Show.prototype.SetAttributes=function(props, items, keepData)
{
	var i,j,k,l,o,oo,id,id2;
	var atts=new Array();
	var oldData;
	for (o in props) 
		atts.push(o);
	if (keepData) {
		oldData=new Array()
		for (i=0;i<atts.length;++i) {
			if (atts[i] == "item")
				break;
			oldData.push($("#propInput"+i).val());
			}
		}
	$('#propertyTable tr:gt(0)').remove();
	
	for (i=0;i<atts.length;++i) {
		o=atts[i];
		id="propInput"+i;
   		var str="<tr style='height:28px'><td width='12'></td><td width='200' onClick='ShowHelp(this.innerHTML)'>"+props[o].des.split("::")[0];
		if (o == "dataSourceUrl") 
			str+="&nbsp;&nbsp;&nbsp;<img src='gdrive.png' id='gDriveLoadBut' title='Load from Google Drive' style='vertical-align:bottom;cursor:pointer'>"					
   		str+="</td><td></td><td>";
   		if (props[o].opt == "query") 
   			str+="<input type='password' tabIndex='-1' onChange='Draw()' onFocus='shivaLib.QueryEditor(\""+id+"\")' id='"+id+"'/>";
  		else if (props[o].opt == "advanced") 
   			str+="<input tabIndex='-1' onChange='Draw()' onFocus='shivaLib.SetAdvancedAttributes(\""+id+"\",\""+o+"\")' id='"+id+"'/>";
   		else if ((props[o].opt == "color") || (props[o].opt == "colors")) {
   			str+="<div style='max-height:26px'><input onChange='Draw()' style='position:relative;text-align:center;height:16px;top:2px; padding-left: 20px' id='"+id+"'/>";
   			str+="<div style='position:relative;border:1px solid #999;height:10px;width:10px;top:-15px;left:8px;background-color:white'"
			if (props[o].opt == "colors")	
  				str+=" onclick='shivaLib.ColorPicker(1,"+i+")' id='"+id+"C'/>";		   			
			else
 				str+=" onclick='shivaLib.ColorPicker(0,"+i+")' id='"+id+"C'/>";		   			
			str+="</div>"
			}				   			
   		else if (props[o].opt == "button") 
   			str+="<button type='button' onChange='"+o+"' id='"+id+"'>"+props[o].def+"</button>";
   		else if (props[o].opt == "slider")
   			str+="<input onChange='Draw(\"opacity\")' type='range' id='"+id+"' onFocus='ShowHelp(\""+props[o].des+"\")'/>";
   		else if (props[o].opt == "checkbox") {
   			str+="<input onChange='Draw()' type='checkbox' id='"+id+"' onFocus='ShowHelp(\""+props[o].des+"\")'";
   			if (props[o].def == "true")
   				str+=" checked";
   			str+="/> "+props[o].des.split("::")[1];
   			}
   		else if (props[o].opt == "list")
   			str+="<textarea cols='12' rows='2' onChange='Draw()' id='"+id+"' onFocus='ShowHelp(\""+props[o].des+"\")'/>";
   		else if (props[o].opt == "sizer") 
			str+="<button type='button' id='"+id+"' onclick='shivaLib.SizingBox(\"containerDiv\",this.id)'>Set</button>";		   			
   		else if (props[o].opt == "hidden") 
   			str="<tr><td width='12'></td><td width='200'><input type='hidden' id='"+id+"'/>";
  		else if (props[o].opt.indexOf('|') != -1) {
   			var v=props[o].opt.split("|");
			if (o == 'item') {
				str="<tr><td width='12'></td><td colspan='3'><div id='accord'>";
				for (j=0;j<items.length;++j) {
					str+="<h3><a href='#' id='acctitle"+j+"'><b>"+items[j].name+"</b></a></h3><div id='accord-"+j+"'style='overflow-x:hidden'>";
					for (k=i+1;k<atts.length;++k) {
						id2="itemInput"+j+"-"+(k-i);
						oo=atts[k];
						if (props[oo].opt != "hidden")
							str+="<span onClick='ShowHelp(this.innerText)'>"+props[oo].des;
						if ((this.drupalMan) && (oo == "layerSource")) 
							str+="<img src='kmlicon.gif' id='"+j+"' title='Click to find KML file' style='vertical-align:bottom' onclick='shivaLib.GetDataFromManager(\"kml\",this.id)'/>";
					   	str+="</span><span style='position:absolute;left:142px;'>";
					   	if (props[oo].opt == "color") {
	   						str+="<input size='14' onChange='Draw()' style='text-align:center' id='"+id2+"'>";
			    			str+="<div style='position:relative;border:1px solid;height:8px;width:9px;top:-14px;left:5px'"
							str+=" onclick='shivaLib.ColorPicker(0,"+((j*100)+100+(k-i))+")' id='"+id2+"C'/>";		   			
							}				   			
				   		else if (props[oo].opt == "colors") 
	   						str+="<input style='width:90px' tabIndex='-1' onChange='Draw()' onFocus='shivaLib.ColorPicker(2,"+((j*100)+100+(k-i))+")' id='"+id2+"'>";
			   			else if (props[oo].opt == "button") 
   							str+="<button type='button' size='12' onChange='"+oo+"' id='"+id+"'>"+props[oo].def+"</button>";
			   			else if (props[oo].opt == "slider")
   							str+="<input style='width:90px' onChange='Draw(\"opacity\")' type='range' id='"+id+"' onFocus='ShowHelp(\""+props[oo].des+"\")'/>";
			   			else if (props[oo].opt == "list")
   							str+="<textarea style='width:90px' rows='2' onChange='Draw()' onInput='Draw()' id='"+id2+"' onFocus='ShowHelp(\""+props[oo].des+"\")'/>";
				   		else if (props[oo].opt == "hidden") 
   							str+="<input type='hidden' id='"+id2+"'/>";
			   			else if (props[oo].opt.indexOf('|') != -1) {
			   				var v=props[oo].opt.split("|");
							str+="<select style='width:90px' id='"+id2+"' onChange='Draw()' onFocus='ShowHelp(\""+props[oo].des+"\")'>";
							for (l=0;l<v.length;++l) {
								if (v[l])
									str+="<option>"+v[l]+"</option>";
								}
							str+="</select>";
				   			}
				   		else if (props[oo].opt == "sizer") 
  							str+="<button type='button' id='"+id2+"' onclick='shivaLib.SizingBox(\"containerDiv\",this.id)'>Set</button>";		   			
				   		else
   							str+="<input style='width:90px' onChange='Draw()' type='text' id='"+id2+"' onFocus='ShowHelp(\""+props[oo].des+"\")'/>";
				   		str+="</span></p>";
				   		}
					str+="</div>";
					}
				}
			else{
				str+="<select id='"+id+"' onChange='Draw()' onFocus='ShowHelp(\""+props[o].des+"\")'>";
				for (j=0;j<v.length;++j) {
					if (v[j])
						str+="<option>"+v[j]+"</option>";
					}
				str+="</select>";
	   			}
	   		}
	   		else{
   				str+="<input size='14' style='height:16px' onChange='Draw()' type='text' id='"+id+"' onFocus='ShowHelp(\""+props[o].des+"\")'/>";
			}
		str+="<td width='12'></td ></td></tr>";
		$(str).appendTo("#propertyTable tbody")
	  	$("#"+id).val(props[o].def);  
	  	if (keepData)
		  	$("#"+id).val(oldData[i]);  
		else
	  		$("#"+id).val(props[o].def);  
   		if (props[o].opt == "color")
			if (props[o].def.toLowerCase() != 'auto') {
				$("#"+id).css('border-color',"#"+props[o].def); 
				$("#"+id+"C").css('background-color',"#"+props[o].def); 
				}
		if (o == "item")
			break;
		}			
	str="<tr height='8'><td></td></tr>";
	$(str).appendTo("#propertyTable tbody")
	$("#accord").accordion({ collapsible:true, active:false, autoHeight:false, change:this.callback});
	$("#gDriveLoadBut").on("click",function() {
		shivaLib.GoogleDriveLoad(true, function(file) {
			if (file) $("#propInput0").val(file);
			Draw();
			})
		});
	if (items) {
		for (j=0;j<items.length;++j) {
			for (k=i+1;k<atts.length;++k) {
		   		o=atts[k];
		   		id2="itemInput"+j+"-"+(k-i);
		   		if (props[o].opt == "color")
	    			if (props[o].def.toLowerCase() != 'auto') {
						$("#"+id2).css('border-color',"#"+items[j][atts[k]]); 
						$("#"+id2+"C").css('background-color',"#"+items[j][atts[k]]); 
						}
				}
			}
		for (i=0;i<atts.length;++i) 
			if (atts[i] == "item") {
				atts[i]="name";
				break;
			}
		for (j=0;j<items.length;++j) 
			for (k=i;k<atts.length;++k)	
				$("#itemInput"+j+"-"+(k-i)).val(items[j][atts[k]]);
		}
	
	var bs={"-moz-border-radius":"10px","-webkit-border-radius":"10px","-khtml-border-radius":"10px","border-radius":"10px",
			"width":"100px","padding-left":"7px","padding-right":"7px","padding-top":"1px",
			"border":"1px solid #ddd","color":"#666","font-size":"12px","height":"18px"
			};	 
	
	for (i=0;i<atts.length;++i) {
		$("#propInput"+i).css(bs);
		if ((props[atts[i]]) && (props[atts[i]].opt.match(/\|/)) && (atts[i] != "item")) {
			$("#propInput"+i).css({ "background-color":"#eee",
				  					"background":"-webkit-linear-gradient(top,#ffffff 0%,#f0f0f0 100%)",
				  					"background":"linear-gradient(#ffffff,#f0f0f0)",
									"padding-left":"5px",width:"115px",height:"21px",
									});
			if (navigator.userAgent.match(/firefox/i))
				$("#propInput"+i).css({ "text-indent":"0.01px","text-overflow":"''",
										"background":"url(selectorbutton.gif) no-repeat right #f8f8f8"
										});
			}
	}

}

SHIVA_Show.prototype.SetAdvancedAttributes=function(prop, baseVar) 		// ADVANCED OPTIONS									
{
	var str,title,aProps,v,i;
	$("#advAttDialogDiv").dialog("destroy");								// Kill old dialog is there							
	$("#advAttDialogDiv").remove();											// Remove any added parts
	str="<table>"															// Table header
	switch(baseVar) {														// Route on var
		case "legendTextStyle": 																				
		case "titleTextStyle": 																				
		case "pieSliceTextStyle": 																				
		case "tooltipTextStyle": 																				
			aProps= { 	fontName: 	{ opt:'string',	 des:'Font'},			// Sub-items
						fontSize: 	{ opt:'string',	 des:'Size'},
						color: 		{ opt:'color',	 des:'Color'}
						}			
			break;
		case "chartArea": 																				
			aProps= { 	left: 	{ opt:'string',	 des:'Left'},				// Sub-items
						top: 	{ opt:'string',	 des:'Top'},
						height: { opt:'string',	 des:'Height'},
						width: 	{ opt:'string',	 des:'Width'}
						}			
			break;
		case "backgroundColor": 																				
			aProps= { 	fill: 		{ opt:'color',	 des:'Fill color'},		// Sub-items
						stroke: 	{ opt:'color',	 des:'Border color'},
						strokeWidth:{ opt:'string',	 des:'Border width'}
						}			
			break;
		case "vAxis": 	
		case "hAxis":																			
			aProps= { 	baseline: 		{ opt:'string',	 des:'Baseline'},		// Sub-items
						baselineColor: 	{ opt:'color',	 des:'Baseline color'},
						direction:		{ opt:'string',	 des:'Direction'},
						format:			{ opt:'string',	 des:'Axis label format'},
						direction:		{ opt:'string',	 des:'Direction'},
						logScale:		{ opt:'string',	 des:'Log scale?'},
						textPosition:	{ opt:'string',	 des:'Text position'},
						title:			{ opt:'string',	 des:'Axis title'},
						viewWindow_max:	{ opt:'string',	 des:'Max value'},
						viewWindow_min: { opt:'string',	 des:'Min value'},
						slantedText:	{ opt:'string',	 des:'Slanted text'}
						}			
			break;
		 case "backgroundColors":
			aProps= {   main:     { opt:'color',  des:'Main Background'},   // Sub-items
		            eventspan:  		{ opt:'color',   des:'Event Span Background'},
		            head:    			{ opt:'color',  des:'Header, Footer and Zoom Background'},
		            popup:     			{ opt:'color',  des:'Popup Background'},
		            imagelane:    		{ opt:'color',  des:'Image Lane Background'},
		            ticklane:   		{ opt:'color',  des:'Time Ticks Background'},
		            popuplink: 			{ opt:'color',  des:'Popup Link Background'}
		            }     
			break;
		case "fontColors":
		      aProps= {   main:     { opt:'color',  des:'Main Font Color'},   // Sub-items
		            head:    { opt:'color',  des:'Header Font Color'},
		            popup:   { opt:'color',  des:'Popup Font Color'},
		            links:   { opt:'color',  des:'Link Font Color'}
		            }  
			break;
			}
		for (o in aProps) {													// For each sub-item
			str+="<tr style='height:26px' onClick='ShowHelp(\""+aProps[o].des+"\")'><td>"+aProps[o].des+"</td><td>";	// Add title
			if (aProps[o].opt == "color") { 									// If a color
	   			str+="<div style='max-height:26px'><input size='14' style='position:relative;text-align:center;height:16px;top:2px' id='"+baseVar+o+"'/>";
   				str+="<div style='position:relative;border:1px solid;height:11px;width:11px;top:-16px;left:6px;background-color:white'"
 				str+=" onclick='shivaLib.ColorPicker(0,\"___"+baseVar+o+"\")' id='"+baseVar+o+"C'/>";		   			
				}
			else															// If input
				str+="<div style='max-height:26px'><input size='14' style='position:relative;text-align:left;height:16px;top:2px' id='"+baseVar+o+"'/>";
			str+="</td></tr>";													// End row
			}
	
	var ops={ 																// Dialog options
		width:'auto',height:'auto',modal:true,title:"Set "+baseVar,position:[300,350],
		buttons: {
			OK: function() {												// On OK button
				str="";														// No text yet
				for (o in aProps) {											// For each item
					if ($("#"+baseVar+o).val())								// If something there
						str+=o+"="+$("#"+baseVar+o).val()+",";				// Add value
					}
				$("#"+prop).val(str);										// Set in input box
				$("#"+prop).trigger("onchange");							// Trigger a change
				$(this).dialog("destroy");									// Kill dialog
				$("#advAttDialogDiv").remove();								// Remove items
				},
			'Cancel': function() {											// On cancel button
				$(this).dialog("destroy");									// Kill dialog
				$("#advAttDialogDiv").remove();								// Remove items
				}
			}
		}
	$("body").append("<div id='advAttDialogDiv'/>");						// Add div for dialog
	$("#advAttDialogDiv").dialog(ops);										// Add dialog
	$("#advAttDialogDiv").html(str+"</table>");								// Fill dialog
	v=$("#"+prop).val().split(",");											// Split sub-items by comma
	for (i=0;i<v.length-1;++i)												// For each sub-item
		$("#"+baseVar+v[i].split("=")[0]).val(v[i].split("=")[1]);			// Set last value
}

SHIVA_Show.prototype.SizingBox=function(div, id, pos, alpha, col, edge)		// SIZING BOX
{ 	 	
	if (div == undefined) {													// If no div
		$("#shivaSizingBox").remove();										// Kill it
		Draw();																// Redraw
		return;																// Quit
		}
	Draw();																	// Redraw
	if (id.indexOf("Input")!= -1) 											// If an id
		pos=$("#"+id).val();												// Get value
	var v,top=0,left=0,wid=10000;											// Defs
	if (pos)																// If a pos
		v=pos.split(",");													// Split pos
	if ($("#shivaSizingBox").length == 0) {									// If doesn't exit yet
		if (alpha == undefined)	alpha=.5;									// Default alpha
		if (col == undefined)	col="#ccc;"									// Default color
		if (edge == undefined)	edge="#000;"								// Default edge color
		var str="<div id='shivaSizingBox' style='background:"+col+"border:1px solid "+edge+";position:absolute;opacity:"+alpha+"'>";
		str+="<img src='addeventdot.gif' onclick='shivaLib.SizingBox()'></div>";	// Add close box
		$("#"+div).append(str);												// Add to container div		
 		}
	
	var box=$("#shivaSizingBox");											// Point at box
	var con=$("#"+div);														// Point at container
	if (v[0] != undefined)	left=v[0] 										// Default left
	if (v[1] != undefined)	top=v[1];										// Default top
	if (v[2] != undefined)	wid=v[2];										// Default width
	box.css({left:left/100+"%",top:top/100+"%",width:wid/100+"%",height:wid/100+"%"});	// Set position
 	box.resizable( { aspectRatio:true, cursor:"se-resize", resize:SetBox } );	// Make resizable
 	box.draggable( { containment:"parent", cursor:"move", drag:SetBox  } );	// Make draggable
	
	function SetBox(event, ui) {											// MOVE/DRAG EVENT HANDLER
		var box=$(this);													// Point at box
		var left=Math.round(ui.position.left/box.parent().width()*10000);	// Get x
		var top=Math.round(ui.position.top/box.parent().height()*10000);	// Get y
		var wid=Math.round(box.width()/con.width()*10000);					// Get w
		$("#"+id).val(left+","+top+","+wid);								// Concat and set in structure
		SaveData("GetJSON");												// Set items
		}
}
	
SHIVA_Show.prototype.GetDataFromManager=function(type, index)
{
	if (type == "gdoc")
		window.parent.postMessage("dataSourceUrl","*");
	if (type == "kml")
		window.parent.postMessage("GetFile=KML="+index,"*");
}

/////// QUERY EDITOR

SHIVA_Show.prototype.QueryEditor=function(id)
{
	if ($("#propInput0").val())
		new SHIVA_QueryEditor($("#propInput0").val(),$("#"+id).val(),id,false);
	else
		this.Prompt("Data Filter","You need to define a data source first!","")
}

SHIVA_Show.prototype.ShiftItem=function(dir,items)
{
	var active=$("#accord").accordion("option","active");
	if (active === false) 
		return -1;
	var pos=Number(active)+Number(dir);
	if ((pos < 0) || (pos >= items.length))
		return active;
	else
		this.Sound("click");
	var o=items[pos];
	items[pos]=items[active];
	items[active]=o;
	this.Draw();
	return pos;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	QUERY EDITOR
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function SHIVA_QueryEditor(source, query, returnID, fieldNames, callback) 										
{
	this.advancedMode=false;
	this.autoShow=true;
	$("#dataDialogDiv").dialog("destroy");
	$("#dataDialogDiv").remove();
	shivaLib.qe=this;
	if (query.indexOf("  ") == 0) 
		this.advancedMode=true,query=query.substr(2);
	else if (!query) 
 		query="SELECT * WHERE A = ? ORDER BY none"
 	if (query.indexOf(" ORDER BY ") == -1)
 		query+=" ORDER BY none";
	this.source=source;
	this.query=query.replace(/  /g," ");
	this.curFields=["A","B","C"];
	var thisObj=this;
	
	var ops={ 
		width:'auto',height:'auto',modal:true,title:'Data filter',position:[330,40],
		buttons: {
			OK: function() {
				if (thisObj.advancedMode)
					thisObj.query="  "+$("#curQuery").val();
				if (!fieldNames) {
					var i,f;
					for (i=0;i<thisObj.curFields.length;++i) {
						f=thisObj.curFields[i].replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");						
						thisObj.query=thisObj.query.replace(RegExp(f,"g"),String.fromCharCode(i+65));
						}
					}
				if (!thisObj.query.match(/\?/)) {
					thisObj.query=thisObj.query.replace(/ORDER BY none/g,"");
					if (returnID == "curQueryDiv")
						$("#"+returnID).html(thisObj.query);
					else if (returnID)
						$("#"+returnID).val(thisObj.query);
					window.postMessage("ShivaDraw","*");
					}
				$(this).dialog("destroy");
				$("#dataDialogDiv").remove();
				$("#propInput0").trigger("onchange");
				if (callback) 
					callback(thisObj.query);
				},
			'Cancel': function() {
				$(this).dialog("destroy");
				$("#dataDialogDiv").remove();
				if (callback) {
					callback(query);
					return;
					}
				}
			}
		}
	$("body").append("<div id='dataDialogDiv'/>");
	$("#dataDialogDiv").dialog(ops);
	if (source) {
		var googleQuery=new google.visualization.Query(source);
	   	googleQuery.send(handleQueryResponse);
 		}
	this.DrawQuery();

	function handleQueryResponse(response) {
	    var i,j,key;
		var data=response.getDataTable();
		var rows=data.getNumberOfRows();
		var cols=data.getNumberOfColumns();
	 	thisObj.curFields=[];
	 	if ((thisObj.query.indexOf(" A ") != -1) && (thisObj.query.charAt(thisObj.query.length-1) != " "))
	 		thisObj.query+=" ";	
	 	for (j=0;j<cols;++j) {
			key=$.trim(data.getColumnLabel(j)).replace(/ /g,"_");
			if (!key)
				continue;
			thisObj.query=thisObj.query.replace(RegExp(" "+String.fromCharCode(j+65)+" ","g")," "+key+" ");
	  		thisObj.curFields.push(key);
			}
		thisObj.query=$.trim(thisObj.query);
		thisObj.DrawQuery();
	}
}

SHIVA_QueryEditor.prototype.DrawQuery=function() 
{
	var i,num;
	var select="all";
	var order="none";
	var thisObj=this;
	if (this.advancedMode) {
		str="<textArea id='curQuery' rows='4' cols='50' />";
		str+="<p><input type='checkbox' id='advedit' checked='checked' onclick='shivaLib.qe.AdvancedMode(false)'> Advanced edit mode";
		str+="<p><Button id='queryAdvEdit'>Test</button> ";
		str+="Click <a href='http://code.google.com/apis/chart/interactive/docs/querylanguage.html' target='_blank'>here</a> for information on formatting</p></p>";
		str+="<br/><div id='testShowDiv'/>"
		$("#dataDialogDiv").html(str);
		$("#curQuery").val(this.query.replace(/ORDER BY none/g,"").replace(/  /g," "));
		$("#queryAdvEdit").click( function() { thisObj.TestQuery(); });
		this.TestQuery();
		return;
		}
	i=this.query.indexOf(" WHERE ");
	if (i == -1)
		i=this.query.indexOf(" ORDER BY ");
	select=this.query.substring(7,i);
	if (select == "*")
		select="all";
	i=this.query.indexOf(" ORDER BY ");
	order=this.query.substring(i+10);
	i=this.query.indexOf(" WHERE ");
	var str="<div style='border 1px solid'><br/><table id='clauseTable' cellspacing='0' cellpadding='0'>";
	if (i != -1) {
		j=this.query.indexOf(" ORDER BY ");
		var v=this.query.substring(i+7,j).split(" ");
		i=0;
		str+=this.AddClause("IF",v[0],v[1],v[2],v.length<6,i++);
		for (j=3;j<v.length;j+=4)
			str+=this.AddClause(v[j],v[j+1],v[j+2],v[j+3],(j+5)>v.length,i++);
		}
	var q=this.query.replace(/WHERE /g,"<br/>WHERE ").replace(/ORDER BY /g,"<br/>ORDER BY ")
	str+="<tr height='12'></tr>";
	str+="</div><tr><td><b>SHOW&nbsp;&nbsp;</b></td><td align='middle'>&nbsp;";
	str+="<select multiple='multiple' size='3'id='sel' onchange='shivaLib.qe.SetQueryString()'>";
	str+="<option>all</option>";
	for (i=0;i<this.curFields.length;++i)	str+="<option>"+this.curFields[i]+"</option>";
	str+="</select></td><td>&nbsp;&nbsp;<b>ORDER BY</B> &nbsp;<select id='ord' onchange='shivaLib.qe.SetQueryString()'>";
	str+="<option>none</option>";
	for (i=0;i<this.curFields.length;++i)	str+="<option>"+this.curFields[i]+"</option>";
	str+="</select></td></tr>";
	str+="</table><p><input type='checkbox' id='advedit' onclick='shivaLib.qe.AdvancedMode(true)'/> Advanced edit mode";
	str+=" <input type='checkbox' id='qAutoShow'";
	if (this.autoShow) str+=" checked='checked'";
	str+=">Auto-show</p>";
	str+="<div id='curQuery' style='overflow:auto'><span style='color:#999'><b>"+q+"</b></span></div>";
	str+="<br/><div id='testShowDiv'/>"
	$("#dataDialogDiv").html(str);
	$("#sel").val(select.split(","));
	$("#ord").val(order);
	if (this.autoShow)
		this.TestQuery();

	$("#qAutoShow").click(function() {
		shivaLib.qe.autoShow=!shivaLib.qe.autoShow;
		shivaLib.qe.DrawQuery();
		});
		
}

SHIVA_QueryEditor.prototype.TestQuery=function() 
{
	var f,q=this.query;
	if (q.match(/\?/)) 
		q="";
	for (i=0;i<this.curFields.length;++i) {
		f=this.curFields[i].replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");						
		q=q.replace(RegExp(f,"g"),String.fromCharCode(i+65));
		}
	q=q.replace(/ORDER BY none/g,"");
	if (this.advancedMode)
		q=$("#curQuery").val();
	var tbl={"chartType": "Table","dataSourceUrl":this.source,"query":q,"shivaGroup":"Data"};
	$("#testShowDiv").empty();
	$("#testShowDiv").css("width",$("#dataDialogDiv").css("width"));
	$("#testShowDiv").css("height","200px");
	$("#testShowDiv").css("overflow","auto");
	new SHIVA_Show("testShowDiv",tbl);
}

SHIVA_QueryEditor.prototype.AdvancedMode=function(mode)
{
	this.advancedMode=mode;
	if (!mode)	
		this.query="SELECT * WHERE A = * ORDER BY none";
	this.DrawQuery();
	if (mode)	
		$("#curQuery").val(this.query.replace(/ORDER BY none/g,"").replace(/  /g," "));
}

SHIVA_QueryEditor.prototype.AddClause=function(clause, subj, pred, obj, last, row)	
{
	var str="<tr valign='top'><td>";
	if (clause != "IF") 
		str+=shivaLib.MakeSelect("clause"+row,0,["AND","OR","NOT"],clause,"onchange='shivaLib.qe.SetQueryString()'");
	else
		str+="<b>IF</b>";
	str+="</td><td>&nbsp;"+shivaLib.MakeSelect("subject"+row,0,this.curFields,subj,"onchange='shivaLib.qe.SetQueryString()'");
	str+="</td><td>&nbsp;&nbsp;<b>IS&nbsp; </b>"+shivaLib.MakeSelect("predicate"+row,0,["<",">","=","!=","<=",">=","has"],pred,"onchange='shivaLib.qe.SetQueryString()'");
	str+=" <input type='input' size='8' id='object"+row+"' value='"+obj+"' onchange='shivaLib.qe.SetQueryString()'/>";
	if (clause == "IF") 
		str+="&nbsp;<img src='adddot.gif' onclick='shivaLib.qe.AddNewClause("+row+")'style='vertical-align:middle'>";
	else	
		str+="&nbsp;<img src='trashdot.gif' onclick='shivaLib.qe.DeleteClause("+row+")' style='vertical-align:middle'>";
	str+="</td></tr>";
	$("#pred").val(pred);
	return str;
}

SHIVA_QueryEditor.prototype.AddNewClause=function(num)
{
	var i=this.query.indexOf(" ORDER BY ");
	this.query=this.query.substr(0,i)+" AND * = ?"+this.query.substr(i);
	this.DrawQuery();
	shivaLib.Sound("ding");
}

SHIVA_QueryEditor.prototype.DeleteClause=function(num)
{
	var v=this.query.split(" ");
	var n,i,str="";
	for (n=0;n<v.length;++n)
		if (v[n] == "WHERE")
			break;
	n=n+(num*4)
	for (i=0;i<n;++i)
		str+=v[i]+" ";
	for (i=n+4;i<v.length;++i)
		str+=v[i]+" ";
	this.query=str;
	this.DrawQuery();
	shivaLib.Sound("delete");
}

SHIVA_QueryEditor.prototype.SetQueryString=function()
{
	var i,j,num=0;
	i=this.query.indexOf(" WHERE ");
	if (i != -1) {
		j=this.query.indexOf(" ORDER BY ");
		var v=this.query.substring(i+7,j).split(" ");
		num=(v.length+1)/4;
		}
	str="SELECT "
	var sel=$("#sel").val();
	if (sel == "all")
		sel="*";
	str+=sel+" ";
	if (num)
		str+="WHERE ";
	for (i=0;i<num;++i) {
		if (i)
			str+=$("#clause"+i).val()+" ";
		str+=$("#subject"+i).val()+" ";
		str+=$("#predicate"+i).val()+" ";
		str+=$("#object"+i).val();
		str+=" ";
		}		
	str+="ORDER BY "+ $("#ord").val();
	this.query=str;
	this.DrawQuery();
}
///////////////////////////////////////////////////////////////////////////////////////////////
//  SHIVALIB DRAW
///////////////////////////////////////////////////////////////////////////////////////////////

var drObj=null;

function SHIVA_Draw(container, hidePalette) 							// CONSTRUCTOR
{
	this.container=container;
	this.color="-1";
	this.clipboard=new Array();
	this.edgeColor="#0000ff";
	this.textColor="#000000";
	this.boxColor="-1";
	this.edgeWidth="30";
	this.arrow=false;
	this.alpha=100;
	this.curTool=0;
	this.imageURL="";
	this.imageWid=400;
	this.textAlign="Left";
	this.textStyle="";
	this.textSize=0;
	this.ideaShape="Round box";
	this.ideaGradient=true;
	this.ideaBold=false;
	this.ideaBackCol="#FFF2CC";
	this.ideaEdgeCol="#999999";
	this.ideaTextCol="#000000";
	this.selectedItems=new Array();
	this.selectedDot=-1;													
	this.segs=new Array();
	if (shivaLib.overlay)													// If an overlay already
		this.segs=shivaLib.overlay;											// Use it
	this.closeOnMouseUp=false;												// Flag to close seg after drag-drawing
	this.curSeg=-1;															// Currently active segment
	this.lastDotTime=0;														// Last time a dot was added
	this.snap=false;														// Grid snap off
	this.curve=false;														// Straight lines
	this.snapSpan=20;														// Grid spacing
	this.leftClick=false;													// Hold left button status
	this.lastX=0;		this.lastY=0;										// Last cursor mouse down
	drObj=shivaLib.dr=this;													// Set SHIVA_Show pointer
	if (!hidePalette)														// If not hiding palette
		this.DrawPalette();													// Draw palatte
	this.colorPicker="";													// Not in color picker
	if ($("#shivaDrawCanvas")[0])											// If canvas there
		this.ctx=$("#shivaDrawCanvas")[0].getContext('2d');					// Get context
	$("#shivaDrawDiv").css("cursor","crosshair");							// Crosshair cursor
	$("#shivaDrawDiv").mouseup(this.onMouseUp);								// Mouseup listener
	$("#shivaDrawDiv").mousedown(this.onMouseDown);							// Mousedown listener
	$("#shivaDrawDiv").mousemove(this.onMouseMove);							// Mousemovelistener
	document.onkeyup=this.onKeyUp;											// Keyup listener
	document.onkeydown=this.onKeyDown;										// Keydown listener
}

SHIVA_Draw.prototype.Sound=function(snd) 						
{
	shivaLib.Sound(snd);
}

SHIVA_Draw.prototype.DrawPalette=function(tool) 						//	DRAW 
{
	this.ctx=$("#shivaDrawCanvas")[0].getContext('2d');						// Get context
	var hgt=$("#"+this.container).css("height").replace(/px/g,"");			// Get height
	var top=$("#"+this.container).css("top").replace(/px/g,"");				// Get top
	if (top == "auto")	top=0;												// Use 0
	var left=$("#"+this.container).css("left").replace(/px/g,"")-0+12;		// Get left
	if ($("#shivaDrawPaletteDiv").length == 0) {							// If no palette
		var h=225;															// Default height
		str="<div id='shivaDrawPaletteDiv' style='position:absolute;left:"+left+"px;top:"+(top-12+Number(hgt)-100)+"px;width:180px;height:"+h+"px'>";
		$("body").append("</div>"+str);										// Add palette to body
		$("#shivaDrawPaletteDiv").css({ "background-color":"#eee","border-radius":"8px","z-index":2001 });
		$("#shivaDrawPaletteDiv").addClass("propTable");					// Style same as property menu
		$("#shivaDrawPaletteDiv").draggable();								// Make it draggable
		$("#shivaDrawPaletteDiv").css({ "-moz-user-select":"none","-khtml-user-select":"none","-webkit-user-select":"none","-ms-user-select":"none","user-select":"none"});
		$("#shivaDrawPaletteDiv")[0].addEventListener('contextmenu', function(ev) {
		    ev.preventDefault();
			window.prompt("To copy graphics to clipboard: Hit Ctrl+C, then press OK",drObj.SaveSVGData());
		    return false;
			}, false);
		}
	this.SetTool(0);														// Draw lines
	this.DrawMenu();														// Draw menu
}

SHIVA_Draw.prototype.Clear=function() 									//	CLEAR DRAWING
{
	shivaLib.overlay=[];													// Clear data from memory
	this.segs=[];															// Clear list
	$("#shivaDrawDiv").html("");											// Clear draw div
}

SHIVA_Draw.prototype.ColorPicker=function(name) 						//	DRAW COLORPICKER
{
	var str="<p style='text-shadow:1px 1px white' align='center'><b>Choose a new color</b></p>";
	str+="<img src='colorpicker.gif' style='position:absolute;left:15px;top:28px' />";
	str+="<input id='shivaDrawColorInput' type='text' style='position:absolute;left:22px;top:29px;width:96px;background:transparent;border:none;'>";
	$("#shivaDrawPaletteDiv").html(str);									// Fill div
	$("#shivaDrawPaletteDiv").on("click",onColorPicker);					// Mouseup listener
	this.colorPicker=name;													// Set var name
	var _this=this;															// Point to main obj
	
	function onColorPicker(e) {
		
		var col;
		var cols=["000000","444444","666666","999999","CCCCCC","EEEEEE","E7E7E7","FFFFFF",
				  "FF0000","FF9900","FFFF00","00FF00","00FFFF","0000FF","9900FF","FF00FF",	
				  "F4CCCC","FCE5CD","FFF2CC","D9EAD3","D0E0E3","CFE2F3","D9D2E9","EDD1DC",
				  "EA9999","F9CB9C","FFE599","BED7A8","A2C4C9","9FC5E8","B4A7D6","D5A6BD",
				  "E06666","F6B26B","FFD966","9C347D","76A5AF","6FA8DC","8E7CC3","C27BA0",
				  "CC0000","E69138","F1C232","6AA84F","45818E","3D85C6","674EA7","A64D79",
				  "990000","B45F06","BF9000","38761D","134F5C","0B5394","351C75","741B47",
				  "660000","783F04","7F6000","274E13","0C343D","073763","20124D","4C1130"
				 ];
		var x=e.pageX-this.offsetLeft;										// Offset X from page
		var y=e.pageY-this.offsetTop;										// Y
		if ((x < 112) && (y < 55))											// In text area
			return;															// Quit
		$("#shivaDrawPaletteDiv").off("click",this.onColorPicker);			// Remove mouseup listener
		if ((x > 112) && (x < 143) && (y < 48))	{							// In OK area
			if ($("#shivaDrawColorInput").val())							// If something there
				col="#"+$("#shivaDrawColorInput").val();					// Get value
			else															// Blank
				x=135;														// Force a quit
			}
		if ((x > 143) && (y < 48)) {										// In quit area
			_this.DrawMenu();												// Put up menu	
			return;															// Return
			}
		if (y > 193) 														// In trans area
			col=-1;															// Set -1
		else if (y > 48) {													// In color grid
			x=Math.floor((x-24)/17);										// Column
			y=Math.floor((y-51)/17);										// Row
			col="#"+cols[x+(y*8)];											// Get color
			}
		_this[_this.colorPicker]=col;										// Set color
		if (_this.curTool == 5) {											// If editing 
			if (_this.selectedItems.length)									// If something selected
				_this.DrawMenu(_this.segs[_this.selectedItems[0]].type);	// Draw menu with this as a type
			else															// Nothing
				_this.DrawMenu(0);											// Draw menu as pencil
			_this.SetVal(_this.colorPicker,col);							// Draw segments
			}
		else if (_this.curTool == 6) {										// If idea map 
			_this.SetVal(_this.colorPicker,col);							// Draw segments
			_this.DrawMenu();												// Draw idea menu 
			}
		else																// In drawing
			_this.DrawMenu();												// Put up menu	
	}
}

SHIVA_Draw.prototype.DrawMenu=function(tool) 							//	DRAW 
{
	var preface="Edit ";
	if (tool == undefined)
		tool=this.curTool,preface="Draw ";
	var titles=["a line","a circle","a box","text","an image",""," an Idea Map"];
	var str="<p style='text-shadow:1px 1px white' align='center'><b>";	str+=preface+titles[tool]+"</b></p>";
	str+="<img src='closedot.gif' style='position:absolute;left:163px;top:1px' onclick='drObj.SetTool(-1)'/>";
	str+="<table style='font-size:xx-small'>"
	if (tool < 3) {				// LINE, BOX, CIR
		str+="<tr><td>&nbsp;&nbsp;Snap to grid?</td><td><input onClick='drObj.SetVal(\"snap\",this.checked)' type='checkbox' id='snap'></td></tr>";
		if (tool == 2)
			str+="<tr><td>&nbsp;&nbsp;Round box?</td><td><input onClick='drObj.SetVal(\"curve\",this.checked)' type='checkbox' id='curve'></td></tr>";
		else if (tool == 0) {
			str+="<tr><td>&nbsp;&nbsp;Draw curves?</td><td><input onClick='drObj.SetVal(\"curve\",this.checked)' type='checkbox' id='curve'></td></tr>";
			str+="<tr><td>&nbsp;&nbsp;Draw arrow?</td><td><input onClick='drObj.SetVal(\"arrow\",this.checked)' type='checkbox' id='arrow'></td></tr>";
			}		
		str+="<tr height='20'><td>&nbsp;&nbsp;Visibility</td><td><div style='width:78px;margin-left:4px' id='alpha'/></td></tr>";
		str+="<tr><td>&nbsp;&nbsp;Line color</td><td>&nbsp;<input style='width:85px;height:12px' onFocus='drObj.ColorPicker(\"edgeColor\")' onChange='drObj.SetVal(\"edgeColor\",this.value)' type='text' id='edgeColor'></td></tr>";
		str+="<tr><td>&nbsp;&nbsp;Fill color</td><td>&nbsp;<input style='width:85px;height:12px' onFocus='drObj.ColorPicker(\"color\")' onChange='drObj.SetVal(\"color\",this.value)' type='text' id='color'></td></tr>";
		str+="<tr height='20'><td>&nbsp;&nbsp;Line width</td><td><div style='width:78px;margin-left:6px' id='edgeWidth'/></td></tr>";
		}
	else if (tool == 3) {		// TEXT
		str+="<tr><td>&nbsp;&nbsp;Back color</td><td>&nbsp;<input style='width:85px;height:12px' onFocus='drObj.ColorPicker(\"boxColor\")' onChange='drObj.SetVal(\"boxColor\",this.value)' type='text' id='boxColor'></td></tr>";
		str+="<tr><td>&nbsp;&nbsp;Round box?</td><td><input onClick='drObj.SetVal(\"curve\",this.checked)' type='checkbox' id='curve'></td></tr>";
		str+="<tr height='20'><td>&nbsp;&nbsp;Visibility</td><td><div style='width:78px;margin-left:4px' id='alpha'/></td></tr>";
		str+="<tr><td>&nbsp;&nbsp;Align</td><td>&nbsp;<select style='width:85px;height:18px;font-size:x-small' onChange='drObj.SetVal(\"textAlign\",this.value)' id='textAlign'><option>Left</option><option>Right</option><option>Center</option></select></td></tr>";
		str+="<tr height='20'><td>&nbsp;&nbsp;Text size</td><td><div style='width:82px;margin-left:6px' id='textSize'/></td></tr>";
		str+="<tr><td>&nbsp;&nbsp;Text color</td><td>&nbsp;<input style='width:85px;height:12px' onFocus='drObj.ColorPicker(\"textColor\")' onChange='drObj.SetVal(\"textColor\",this.value)' type='text' id='textColor'></td></tr>";
		}
	else if (tool == 4) {		// IMAGE
		str+="<tr><td>&nbsp;&nbsp;Snap to grid?</td><td><input onClick='drObj.SetVal(\"snap\",this.checked)' type='checkbox' id='snap'></td></tr>";
		str+="<tr><td>&nbsp;&nbsp;Edge color</td><td>&nbsp;<input style='width:85px;height:12px' onFocus='drObj.ColorPicker(\"edgeColor\")' onChange='drObj.SetVal(\"edgeColor\",this.value)' type='text' id='edgeColor'></td></tr>";
		str+="<tr height='20'><td>&nbsp;&nbsp;Line width</td><td><div style='width:78px;margin-left:6px' id='edgeWidth'/></td></tr>";
		str+="<tr height='20'><td>&nbsp;&nbsp;Visibility</td><td><div style='width:78px;margin-left:4px' id='alpha'/></td></tr>";
		str+="<tr><td>&nbsp;&nbsp;Image URL</td><td>&nbsp;<input style='width:85px;height:12px' onChange='drObj.SetVal(\"imageURL\",this.value)' type='text' id='imageURL'></td></tr>";
		}
	else if (tool == 6) {		// IDEA
		str+="<tr><td>&nbsp;&nbsp;Shape</td><td>&nbsp;<select style='width:85px;height:18px;font-size:x-small' onChange='drObj.SetVal(\"ideaShape\",this.value)' id='ideaShape'><option>Round box</option><option>Rectangle</option><option>Oval</option><option>Circle</option></select></td></tr>";
		str+="<tr><td>&nbsp;&nbsp;Back color</td><td>&nbsp;<input style='width:85px;height:12px' onFocus='drObj.ColorPicker(\"ideaBackCol\")' type='text' id='ideaBackCol'></td></tr>";
		str+="<tr><td>&nbsp;&nbsp;Gradient?</td><td>&nbsp;<input onClick='drObj.SetVal(\"ideaGradient\",this.checked)' type='checkbox' id='ideaGradient'></td></tr>";
		str+="<tr><td>&nbsp;&nbsp;Line color</td><td>&nbsp;<input style='width:85px;height:12px' onFocus='drObj.ColorPicker(\"ideaEdgeCol\")' onChange='drObj.SetVal(\"ideaEdgeCol\",this.value)' type='text' id='ideaEdgeCol'></td></tr>";
		str+="<tr><td>&nbsp;&nbsp;Text color</td><td>&nbsp;<input style='width:85px;height:12px' onFocus='drObj.ColorPicker(\"ideaTextCol\")' onChange='drObj.SetVal(\"ideaTextCol\",this.value)' type='text' id='ideaTextCol'></td></tr>";
		str+="<tr><td>&nbsp;&nbsp;Bold text?</td><td>&nbsp;<input onClick='drObj.SetVal(\"ideaBold\",this.checked)' type='checkbox' id='ideaBold'></td></tr>";
		str+="<tr><td colspan='2' style='text-align:center'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<button style='font-size:x-small' onclick='drObj.AddIdea(-1)'>Add base idea</button></td></tr>";
		}
	str+="</table><br/>";	
	str+="<div style='position:absolute;left:14px;top:194px'><span id='drawToolbar' style='font-size:xx-small'>";
	str+="<input type='radio' id='sdtb6' name='draw' onclick='drObj.SetTool(5)'/><label for='sdtb6'>Select</label>";
	str+="<input type='radio' id='sdtb3' name='draw' onclick='drObj.SetTool(2)'/><label for='sdtb3'>Box</label>";
	str+="<input type='radio' id='sdtb2' name='draw' onclick='drObj.SetTool(1)'/><label for='sdtb2'>Circle</label>";
	str+="<input type='radio' id='sdtb1' name='draw' onclick='drObj.SetTool(0)'/><label for='sdtb1'>Line</label>";
	str+="<input type='radio' id='sdtb4' name='draw' onclick='drObj.SetTool(3)'/><label for='sdtb4'>A</label>";
	str+="<input type='radio' id='sdtb5' name='draw' onclick='drObj.SetTool(4)'/><label for='sdtb5'>Image</label>";
	str+="<input type='radio' id='sdtb7' name='draw' onclick='drObj.SetTool(6)'/><label for='sdtb7'>Idea</label>";
	str+="</span></div>";	
	$("#shivaDrawPaletteDiv").html(str);	
	$("#shivaDrawPaletteDiv").css("font-size","xx-small");	
	$("#sdtb"+(this.curTool+1)).attr("checked","checked");					// Check current tool button
	$("#drawToolbar").buttonset();
	$("#sdtb1").button({text: false, icons: { primary: "ui-icon-pencil"}});
	$("#sdtb2").button({text: false, icons: { primary: "ui-icon-radio-on"}});
	$("#sdtb3").button({text: false, icons: { primary: "ui-icon-circlesmall-plus"}});
	$("#sdtb4").button({text: true });
	$("#sdtb5").button({text: false, icons: { primary: "ui-icon-image"}});
	$("#sdtb6").button({text: false, icons: { primary: "ui-icon-arrowthick-1-nw"}}).css("width","100");
	$("#sdtb7").button({text: false, icons: { primary: "ui-icon-lightbulb"}}).css("width","100");

	$("#alpha").slider({slide:function(event, ui) {drObj.SetVal("alpha",ui.value);}});	
	$("#edgeWidth").slider({slide:function(event, ui) {drObj.SetVal("edgeWidth",ui.value);}});	
	$("#textSize").slider({slide:function(event, ui) {drObj.SetVal("textSize",ui.value);}});	
	$("#alpha .ui-slider-handle").css("border","1px solid #888");
	$("#edgeWidth .ui-slider-handle").css("border","1px solid #888");
	$("#textSize .ui-slider-handle").css("border","1px solid #888");
	this.SetMenuProperties();												// Set menu properties
}

SHIVA_Draw.prototype.SetMenuProperties=function() 						//	SET MENU PROPERTIES
{
	var col,tcol,txt;
	tcol=txt=col=this.color;												// Interior color
	gradient=true;
	if (col == -1)	col="#fff",tcol="000",txt='none';						// If none, white chip/black text
	$("#color").css("background-color",col); 								// Color chip
	$("#color").css("color",tcol); 											// Color text to hide it
	$("#color").val(txt); 													// Set text
	tcol=txt=col=this.edgeColor;											// Edge color
	if (col == -1)	col="#fff",tcol="000",txt='none';						// If none, white chip/black text
	$("#edgeColor").css("background-color",col); 							// Color chip
	$("#edgeColor").css("color",tcol); 										// Color text to hide it
	$("#edgeColor").val(txt); 												// Set text
	tcol=txt=col=this.textColor;											// Text color
	if (col == -1)	col="#fff",tcol="000",txt='none';						// If none, white chip/black text
	$("#textColor").css("background-color",col); 							// Color chip
	$("#textColor").css("color",tcol); 										// Color text to hide it
	$("#textColor").val(txt); 												// Set text
	tcol=txt=col=this.boxColor;												// Box color
	if (col == -1)	col="#fff",tcol="000",txt='none';						// If none, white chip/black text
	$("#boxColor").css("background-color",col); 							// Color chip
	$("#boxColor").css("color",tcol); 										// Color text to hide it
	$("#boxColor").val(txt); 												// Set text
	$("#snap").attr("checked",this.snap);									// Check it
	$("#curve").attr("checked",this.curve);									// Check it
	$("#arrow").attr("checked",this.arrow);									// Check it
	$("#edgeWidth").slider("value",this.edgeWidth); 						// Set edge width
	$("#alpha").slider("value",this.alpha); 								// Set alpha
	$("#textSize").slider("value",this.textSize); 							// Set text size
	$("#textAlign").val(this.textAlign); 									// Set text align
	$("#imageURL").val(this.imageURL); 										// Set image url
	$("#edgeWidth").val(this.edgeWidth); 									// Set edge width
	$("#ideaShape").val(this.ideaShape); 									// Set idea shape
	$("#ideaBackCol").val(this.ideaBackCol); 								// Set idea back col
	$("#ideaGradient").attr("checked",this.ideaGradient);					// Check it
	$("#ideaBold").attr("checked",this.ideaBold);							// Check it
	tcol=txt=col=this.ideaBackCol;											// Back color
	if (col == -1)	col="#fff",tcol="000",txt='none';						// If none, white chip/black text
	$("#ideaBackCol").val(txt); 											// Set idea edge col
	$("#ideaBackCol").css("background-color",col); 							// Color chip
	$("#ideaBackCol").css("color",tcol); 									// Color text to hide it
	tcol=txt=col=this.ideaEdgeCol;											// Edge color
	if (col == -1)	col="#fff",tcol="000",txt='none';						// If none, white chip/black text
	$("#ideaEdgeCol").val(txt); 											// Set idea edge col
	$("#ideaEdgeCol").css("background-color",col); 							// Color chip
	$("#ideaEdgeCol").css("color",tcol); 									// Color text to hide it
	tcol=txt=col=this.ideaTextCol;											// Text color
	if (col == -1)	col="#fff",tcol="000",txt='none';						// If none, white chip/black text
	$("#ideaTextCol").val(txt); 											// Set idea edge col
	$("#ideaTextCol").css("background-color",col); 							// Color chip
	$("#ideaTextCol").css("color",tcol); 									// Color text to hide it
}	

SHIVA_Draw.prototype.DrawOverlay=function(num) 							// DRAW OVERLAY
{
	shivaLib.overlay=this.segs;												// Set overlay with display list
	shivaLib.Draw({shivaGroup:"Draw"});										// Draw it
}

SHIVA_Draw.prototype.SetShivaText=function(text, num)					// TEXT CHANGE HANDLER
{
	this.segs[num].text=text;												// Set new val
}

SHIVA_Draw.prototype.SaveDrawData=function(json) 						// SAVE DRAWING AS ITEM LIST
{
	var i,o,key,str="",str1;
	for (i=0;i<this.segs.length;++i) {										// For each seg
		o=this.segs[i];														// Point at it
		if (json)															// If saving as JSON
			str+="\t\"draw-"+(i+1)+"\":\"";									// Header
		else																// As a query string
			str+="&draw-"+(i+1)+"=";										// Header
		for (key in o) {													// For each object
			str1=String(o[key]);											// Get val as string
			if (str1) 														// If a value
				str+=key+":"+str1.replace(/\n/g,"|").replace(/\r/g,"").replace(/\:/g,"`").replace(/#/g,"~")+";";	// Replace special chars and add
			}
		str=str.substring(0,str.length-1);									// Lop of space
		if (json)															// If saving as JSON
			str+="\",\n";													// Add ",LF
		}
	return str;																// Return added elements
}

SHIVA_Draw.prototype.SaveSVGData=function() 							// SAVE DRAWING AS SVG
{
	var i,j,o,x,y,e;
	var w=$("#shivaDrawDiv").width();										// Container wid
	var h=$("#shivaDrawDiv").height();										// Container hht
	var str="<svg width='100%' height='100%' viewBox='0 0 "+w+" "+h+"'>\n";	// Header
	for (i=0;i<drObj.segs.length;++i) {										// For each seg
		o=drObj.segs[i];													// Point at it
		e=Math.max((o.edgeWidth/10),.5);									// Edge is .5-10							 															
		if (o.type == 0) {													// Line
			if (o.arrow) {													// If an arrow tip												
				var aa=Math.atan2(o.y[n]-o.y[n-1],o.x[n]-o.x[n-1]);			// Angle of line
				var xx=[],yy=[];											// Arrow arrays
				var n=o.x.length-1;											// Last point
				var aa=Math.atan2(o.y[n]-o.y[n-1],o.x[n]-o.x[n-1]);			// Angle of line
				var hh=o.edgeWidth/2;										// Set size
				xx[0]=o.x[n]-hh*Math.cos(aa-Math.PI/6),
				yy[0]=o.y[n]-hh*Math.sin(aa-Math.PI/6);			
	 			xx[1]=o.x[n];	yy[1]=o.y[n];								// Tip point
				xx[2]=o.x[n]-hh*Math.cos(aa+Math.PI/6),
				yy[2]=o.y[n]-hh*Math.sin(aa+Math.PI/6);			
				o.x[n]=((xx[2]-xx[0])/2)+xx[0];								// Mid x
				o.y[n]=((yy[2]-yy[0])/2)+yy[0];								// Mid y
				}
			str+="<path style='fill:";										// Start
			if (o.color != -1)	str+=o.color+";";							// Fill color
			else				str+="none;"								// No fill
			if (o.edgeColor != -1)	 {										// If an edge
				str+="stroke:"+o.edgeColor;									// Edge color
				str+=";stroke-width:"+e+";";								// Edge width
				}
			str+="opacity:"+(o.alpha/100)+"' d='M";							// Alpha								
			str+=o.x[0]+",";												// Pos x
			str+=o.y[0]+" ";												// Pos y
			
			if (o.curve) {
				var open=true;
				if ((Math.abs(o.x[0]-o.x[o.x.length-1]) < 3) && (Math.abs(o.y[0]-o.y[o.y.length-1]) < 3)) {
					o.x[x.length-1]=o.x[0];
					o.y[y.length-1]=o.y[0];
					open=false;
					}
				x=o.x[0]-0+((o.x[1]-o.x[0])/2)-0;
				y=o.y[0]-0+((o.y[1]-o.y[0])/2)-0;
				if (open) {
					str+="L"+x+",";											// Pos x
					str+=y+" ";												// Pos y
			 		}			
				for (j=1;j<o.x.length-1;++j) {								// For each coord
					x=o.x[j]-0+((o.x[j+1]-o.x[j])/2)-0;						// Mid x										
					y=o.y[j]-0+((o.y[j+1]-o.y[j])/2)-0;						// Mid y										
					str+="Q";												// Line to
					str+=o.x[j]+",";										// Pos x
					str+=o.y[j]+" ";										// Pos y
					str+=x+",";												// Control x
					str+=y+" ";												// Control y
					}
				if (open) {
					str+="L"+o.x[j]+",";									// Pos x
					str+=o.y[j]+" ";										// Pos y
			 		}			
				}
			else{
				for (j=1;j<o.x.length;++j) {								// For each coord
					str+="L";												// Line to
					str+=o.x[j]+",";										// Pos x
					str+=o.y[j]+" ";										// Pos y
					}
				}
			if (o.color != -1)	str+="Z"									// If a filled polygon, close it
				str+="'/>\n";												// End rect
			if ((o.x) && (o.arrow)) {										// If line arrow
				o.x[n]=xx[1];	o.y[n]=yy[1];								// Restore last point
				str+="<path style='fill:"+o.edgeColor;						// Start
				str+=";opacity:"+(o.alpha/100)+"' d='M";					// Alpha								
				str+=xx[0];													// Start x				
				str+=","+yy[0]; 											// Start y
	 			str+=" L"+xx[1]+",";										// Tip x
	 			str+=yy[1];													// Tip y
				str+=" L"+xx[2]; 											// End x
				str+=","+yy[2];												// End y	
	 			str+=" Z'/>\n";												// End arrow
				}
			}
		else if (o.type == 1) {												// Box
			x=Math.abs(o.x[1]-o.x[0]);										// Calc wid
			str+="<circle r='"+x+"' ";										// Size
			x=o.x[0];														// Pos x
			y=o.y[0];														// Pos y
			str+="cx='"+x+"' cy='"+y+"' style='fill:";						// Pos
			if (o.color != -1)	str+=o.color+";";							// Fill color
			else				str+="none;"								// No fill
			if (o.edgeColor != -1)	 {										// If an edge
				str+="stroke:"+o.edgeColor;									// Edge color
				str+=";stroke-width:"+e+";";								// Edge width
				}
			str+="opacity:"+(o.alpha/100)+"'";								// Alpha								
			str+="/>\n";													// End rect
			}
		else if (o.type == 2) {												// Box
			x=Math.abs(o.x[1]-o.x[0]);										// Calc wid
			y=Math.abs(o.y[1]-o.y[0]);										// Hgt
			str+="<rect width='"+x+"' height='"+y+"' ";						// Size
			x=o.x[0];														// Pos x
			y=o.y[0];														// Pos y
			str+="x='"+x+"' y='"+y+"' style='fill:";						// Pos
			if (o.color != -1)	str+=o.color+";";							// Fill color
			else				str+="none;"								// No fill
			if (o.edgeColor != -1)	 {										// If an edge
				str+="stroke:"+o.edgeColor;									// Edge color
				str+=";stroke-width:"+e+";";								// Edge width
				}
			str+="opacity:"+(o.alpha/100)+"'";								// Alpha								
			if (o.curve)	str+=" rx='10' ry='10'";						// Round box
			str+="/>\n";													// End rect
			}
		else if (o.type == 3) {												// Text
			var th=(o.textSize/2)-0+10;										// Text size							 															
			if (o.boxColor != -1) {											// If a box
				x=Math.abs(o.x[1]-o.x[0]);									// Calc wid
				y=Math.abs(o.y[1]-o.y[0]);									// Hgt
				str+="<rect width='"+x+"' height='"+y+"' ";					// Size
				x=o.x[0];													// Pos x
				y=o.y[0];													// Pos y
				str+="x='"+x+"' y='"+y+"' style='fill:"+o.boxColor;			// Pos
				str+=";opacity:"+(o.alpha/100)+"'";							// Alpha								
				if (o.curve)	str+=" rx='10' ry='10'";					// Round box
				str+="/>\n";												// End rect
				}
			x=o.x[0]+10;													// Assume left
			e="start";
			if (o.textAlign == "Right")		x=o.x[1]-10,e="end";			// Right
			if (o.textAlign == "Center")	x=o.x[0]-0+Math.abs(o.x[1]-o.x[0])/2,e="middle";	// Center
			x=x;															// Pos x
			y=((o.y[0])+th+1);												// Pos y
			str+="<text x='"+x+"' y='"+y+"' ";								// Text pos
			str+="style='opacity:"+(o.alpha/100);							// Alpha
			str+=";text-anchor:"+e+";fill:"+o.textColor;					// Anchor / color
			str+=";font-family:sans-serif;font-size:"+th+"'>";				// Style							
			str+=o.text;													// String
			str+="</text>\n";												// End text
			}
		else if (o.type == 4) {												// Image
			x=Math.abs(o.x[1]-o.x[0]);										// Calc wid
			y=Math.abs(o.y[1]-o.y[0]);										// Hgt
			str+="<image width='"+x+"' height='"+y+"' ";					// Size
			x=o.x[0];														// Pos x
			y=o.y[0];														// Pos y
			str+="x='"+x+"' y='"+y+"' style='";								// Pos
			str+="opacity:"+(o.alpha/100)+"'";								// Alpha								
			str+=" xlink:href='"+o.imageURL+"'";							// Round box
			str+="/>\n";													// End image
			if (o.edgeColor != -1) {										// If a box
				x=Math.abs(o.x[1]-o.x[0]);									// Calc wid
				y=Math.abs(o.y[1]-o.y[0]);									// Hgt
				str+="<rect width='"+x+"' height='"+y+"' ";					// Size
				x=o.x[0];													// Pos x
				y=o.y[0];													// Pos y
				str+="x='"+x+"' y='"+y+"' style='";							// Pos
				str+="fill:none;stroke:"+o.edgeColor;						// Edge color
				str+=";stroke-width:"+e+";";								// Edge width
				str+=";opacity:"+(o.alpha/100)+"'";							// Alpha								
				str+="/>\n";												// End rect
				}
			}
		}
	str+="</g></svg>";														// Close svg
	return str;
}

SHIVA_Draw.prototype.DrawWireframes=function(clear) 					// DRAW OVERLAY
{
	var o,i,col,scol;
	if (clear)																// If clearing canvas
		this.ctx.clearRect(0,0,1000,1000);									// Erase
	for (i=0;i<this.segs.length;++i)	{									// For each seg
		col="#777";															// Black border
		for (j=0;j<this.selectedItems.length;++j)							// For each selected element
			if (this.selectedItems[j] == i) {								// A match
				col="#ff0000";												// Red border
				break;														// Quit
				}
		o=this.segs[i];														// Point at seg
		if ((o.type == 5) || (!o.x))										// If an idea map node or no x's
			continue;														// Skip it
		if (o.type == 3) 													// Text
			shivaLib.g.DrawBar(this.ctx,-1,1,o.x[0],o.y[0],o.x[1],o.y[1],col,1);// Draw bar
		for (j=0;j<o.x.length;++j)	{										// For each point
			scol="#fff";													// Hollow marker
			if ((this.selectedDot == j) && (col == "#ff0000"))				// If this is the selected dot
				scol=col;													// Make it solid		
			shivaLib.g.DrawCircle(this.ctx,scol,1,o.x[j],o.y[j],4,col,1);	// Draw marker
			}
		}
}

SHIVA_Draw.prototype.AddDot=function(x,y,up) 							// ADD DOT
{
	var o;
	if (this.curSeg == -1) {												// If not adding to an existing seg
		if (this.curTool && up)												// 2 point elements on mouseUp
			return;															// Start new segment only on up
		if (new Date().getTime()-this.lastDotTime < 100)					// If  too close to last click
			return;															// Quit
		o=new Object;														// Make a new one
		o.type=this.curTool;												// Set type
		o.x=new Array();													// Hold x coords
		o.y=new Array();													// y
		o.alpha=this.alpha;													// Alpha
		o.curve=this.curve;													// Curved path?
		if (o.type < 3) {													// Line/Box/Cir
			o.color=this.color;												// Set color from property menu
			o.edgeColor=this.edgeColor;										// Edge color
			o.edgeWidth=this.edgeWidth;										// Width
			o.arrow=this.arrow;												// Arrow?
			}
		if (o.type == 3) {													// Text
			o.boxColor=this.boxColor;										// Box color
			o.textColor=this.textColor;										// Text color
			o.textAlign=this.textAlign;										// Text align
			o.textSize=this.textSize;										// Text size
			o.text="Click to edit";											// Text
			}
		if (o.type == 4) {													// Image
			o.edgeColor=this.edgeColor;										// Edge color
			o.edgeWidth=this.edgeWidth;										// Edge width
			o.imageURL=this.imageURL;										// URL
			}
		o.x.push(x);	o.y.push(y);										// Add XY
		this.lastX=x;	this.lastY=y;										// Save last XY
		this.segs.push(o);													// Add seg to array
		this.curSeg=this.segs.length-1;										// Point last seg in array
		this.lastDotTime=new Date().getTime();								// Save time
		return;
		}
	if (this.curTool == 0) {
		this.segs[this.curSeg].x.push(x);									// Add Y
		this.segs[this.curSeg].y.push(y);									// Add Y
		this.lastX=x;	this.lastY=y;										// Save last XY
		this.lastDotTime=new Date().getTime();								// Save time
		}
	else{
		if ((Math.abs(this.lastX-x) < 2) && (Math.abs(this.lastX-x) < 2)) {	// No drag
			$("#shtx"+this.curSeg).remove();								// Delete text box, if any
			this.segs.pop(0);												// Remove seg
			this.curSeg=-1;													// Stop to this seg	
			}
		else{
			o=this.segs[this.curSeg];										// Point at seg
			if (this.curTool == 3) {										// If a text box
				x=Math.max(x,o.x[o.x.length-1]+100);						// Min 100 pix
				y=Math.max(y,o.y[o.y.length-1]+40);							// Min 40 pix	
				}			
			o.x.push(x);													// Add x
			o.y.push(y);													// Add y
			this.curSeg=-1;													// Stop to this seg	
			}
		}
	this.DrawOverlay();														// Redraw
}	
	
SHIVA_Draw.prototype.SetVal=function(prop, val) 						//	SET VALUE
{
	if ((""+prop).match(/olor/)) {											// If a color
		if ((""+val).match(/none/))											// If none
			val=-1;															// val = -1
		if ((val != -1) && (!(""+val).match(/#/)))							// No #
			val="#"+val;													// Add it
		}
	var num=this.curSeg;													// Get index
	this[prop]=val;															// Set property
	if ((this.curTool < 3) && (num != -1)) {								// If in polygon, cir, or bar
		this.segs[num].curve=this.curve;									// Set prop
		this.segs[num].arrow=this.arrow;									// Set prop
		this.segs[num].edgeColor=this.edgeColor;							// of each
		this.segs[num].edgeWidth=this.edgeWidth;							// from 
		this.segs[num].alpha=this.alpha;									// property
		this.segs[num].color=this.color;									
		this.DrawOverlay();													// Draw segments
		}
	if ((this.curTool == 3) && (num != -1)) {								// A text
		this.segs[num].curve=this.curve;									// Set prop
		this.segs[num].boxColor=this.boxColor;								// op
		this.segs[num].textSize=this.textSize;								// each
		this.segs[num].textColor=this.textColor;							// property
		this.segs[num].textAlign=this.textAlign;							// from
		this.segs[num].alpha=this.alpha;									// property
		}
	if ((this.curTool == 4) && (num != -1)) {								// Image
		this.segs[num].edgeColor=this.edgeColor;							// Set prop
		this.segs[num].edgeWidth=this.edgeWidth;							// from 
		this.segs[num].alpha=this.alpha;									// each
		this.segs[num].imageURL=this.imageURL;								// property
		}
	else if (this.curTool == 5) {											// If in edit
		for (var i=0;i<this.selectedItems.length;++i)  {					// For each selected seg
			num=this.selectedItems[i];										// Get index
			this.segs[num].alpha=this.alpha;								// property
			this.segs[num].curve=this.curve;								// property
			if (this.segs[num].type < 3) {									// Line, cir, box
				this.segs[num].color=this.color;							// Set prop
				this.segs[num].edgeColor=this.edgeColor;					// of each
				this.segs[num].edgeWidth=this.edgeWidth;					// from 
				this.segs[num].arrow=this.arrow;							// property
				}
			else if (this.segs[num].type == 3) {							// Text
				this.segs[num].boxColor=this.boxColor;							
				this.segs[num].textColor=this.textColor;							
				this.segs[num].textAlign=this.textAlign;							
				this.segs[num].textSize=this.textSize;							
				}
			else if (this.segs[num].type == 4) {							// Image
				this.segs[num].edgeColor=this.edgeColor;					// Set prop
				this.segs[num].edgeWidth=this.edgeWidth;					// from 
				this.segs[num].alpha=this.alpha;							// each
				this.segs[num].imageURL=this.imageURL;						// property
				}
			}
		this.DrawOverlay();													// Draw segments
		this.DrawWireframes(false);											// Draw wireframes
		}
	else if (this.curTool == 6) {											// If in idea map
		for (var i=0;i<this.selectedItems.length;++i)  {					// For each selected seg
			num=this.selectedItems[i];										// Get index
			this.segs[num].ideaBackCol=this.ideaBackCol;					// Set prop
			this.segs[num].ideaEdgeCol=this.ideaEdgeCol;					// Set prop
			this.segs[num].ideaTextCol=this.ideaTextCol;					// Set prop
			this.segs[num].ideaGradient=this.ideaGradient;					// Set prop
			this.segs[num].ideaBold=this.ideaBold;							// Set prop
			this.segs[num].ideaShape=this.ideaShape;						// Set prop
			}
		this.DrawOverlay();													// Draw idea map
		}
	}

SHIVA_Draw.prototype.SetTool=function(num) 								//	SET TOOL
{
	$("#shivaDrawDiv").css('pointer-events','auto');						// Restore pointer clicks
	this.curTool=num;														// Set current tool
	if (num == 6)															// Idea map
		$("#shivaDrawDiv").css("cursor","auto");							// Regular cursor
	else 																	// All others except close
		$("#shivaDrawDiv").css("cursor","crosshair");						// Crosshair cursor
	if (this.curTool == -1) {												// If quitting
		this.Sound("delete");												// Delete sound
		$("#shivaDrawDiv").css("cursor","auto");							// Regular cursor
		$("#shivaDrawDiv").css('pointer-events','none');					// Inibit pointer clicks if menu gone
		$("#shivaDrawPaletteDiv").remove();									// Close it
		if (shivaLib)														// If shivalib defined
			shivaLib.SendShivaMessage("ShivaDraw=done"); 					// Send EVA message
		}
	else																	
		this.Sound("click");												// Click sound
	
	this.DrawOverlay()														// Refresh
	this.curSeg=-1;															// Close this seg if open
	if (this.curTool == 5) {												// Editing menu
		this.selectedItems=[];												// Clear all previous selects
		if (this.segs.length > 0) {											// If something drawn
			var s=this.segs.length-1;										// Get last one drawn
			this.AddSelect(-1,s,false);										// Highlight it
			this.DrawMenu(this.segs[s].type);								// Draw menu, w/o resetting curtool
			}
		$("#shivaDrawDiv").css("cursor","auto");							// Regular cursor
		this.DrawWireframes(false);											// Show wireframes
		}
	else if (this.curTool != -1)											// If not closed
		this.DrawMenu();													// Draw menu
}

///////////////////////////////////////////////////////////////////////////////////////////////
//  EVENTS
///////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Draw.prototype.onMouseUp=function(e)								// MOUSE UP HANDLER
{
	if ($("#shivaDrawPaletteDiv").length == 0) 								// If no palette
		return true;														// Quit
	if (drObj.curTool == 5) 												// In edit
		e.stopPropagation();												// Trap event
	drObj.leftClick=false;													// Left button up
	var x=e.pageX-this.offsetLeft;											// Offset X from page
	var y=e.pageY-this.offsetTop;											// Y
	if (e.shiftKey) {														// Shift key forces perpendicular lines
		if (Math.abs(x-drObj.lastX) > Math.abs(y-drObj.lastY))				// If mainly vertical
			y=drObj.lastY;													// Hold y
		else																// Mainly horizontal
			x=drObj.lastX;													// Hold x
		}
	if (drObj.closeOnMouseUp) {												// After a drag-draw
		drObj.closeOnMouseUp=false;											// Reset flag
		drObj.curSeg=-1;													// Close segment
		return true;														// Quit
		}
	if (drObj.curTool < 5 ) {												// Not in edit
		if (drObj.snap)														// If snapping
			x=x-(x%drObj.snapSpan),y=y-(y%drObj.snapSpan);					// Mod down coords
		if ((drObj.curTool) && (e.target.id.indexOf("shtx") == -1))			// Not in line or over text
			drObj.AddDot(x,y,true);											// Add coord
		}
	else if (drObj.curTool > 4) 											// If in edit/idea map
		drObj.AddSelect(x,y,e.shiftKey);									// Select seg/dot
	return (drObj.curTool == 6);											// Set propagation
}

SHIVA_Draw.prototype.onMouseDown=function(e)							// MOUSE DOWN HANDLER
{
	if ($("#shivaDrawPaletteDiv").length == 0) 								// If no palette
		return;																// Quit
	if (drObj.curTool == 6) 												// If in idea
		return true;														// Quit
	var x=e.pageX-this.offsetLeft;											// Offset X from page
	var y=e.pageY-this.offsetTop;											// Y
	drObj.leftClick=true;													// Left button down
	drObj.closeOnMouseUp=false;												// Reset flag
	if (drObj.snap)															// If snapping
		x=x-(x%drObj.snapSpan),y=y-(y%drObj.snapSpan);						// Mod down coords
	if (drObj.curTool == 5) {												// In edit mode
		drObj.lastX=x;														// Save last X
		drObj.lastY=y;														// Y
		e.stopPropagation();												// Trap event
		return false;														// Quit
		}
	if (e.target.id.indexOf("shtx") != -1)									// If over text box
		return;																// Quit
	if (drObj.snap)															// If snapping
		x=x-(x%drObj.snapSpan),y=y-(y%drObj.snapSpan);						// Mod down coords
	drObj.AddDot(x,y,false);												// Add coord
	return false;															// Stop propagation
}

SHIVA_Draw.prototype.onMouseMove=function(e)							// MOUSE MOVE HANDLER
{
	if ($("#shivaDrawPaletteDiv").length == 0) 								// If no palette
		return;																// Quit
	if ((drObj.curTool == 6) || (drObj.curTool == -1)) 						// If in idea or off
		return;																// Quit
	var x=e.pageX-this.offsetLeft;											// Offset X from page
	var y=e.pageY-this.offsetTop;											// Y
	if (drObj.snap)															// If snapping
		x=x-(x%drObj.snapSpan),y=y-(y%drObj.snapSpan);						// Mod down coords
	if ((drObj.leftClick) && (drObj.curTool == 5)) {						// If dragging seg in edit
		var dx=drObj.lastX-x;												// Delta x
		var dy=drObj.lastY-y;												// Y
		drObj.MoveSegs(dx,dy,0);											// Move selected segs	
		drObj.lastX=x;														// Save last X
		drObj.lastY=y;														// Y
		return;																// Quit
		}
	if (drObj.curSeg != -1) {												// If drawing
		if (drObj.curTool != 5) 											// If not in edit mode
			drObj.DrawOverlay();											// Draw overlay	
		if (e.shiftKey) {													// Shift key forces perpendicular lines
			if (Math.abs(x-drObj.lastX) > Math.abs(y-drObj.lastY))			// If mainly vertical
				y=drObj.lastY;												// Hold y
			else															// Mainly horizontal
				x=drObj.lastX;												// Hold x
			}
		if (drObj.curTool == 0)												// Polygon
			shivaLib.g.DrawLine(drObj.ctx,"#000",1,drObj.lastX,drObj.lastY,x,y,1); // Rubber line
		else if ((drObj.leftClick) && (drObj.curTool == 1))					// Circle
			shivaLib.g.DrawCircle(drObj.ctx,-1,1,drObj.lastX,drObj.lastY,Math.abs(x-drObj.lastX),"#999",1);	// Rubber circle
		else if ((drObj.leftClick) && (drObj.curTool < 5))					// Box, text, image
			shivaLib.g.DrawBar(drObj.ctx,-1,1,drObj.lastX,drObj.lastY,x,y,"#999",1); // Rubber box
		if ((drObj.leftClick) && (drObj.curTool == 0)){ 					// If dragging to draw
			if (new Date().getTime()-drObj.lastDotTime > 100)	{			// If not too close to last one
				drObj.AddDot(x,y);											// Add coord
				drObj.closeOnMouseUp=true;									// Close seg on mouse up
				}
			}
		}
}


SHIVA_Draw.prototype.onKeyDown=function(e)								// KEY DOWN HANDLER
{
	if ($("#shivaDrawPaletteDiv").length == 0) 								// If no palette
		return;																// Quit
	if ((e.keyCode == 8) &&													// Look for Del key
        (e.target.tagName != "TEXTAREA") && 								// In text area
        (e.target.tagName != "INPUT")) { 									// or input
		e.stopPropagation();												// Trap it
     	return false;
    }
}

SHIVA_Draw.prototype.onKeyUp=function(e)								// KEY UP HANDLER
{
	if ($("#shivaDrawPaletteDiv").length == 0) 								// If no palette
		return;																// Quit
	if ((e.which == 83) && (e.ctrlKey) && (e.altKey)) {						// CTRL+ALT+S
		shivaLib.SaveData("eStore");										// Open eStore dialog	
		return;																// Quit
		}
	var i;
	if ((e.target.tagName == "TEXTAREA") || (e.target.tagName == "INPUT"))	// If in text entry
		return;																// Quit
	if ((e.which == 67) && (e.ctrlKey))	{									// Copy
		if (drObj.selectedItems.length) {									// If something selected
			drObj.Sound("click");											// Play sound
			drObj.clipboard=[];												// Clear clipboard
			}	
		for (i=0;i<drObj.selectedItems.length;++i) 					
			drObj.clipboard.push(shivaLib.Clone(drObj.segs[drObj.selectedItems[i]]));
		}
	if ((e.which == 86) && (e.ctrlKey))	{									// Paste
		if (drObj.clipboard.length) {										// If something in clipboard
			drObj.selectedItems=[];											// Clear selects
			drObj.Sound("ding");											// Play sound
			for (i=0;i<drObj.clipboard.length;++i) {						// For each seg in clipboard				
				drObj.selectedItems.push(drObj.segs.length);				// Add to selects
				drObj.segs.push(shivaLib.Clone(drObj.clipboard[i])); 		// Add seg
				}
			}
		}	


	if (drObj.curTool == 6) {												// In idea mode
		num=drObj.selectedItems[0];											// Point at 1st select
		if (((e.which == 8) || (e.which == 46)) && (num != -1)) 			// If DEL and an active n
			drObj.DeleteIdea();												// Delete it
		}
	var num=drObj.curSeg;													// Point at currently drawn seg
	if (((e.which == 8) || (e.which == 46)) && (num != -1)) {				// If DEL and an active seg
		var o=drObj.segs[num];												// Point at seg
		o.x.pop();		o.y.pop();											// Delete last dot xy
		drObj.lastX=o.x[o.x.length-1];										// Set last x to end point
		drObj.lastY=o.y[o.y.length-1];										// Set last y to end point
		drObj.DrawOverlay();												// Redraw	
		drObj.Sound("delete");												// Play sound
		}
	if ((e.which == 27) && (num != -1))	{									// If ESC and an active seg
		drObj.curSeg=-1;													// End current seg, if open
		drObj.Sound("dclick");												// Play sound
		}
	else if (drObj.curTool == 5) {											// In edit mode
		if ((e.which == 8) || (e.which == 46)) {							// If DEL 
			if (drObj.selectedItems.length) {								// If DEL and some selected segs
				num=drObj.selectedItems[0];									// Point at 1st select
				if ((drObj.selectedDot != -1) && (drObj.segs[num].type == 0)) { // If a dot selected on a polygon
					drObj.segs[num].x.splice(drObj.selectedDot,1);			// Remove x dot
					drObj.segs[num].y.splice(drObj.selectedDot,1);			// Y
					}
				else if (e.target.id.indexOf("shtx") == -1)					// If not over text box remove whole segments(s)
					for (var i=0;i<drObj.selectedItems.length;++i) {		// For each selected element
						$("#shtx"+drObj.selectedItems[i]).remove();			// Delete text box, if any
						$("#shim"+drObj.selectedItems[i]).remove();			// Delete image box, if any
						drObj.segs.splice(drObj.selectedItems[i],1);		// Remove seg
						}


				drObj.DrawOverlay();										// Redraw	
				drObj.DrawWireframes(false);								// Draw wireframes
				drObj.Sound("delete");										// Play sound
				}
			}
	else if ((e.which == 40) && (e.shiftKey)) drObj.MoveSegs(0,0,-1);		// SH-Up to order up
	else if ((e.which == 38) && (e.shiftKey)) drObj.MoveSegs(0,0,1);		// SH-Dn to order down
	else if (e.which == 39)  drObj.MoveSegs(-1,0,0);						// Move L 
	else if (e.which == 37)  drObj.MoveSegs(1,0,0);							// Move R
	else if (e.which == 40)  drObj.MoveSegs(0,-1,0);						// Move U 
	else if (e.which == 38)  drObj.MoveSegs(0,1,0);							// Move D 
	}
}

SHIVA_Draw.prototype.AddSelect=function(x, y, shiftKey)					// SELECT SEGMENT/DOT FROM CLICK
{
	var i,j,o,seg=-1,asp;
	var oldDot=this.selectedDot;											// Save original dot
	this.selectedDot=-1;													// No selected dot
	var last=this.selectedItems[0];											// Save selected seg
	if (x != -1) {															// If not a forcing a selection
		if (!shiftKey) {													// If shift key unpressed
			this.selectedItems=[];											// Clear all previous selects
			$("#shivaDrawDiv").css("cursor","auto");						// Default cursor
			}
		if (this.curTool == 6)	{											// If idea map
			for (i=0;i<this.segs.length;++i) {								// For each seg
				o=this.segs[i];												// Point at seg
				if (o.type != 5)											// If an idea map node
					continue;												// Skip it
				var d=$("#shivaIdea"+i);									// Div id										
				if ((x > o.ideaLeft) && (x < Number(o.ideaLeft)+Number(d.width())+16) &&	// In h
				    (y > o.ideaTop ) && (y < Number(o.ideaTop)+Number(d.height())+16)) {	// In v
					this.selectedItems.push(i);								// Add to selects
					this.ideaShape=o.ideaShape;								// Shape
					this.ideaBackCol=o.ideaBackCol;							// Back col
					this.ideaGradient=o.ideaGradient;						// Gradient
					this.ideaEdgeCol=o.ideaEdgeCol;							// Edge col
					this.ideaTextCol=o.ideaTextCol;							// Text col
					this.ideaBold=o.ideaBold;								// Bold text
					this.SetMenuProperties();								// Set menu properties
					this.selectedItems[0]=i;								// Set select
					break;
					}
				}
				this.HighlightIdea();										// Set highlight
				return;
			}
		for (i=0;i<this.segs.length;++i) {									// For each seg
			o=this.segs[i];													// Point at seg
			if ((!o.x) || (o.type == 5))									// If an idea map node or no x
				continue;													// Skip it
			for (j=0;j<o.x.length;++j) 										// For each dot in seg
				if ((x > o.x[j]-6) && (x < o.x[j]+6) && (y > o.y[j]-6) && (y < o.y[j]+6)) { // If near
					if (last == i) 											// If clicking on already selected seg 
						this.selectedDot=j;									// This is the selected dot
					seg=i;													// Got one!
					break;													// Quit looking
					}
			}
		if (seg == -1) {													// If no seg/dot selected
			for (i=0;i<this.segs.length;++i) {								// For each seg
				var minx=99999,maxx=0,miny=99999,maxy=0;					// Set limits
				o=this.segs[i];												// Point at seg
				if (o.type == 5)											// If an idea map node
					continue;												// Skip it
				if (o.type == 1) {											// A circle
					j=Math.abs(o.x[1]-o.x[0]);								// Radius
					minx=o.x[0]-j;	maxx=o.x[1];							// X
					miny=o.y[0]-j;	maxy=Number(o.y[0])+j;					// Y
					}
				else
					for (j=0;j<o.x.length;++j) {							// For each dot in seg
						minx=Math.min(minx,o.x[j]);							// Minx
						miny=Math.min(miny,o.y[j]);							// Miny
						maxx=Math.max(maxx,o.x[j]);							// Maxx
						maxy=Math.max(maxy,o.y[j]);							// Maxy
						}
				if ((x > minx) && (x < maxx) && (y > miny) && (y < maxy)) {	// If within bounds
					seg=i;													// Got one!
					break;													// Quit looking
					}
				}
			}
		}
	else																	// Forcing a select
		seg=y;																// Get it from y

	if (seg != -1) {														// If a seg/dot selected
		o=this.segs[seg];													// Point at seg
		if (this.selectedDot != -1)	{										// If a specific dot selected
			$("#shivaDrawDiv").css("cursor","crosshair");					// Crosshair cursor
			if (oldDot != this.selectedDot)									// If a new selection
				drObj.Sound("dclick");										// Double-click
			}
		else{																// Whole seg
			$("#shivaDrawDiv").css("cursor","move");						// Move cursor
			drObj.Sound("click");											// Click
			}
		this.selectedItems.push(seg);										// Add seg to selects
		this.alpha=o.alpha;													// Everyone has alpha
		this.curve=o.curve;													// Everyone has curce
		if (o.type < 3)	{													// Line, cir, box	
			this.arrow=o.arrow;												
			this.curve=o.curve;												
			this.color=o.color;							
			this.edgeColor=o.edgeColor;
			this.edgeWidth=o.edgeWidth;	
			}
		else if (o.type == 3) {												// Text		
			this.curve=o.curve;												
			this.textColor=o.textColor;
			this.boxColor=o.boxColor;
			this.textSize=o.textSize;
			this.textAlign=o.textAlign;
			}
		else if (o.type == 4) {												// Image		
			o=this.segs[seg];												// Point at seg
			asp=$("#shimi"+seg).height()/$("#shimi"+seg).width();			// Get aspect
			if (!asp)	asp=1;												// If no asp, force to 1
			if (!isNaN(asp))												// If a valid #
				o.y[1]=o.y[0]+(Math.abs(o.x[1]-o.x[0])*asp);				// Conform y to asp
			this.edgeColor=o.edgeColor;										// Edge color
			this.edgeWidth=o.edgeWidth;										// Edge with
			this.DrawOverlay();												// Draw segments
			}
		this.DrawMenu(o.type);												// Set proper menu for type
		this.SetMenuProperties();											// Set menu properties
		}
	this.DrawWireframes(false);												// Draw wireframes
}

SHIVA_Draw.prototype.MoveSegs=function(dx, dy, dz)						// MOVE SELECTED SEGS
{
	var i,j,o,oo;
	for (i=0;i<this.selectedItems.length;++i) {								// For each selected element
		o=this.segs[this.selectedItems[i]];									// Point at seg
		if (o.type == 5)													// If an idea map node
			continue;														// Skip it
		if (dz) {															// If shifting order
			if ((this.selectedItems[i]+dz < 0) || (this.selectedItems[i]+dz >= this.segs.length)) {  // If out of range
				drObj.Sound("delete");										// Delete
				continue;													// Skip
				}
			oo=this.segs[this.selectedItems[i]+dz];							// Sve dest seg
			this.segs[this.selectedItems[i]+dz]=o;							// Move to dest
			this.segs[this.selectedItems[i]]=oo;							// Copy dest to src 
			this.selectedItems[i]+=dz;										// Dest is now selected one
			drObj.Sound("click");											// Click
			}
		if (this.selectedDot != -1)											// If single dot selected
			o.x[this.selectedDot]-=dx,o.y[this.selectedDot]-=dy;			// Shift it
		else																// Whole seg
			for (j=0;j<o.x.length;++j) 										// For each dot in seg
				o.x[j]-=dx,o.y[j]-=dy;										// Shift dot
		}
	this.DrawOverlay();														// Draw segments
	this.DrawWireframes(false);												// Draw wireframes
}

SHIVA_Draw.prototype.AddIdea=function(num) 								//	ADD IDEA NODE 
{
	var i,off=0;
	var o=new Object;
	if ((num != -1) && (this.selectedItems.length))							// If highlighted
		num=this.selectedItems[0]											// This is the parent
	o.type=5;																// Idea map
	o.id=this.segs.length;													// Save id
	o.ideaParent=num;														// Parent
	o.ideaShape=this.ideaShape;												// Box color
	o.ideaBackCol=this.ideaBackCol;											// Box color
	o.ideaGradient=this.ideaGradient;										// Gradient?
	o.ideaBold=this.ideaBold;												// Bold?
	o.ideaEdgeCol=this.ideaEdgeCol;											// Edge color
	o.ideaTextCol=this.ideaTextCol;											// Text color
	o.text="A new idea";													// Text
	o.ideaHgt=21;	o.ideaWid=100;											// Size
	if (num == -1) {														// First one
		o.ideaLeft=$("#shivaDrawDiv").width()/2;							// Center x
		o.ideaTop=$("#shivaDrawDiv").height()/2;							// Center y
		}
	else{                                                                   // A child
		for (i=0;i<this.segs.length;++i)                                    // For each seg
		  if (this.segs[i].ideaParent == num)                               // If siblings
		      off+=10;                                                      // Add to offset
		o.ideaLeft=this.segs[num].ideaLeft+off;								// Same x
		o.ideaTop=(Number(this.segs[num].ideaTop)+Number(this.segs[num].ideaHgt)+32+off);	// Put under parent
		}
	num=this.selectedItems[0]=this.segs.length;;							// Set select
	this.segs.push(o);														// Add idea
	this.Sound("ding");															// Ding sound
	this.DrawOverlay();														// Draw idea map
}

SHIVA_Draw.prototype.HighlightIdea=function() 							//	HIGHLIGHT IDEA NODE 
{
	var i,dd;
	$("#shivaIdeaAddBut").remove();											// Take off add but
	for (i=0;i<this.segs.length;++i) {										// For each seg
		var wid=1;															// 1 pixel borders
		dd="#shivaIdea"+i;													// Div id										
		if (this.segs[i].ideaEdgeCol == -1)									// If col is none
			$(dd).css("border","none");										// No border
		else																// Had color
			$(dd).css("border",wid+"px solid "+this.segs[i].ideaEdgeCol);	// Regular border
		}
	if (this.selectedItems.length)	{										// If highlighted
		dd="#shivaIdea"+this.selectedItems[0];								// Div id										
		$(dd).css("border","1px dashed red");								// Red outline
		var x=$(dd).width()/2;												// Center
		var y=$(dd).height();												// Bottom
		var str="<div id='shivaIdeaAddBut' style='position:absolute;top:"+y+"px;left:"+x+"px'><img src='adddot.gif' title='Add child idea' onmouseup='drObj.AddIdea(0)'></div>"
		$(dd).append(str);													// Add add but
		}
}

SHIVA_Draw.prototype.DeleteIdea=function() 								//	DELETE IDEA NODE 
{
	if (!this.selectedItems.length)											// Nothing selected
		return;																// Quit
	num=this.selectedItems[0];												// Get index
	if (this.segs[num].ideaParent != -1) {									// If connected
		this.Sound("click");												// click sound
		this.segs[num].ideaParent=-1;										// Free float it
		}
	else{																	// Delete them
		this.selectedItems=[];												// Deselect
		$("#shivaIdea"+num).remove();										// Remove idea node
		this.segs.splice(num,1);											// Remove seg
		this.DeleteIdeaChildren(num);										// Remove children recursively
		this.Sound("delete");												// Delete sound
		}
	this.DrawOverlay();														// Draw idea map
}

SHIVA_Draw.prototype.DeleteIdeaChildren=function(parent) 				//	DELETE IDEA CHILD NODES RECURSIVELY
{
	var i;
	for (i=0;i<this.segs.length;++i) {										// For each node
		if (this.segs[i].type != 5)											// If not an idea node
			continue;														// Skip it
		if (this.segs[i].ideaParent == parent) {							// If a child of parent									
			var id=this.segs[i].id;											// Real id
			$("#shivaIdea"+id).remove();									// Remove idea node
			this.segs.splice(i,1);											// Remove child
			this.DeleteIdeaChildren(id);									// Look for children
			this.DeleteIdeaChildren(parent);								// Look for siblings
			break;
			}
		}
}

SHIVA_Draw.prototype.MoveIdeaChildren=function(parent, dx, dy) 			//	MOVE IDEA CHILD NODES RECURSIVELY
{
	var i;
	for (i=0;i<this.segs.length;++i) {										// For each node
		if (this.segs[i].type != 5)											// If not an idea node
			continue;														// Skip it
		if (this.segs[i].ideaParent == parent) {							// If a child of parent									
			this.segs[i].ideaLeft=Number(this.segs[i].ideaLeft)+Number(dx);	// X
			this.segs[i].ideaTop=Number(this.segs[i].ideaTop)+Number(dy);	// Y
			$("#shivaIdea"+i).css("left",this.segs[i].ideaLeft+"px").css("top",this.segs[i].ideaTop+"px");
			this.MoveIdeaChildren(i,dx,dy);									// Look for children
			}
		}
}

SHIVA_Draw.prototype.IdeaDrop=function(from, to) 						//	HANDLE IDEA NODE DRAG & DROP
{
	this.segs[from].ideaParent=to;											// Connect
	this.Sound("ding");														// Ding sound
}////////////////////////////////////////////////////////////////////////////////////////////////////
// SHIVA GRAPHICS
///////////////////////////////////////////////////////////////////////////////////////////////////
function SHIVA_Graphics() 																			// CONSTRUCTOR
{
	this.shadowOffX=this.shadowOffY=this.curShadowCol=this.curShadowBlur=0;	
	this.composite="source-over";
}

SHIVA_Graphics.prototype.CreateCanvas=function(id, con, wid, hgt, left, top) 						//	ADD NEW CANVAS
{
	var str="<canvas id='"+id+"' "; 
	if (wid) 	str+="width='"+wid+"px' "; 
	if (hgt) 	str+="height='"+hgt+"px' "; 
	str+="/>";
	var mc=$(str).appendTo("#"+con);
	if (left || top)	
		mc.style.position="absolute";
	if (left)	mc.style.left=left;
	if (top)	mc.style.top=top;
	return mc;
}

SHIVA_Graphics.prototype.DeleteCanvas=function(id) 													// DELETE CANVAS
{
	var mc=null;
	if (typeof(id) == "object")
		mc=id;
	else
		mc=document.getElementById(id);
	if (mc)
		document.body.removeChild(mc);
}

SHIVA_Graphics.prototype.Compositing=function(ctx,compositeMode, alpha) 							// COMPOSITING
{
	ctx.globalCompositeOperation=this.composite=compositeMode;										
	if (alpha != undefined)
		ctx.globalAlpha=this.alpha=alpha;										
}


SHIVA_Graphics.prototype.DrawBar=function(ctx, col, alpha, x1, y1, x2, y2, edgeCol, edgeWid) 		// DRAW RECTANGLE
{
 	ctx.globalAlpha=alpha;
	if (col != -1){	
 	 	ctx.fillStyle=col;
		ctx.fillRect(x1,y1,x2-x1,y2-y1);
		}	
	if (edgeWid) {
    	ctx.lineWidth=edgeWid;
		ctx.strokeStyle=edgeCol;
		ctx.strokeRect(x1,y1,x2-x1,y2-y1);
		}
}

SHIVA_Graphics.prototype.DrawRoundBar=function(ctx, col, alpha, x1, y1, x2, y2, rad, edgeCol, edgeWid) 	// DRAW ROUND RECTANGLE
{
	ctx.beginPath();
	ctx.globalAlpha=alpha;
	ctx.moveTo(x1+rad,y1);
	ctx.lineTo(x2-rad,y1);
	ctx.arcTo(x2,y1,x2,y1+8,rad);
	ctx.lineTo(x2,y2-rad);
	ctx.arcTo(x2,y2,x2-rad,y2,rad);
	ctx.lineTo(x1+rad,y2);
	ctx.arcTo(x1,y2,x1,y2-rad,rad);
	ctx.lineTo(x1,y1+rad);
	ctx.arcTo(x1,y1,x1+rad,y1,rad);
	if (col != -1) {
	 	ctx.fillStyle=col;
		ctx.fill();
		}
	if (edgeWid) {
    	ctx.lineWidth=edgeWid;
		ctx.strokeStyle=edgeCol;
		ctx.stroke();
		}
	ctx.closePath();
}

SHIVA_Graphics.prototype.DrawLine=function(ctx, col, alpha, x1, y1, x2, y2, edgeWid) 				// DRAW LINE
{	
 	ctx.beginPath();
 	ctx.globalAlpha=alpha;
   	ctx.lineWidth=edgeWid;
	ctx.strokeStyle=col;
	ctx.moveTo(x1,y1); 
	ctx.lineTo(x2,y2);
	ctx.stroke();
	ctx.closePath();
}

SHIVA_Graphics.prototype.DrawRubberLine=function(ctx, x1, y1, x2, y2, edgeWid) 				// DRAW RUBBER LINE
{	
 	ctx.globalCompositeOperation="xor";
	ctx.beginPath();
 	ctx.globalAlpha=1;
   	ctx.lineWidth=1;
	ctx.strokeStyle="#000";
	ctx.moveTo(x1,y1); 
	ctx.lineTo(x2,y2);
	ctx.stroke();
	ctx.closePath();
	ctx.globalCompositeOperation="source-over";
}

SHIVA_Graphics.prototype.DrawRubberBox=function(ctx, x1, y1, x2, y2, edgeWid) 				// DRAW RUBBER LINE
{	
 	ctx.globalCompositeOperation="xor";
	ctx.beginPath();
 	ctx.globalAlpha=1;
   	ctx.lineWidth=1;
	ctx.strokeStyle="#000";
	ctx.strokeRect(x1,y1,x2-x1,y2-y1);
	ctx.globalCompositeOperation="source-over";
}

SHIVA_Graphics.prototype.DrawCircle=function(ctx, col, alpha, cx, cy, rad, edgeCol, edgeWid)		// DRAW CIRCLE
{
	ctx.beginPath();
  	ctx.arc(cx,cy,rad,0,Math.PI*2,false);
	ctx.globalAlpha=alpha;
	if (col != -1) {
	 	ctx.fillStyle=col;
		ctx.fill();
		}
	if (edgeWid) {
    	ctx.lineWidth=edgeWid;
		ctx.strokeStyle=edgeCol;
		ctx.stroke();
		}
	ctx.closePath();
}

SHIVA_Graphics.prototype.DrawWedge=function(ctx, col, alpha, cx, cy, rad, start, end, edgeCol, edgeWid)		// DRAW A PIE WEDGE
{
  	var span=end-start;
	if (!span)
		return;
	ctx.beginPath();
  	if (span < 360)
	  	ctx.moveTo(cx,cy);
  	ctx.arc(cx,cy,rad,(start/360)*Math.PI*2,(end/360)*Math.PI*2,false);
  	if (span < 360)
 	  	ctx.lineTo(cx,cy);
	ctx.globalAlpha=alpha;
	if (col != -1) {
	 	ctx.fillStyle=col;
		ctx.fill();
		}
	if (edgeWid) {
    	ctx.lineCap="round";
    	ctx.lineWidth=edgeWid;
		ctx.strokeStyle=edgeCol;
		ctx.stroke();
		}
	ctx.closePath();
}

SHIVA_Graphics.prototype.DrawTriangle=function(ctx, col, alpha, x, y, wid, dir)	 				// DRAW TRIANGLE
{
	var wid2=(wid*4.0/5.0)>>0;
 	ctx.beginPath();
 	ctx.globalAlpha=alpha;
  	ctx.fillStyle=col;
	if (dir == "up") {	
		ctx.moveTo(x,y-wid2);  
		ctx.lineTo(x+wid,y+wid2);	  
		ctx.lineTo(x-wid,y+wid2);	  
		ctx.lineTo(x,y-wid2);  
		}
	else if (dir == "right") {
		ctx.moveTo(x-wid2,y-wid);  
		ctx.lineTo(x+wid2,y);	  
		ctx.lineTo(x-wid2,y+wid);	  
		ctx.lineTo(x-wid2,y-wid);  
		}
	else if (dir == "down") {			
		ctx.moveTo(x-wid,y-wid2);  
		ctx.lineTo(x+wid,y-wid2);	  
		ctx.lineTo(x,y+wid2);	  
		ctx.lineTo(x-wid,y-wid2);  
		}
	else if (dir == "left") {			
		ctx.moveTo(x-wid2,y);  
		ctx.lineTo(x+wid2,y-wid);	  
		ctx.lineTo(x+wid2,y+wid);	  
		ctx.lineTo(x-wid2,y);  
		}
	ctx.fill();	
	ctx.closePath();
}

SHIVA_Graphics.prototype.DrawPolygon=function(ctx, col, alpha, x, y,  edgeCol, edgeWid, smooth)			// DRAW POLYGON
{
	var n=x.length;	
	ctx.beginPath();
   	ctx.moveTo(x[0],y[0]);
	ctx.globalAlpha=alpha;
	var open=true;
	if ((Math.abs(x[0]-x[x.length-1]) < 3) && (Math.abs(y[0]-y[y.length-1]) < 3)) {
		x[x.length-1]=x[0];
		y[y.length-1]=y[0];
		open=false;
		}
	if (smooth) {
		var x1=x[0]-0+((x[1]-x[0])/2)-0;
		var y1=y[0]-0+((y[1]-y[0])/2)-0;
		if (open)
			ctx.lineTo(x1,y1); 															
		for (i=1;i<n-1;++i) {														
			x1=x[i]-0+((x[i+1]-x[i])/2)-0;												
			y1=y[i]-0+((y[i+1]-y[i])/2)-0;												
				ctx.quadraticCurveTo(x[i],y[i],x1,y1); 											
			}
		if (open)
			ctx.lineTo(x[i],y[i]); 									 					
		}
	else
	  	for (i=0;i<n;++i)
		  	ctx.lineTo(x[i],y[i]);
	if (col != -1) {
	 	ctx.fillStyle=col;
		ctx.fill();
		}
	if (edgeWid) {
    	ctx.lineCap="round";
    	ctx.lineWidth=edgeWid;
		ctx.strokeStyle=edgeCol;
		if (col != -1)
		 	ctx.lineTo(x[0],y[0]);
		ctx.stroke();
		}
	ctx.closePath();
}

SHIVA_Graphics.prototype.SetShadow=function(ctx, offx, offy, blur, col, comp)	 						// SET SHADOW/COMPOSITION
{
	if (!offx) {
		offx=offy=blur=col=0;
		comp="source-over";
		}
	if (offx != undefined)		ctx.shadowOffsetX=offx;	
	if (offy != undefined)		ctx.shadowOffsetY=offy;	
	if (blur != undefined)		ctx.shadowBlur=blur;
	if (col  != undefined)		ctx.shadowColor=col;	
	if (comp != undefined)		ctx.globalCompositeOperation=comp;	
}

SHIVA_Graphics.prototype.AddGradient=function(ctx, id, x1, y1, x2, y2, col1, col2, r1, r2)	 			// ADD GRADIENT TO CANVAS
{
	if (!r1)
		ctx[id]=ctx.createLinearGradient(x1,y1,x2,y2);
	else
		ctx[id]=ctx.createRadialGradient(x1,y1,r1,x2,y2,r2);
	if (!col1)		col1="#000000";	
	if (!col2)		col2="#ffffff";	
	ctx[id].addColorStop(0,col1);
	ctx[id].addColorStop(1,col2);
}

SHIVA_Graphics.prototype.GetImage=function(ctx, file, left, top, wid, hgt)							// GET IMAGE
{
	var image=new Image();
	image.src=file;
	image.onload=function() {
		var asp=image.height/image.width;
		if (!wid && !hgt)
			wid=image.width,hgt=image.height
		else if (!wid && hgt)
			wid=hgt/asp;
		else if (wid && !hgt)
			hgt=wid*asp;
		ctx.drawImage(image,left,top,wid,hgt)
		}
	return image;
}

///////// EVENTS   //////////

SHIVA_Graphics.prototype.resolveID=function(id)															// CONVERT STRING ID TO DOM ID
{
	if (typeof(id) != "object")
		id=document.getElementById(id);
	return id;
}

SHIVA_Graphics.prototype.AddListener=function(id, eventType, handler) 									// ADD EVENT LISTENER
{	
	$("#"+id)[0].addEventListener(eventType,handler,false);
}

SHIVA_Graphics.prototype.RemoveListener=function(id, eventType, handler) 								// REMOVE EVENT LISTENER
{	
	this.resolveID(id).removeEventListener(eventType,handler,false);
}

SHIVA_Graphics.prototype.SetDrag=function(id, mode) 													// START/STOP DRAG
{
	id=$("#"+id);
	id.g=this;
	id.draggable=mode;	
	if (!mode)
		this.removeListener(id,'mousedown',dragDown);
	else
		this.addListener(id,'mousedown',dragDown)

	function dragDown(e) {
		if (!e.target.draggable)
			return
		e.target.dragX=e.pageX-e.target.style.left.slice(0,-2);
		e.target.dragY=e.pageY-e.target.style.top.slice(0,-2)
		e.target.g.addListener(e.target,'mousemove',dragMove)
		e.target.g.addListener(e.target,'mouseup',dragUp)
		e.target.inDrag=true;
		}
	function dragMove(e) {
		e.target.style.left=e.pageX-e.target.dragX;
		e.target.style.top=e.pageY-e.target.dragY;
		}
	function dragUp(e) {
		e.target.g.removeListener(e.target,'mousemove',dragMove)
		e.target.g.removeListener(e.target,'mouseup',dragUp)
		e.target.inDrag=false;
		}
}

///////// STRING   //////////

SHIVA_Graphics.prototype.SecsToTime=function(time, frameRate) 											// CONVERT MS TO TIMECODE
{				
	var timecode="";																
	if (!frameRate)
		frameRate=24;
	time/=1000;																		
	var mins=(time/60)>>0;																					
	var secs=(time%60)>>0;														
	var frms=((time-(secs+(mins*60)))*frameRate)>>0;							
	if (mins < 10)																	
		timecode+="0";															
	timecode+=mins+":";																				
	if (secs < 10)																
		timecode+="0";															
	timecode+=secs+":";																						
	if (frms < 10)																
		timecode+="0";															
	timecode+=frms;																							
	return timecode
}

SHIVA_Graphics.prototype.SetTextFormat=function(ctx, format) 									// SET TEXT FORMAT
{		
	var v=format.split(",");
	var pair,key,val;
	var bold="",ital="",font="",size="12";		
	for (var i=0;i<v.length;++i) {
		pair=v[i].split("=")
		key=pair[0];			val=pair[1];
		if (key == "align") 	ctx.textAlign=val;
		if (key == "color") 	ctx.fillStyle=val;
		if (key == "font")  	font=val;
		if (key == "size")  	size=val+"px";
		if (key == "bold")  	bold="bold";
		if (key == "italic")  	ital="italic";
		}
	if (font)	
		ctx.font=bold+" "+ital+" "+size+" "+font;
	return size.substring(0,size.length-2);
}

SHIVA_Graphics.prototype.DrawText=function(ctx, text, x, y, format) 							// DRAW TEXT
{		
	try {
		if (format)
			this.SetTextFormat(ctx,format);
		ctx.fillText(text,x,y);	
	} catch(e){};
}

///////////////////////////////////////////////////////////////////////////////////////////////
//  SHIVALIB MAPS
///////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Show.prototype.DrawMap=function() 													//	DRAW MAP
{
	var v,vv,i;
	var container=this.container;
	var ops=this.options;
   	var latlng=new google.maps.LatLng(-34.397,150.644);
	var mapType=ops.mapTypeId.toUpperCase();
	if (mapType == "LAND")
		ops.mapTypeId=mapType;
	else
		ops.mapTypeId=google.maps.MapTypeId[mapType];
  	var ll=ops.mapcenter.split(",")
	latlng=new google.maps.LatLng(ll[0],ll[1]);
	ops.center=latlng;
	ops.zoom=Number(ll[2]);
   	this.mapsInfoWindow=new google.maps.InfoWindow({ maxWidth:300 });							
  	this.items=[];
  	for (var key in ops) {
		if (ops[key] == "true")  ops[key]=true;
		if (ops[key] == "false") ops[key]=false;
		if (key.indexOf("item-") != -1) {
			var o=new Object;
			v=ops[key].split(';');
			for (i=0;i<v.length;++i) {
				vv=v[i].split(':');
				if (vv[1].indexOf("http") == -1)
				    vv[1]=vv[1].replace(/~/g,"=");
				o[vv[0]]=vv[1].replace(/\^/g,"&").replace(/\`/g,":");
				}
			this.items.push(o);
			}
		}
	$("#"+this.container).height(ops.height);							// Height
	$("#"+this.container).width(ops.width);								// Width
	ops["mapTypeControlOptions"]={ "mapTypeIds":[	
		google.maps.MapTypeId.ROADMAP,
     	google.maps.MapTypeId.TERRAIN,
		google.maps.MapTypeId.SATELLITE,
		google.maps.MapTypeId.HYBRID,
		"LAND"
		],
		style: google.maps.MapTypeControlStyle.DROPDOWN_MENU 
		};
	this.map=new google.maps.Map(document.getElementById(container),ops);
	this.AddClearMapStyle(this.map);
	this.AddBlankMapStyle(this.map);
	this.DrawMapOverlays();
	this.DrawLayerControlBox(this.items,this.options.controlbox);
	window.postMessage("InitGeocoder","*");								// Init geocoder	
	this.SendReadyMessage(true);											
	google.maps.event.addListener(this.map,'click', function(e) {
	 	var l=e.latLng.toString().replace(/\(/,"").replace(/, /,"|").replace(/\)/,"");
	 	var p=e.pixel.toString().replace(/\(/,"").replace(/, /,"|").replace(/\)/,"");
	 	shivaLib.SendShivaMessage("ShivaMap=click",l+"|"+p);
 		});
	google.maps.event.addListener(this.map,'center_changed', function(e) {
	 	var map=shivaLib.map;
	 	var lat=map.getCenter();
	 	shivaLib.SendShivaMessage("ShivaMap=move",lat.lat()+"|"+lat.lng()+"|"+map.getZoom());
 		});
}

SHIVA_Show.prototype.AddInternalOptions=function(options, newOps) 							//	PARSE ITEMS
{
	var i,vv;
	if (newOps) {
		var v=newOps.split(',');
		for (i=0;i<v.length;++i) {
			vv=v[i].split("=");
			if (vv[1] == 'true') 	vv[1]=true;
			if (vv[1] == 'false') 	vv[1]=false;
			options[vv[0]]=vv[1];
			}
		}
}		

SHIVA_Show.prototype.DrawMapOverlays=function() 										//	DRAW MAP OVERLAYS
{
 	if (!this.items)
  		return;
 	var i,j,latlng,v,ops,curZoom,curLatLon;
	var _this=this;
 	var items=this.items; 
    v=this.options.mapcenter.split(",")
	curLatlng=new google.maps.LatLng(v[0],v[1]);
	curZoom=v[2];
	for (i=0;i<items.length;++i) {
		ops=new Object();
		if (items[i].listener)
			google.maps.event.removeListener(items[i].listener);
		if ((items[i].obj) && (items[i].layerType == "MarkerSet")) {
			for (j=0;j<items[i].obj.length;++j) {						
				google.maps.event.removeListener(items[i].obj[j].listener);	
				items[i].obj[j].obj.setMap(null);
				}
			items[i].obj=null;
			}
		else if (items[i].obj)
			items[i].obj.setMap(null);
		if (items[i].layerType == "Drawn") {
			items[i].obj=new ShivaCustomMapOverlay()
			}
		else if (items[i].layerType == "Marker") {
			items[i].obj=new google.maps.Marker();
			v=items[i].layerSource.split(",")
			items[i].pos=latlng=new google.maps.LatLng(v[0],v[1]);
			ops["title"]=v[2];
			ops["position"]=latlng;
			if (v.length == 4)
				ops["icon"]=v[3]
 			if (ops && items[i].obj)
				items[i].obj.setOptions(ops);
			items[i].listener=google.maps.event.addListener(items[i].obj,'click', function(e) {
				var j,v;
 				for (j=0;j<_this.items.length;++j)	{				
					v=_this.items[j].layerSource.split(",")
					if (v[2] == this.title)					
 						break;											
  					}
   				shivaLib.SendShivaMessage("ShivaMap=marker",this.title+"|"+e.latLng.lat()+"|"+e.latLng.lng()+"|"+j);
	 			});
			}
		else if (items[i].layerType == "MarkerSet") {
			if (items[i].visible == "true") {
				this.items[i].obj=[];
				this.markerData=i;
				this.GetSpreadsheet(items[i].layerSource,true,null,function(d){_this.MapAddMarkers(d,_this.items[_this.markerData].obj)});
				}
			continue;
			}
		else if (items[i].layerType == "Overlay") {
			v=items[i].layerOptions.split(",");
			var imageBounds=new google.maps.LatLngBounds(new google.maps.LatLng(v[2],v[1]),new google.maps.LatLng(v[0],v[3]));
			if (v.length == 5)
				ops["opacity"]=v[4]/100;
			if (items[i].layerSource)
				items[i].obj=new google.maps.GroundOverlay(items[i].layerSource,imageBounds,ops);
//	38.07,-78.55,37.99,-78.41
//	//www.viseyes.org/shiva/map.jpg
			items[i].listener=google.maps.event.addListener(items[i].obj,'click', function(e) {
	 			shivaLib.SendShivaMessage("ShivaMap=overlay",this.url+"|"+e.latLng.lat()+"|"+e.latLng.lng());
 				});
			}
		else if (items[i].layerType == "KML") {
			if (items[i].layerOptions) {	
				v=items[i].layerOptions.split(",");
				for (j=0;j<v.length;++j) 
					ops[v[j].split("=")[0]]=v[j].split("=")[1];
				}
			items[i].obj=new google.maps.KmlLayer(items[i].layerSource,ops);
			items[i].listener=google.maps.event.addListener(items[i].obj,'click', function(e) {
	  			var str=this.url+"|"+e.featureData.name+"|"+e.latLng.lat()+"|"+e.latLng.lng();
		 		shivaLib.SendShivaMessage("ShivaMap=kml",str);
	 			});
			}
		else if ((items[i].layerType == "GoTo") && (items[i].visible == "true")) {
			v=items[i].layerSource.split(",");							// Split into parts
			if (v.length > 1)									 		// If enough  vals and visible
				curLatlng=new google.maps.LatLng(v[0],v[1]);			// Set center
			if (v.length > 2)											// If set
				curZoom=v[2];											// Set zoom
			}
		if ((items[i].visible == "true") && (items[i].obj))				// If showing
			items[i].obj.setMap(this.map);								// Add to map
		}
	this.map.setCenter(curLatlng);										// Center map
	this.map.setZoom(Number(curZoom));									// Zoom map
}

SHIVA_Show.prototype.MapActions=function(msg)						// REACT TO SHIVA ACTION MESSAGE
{
	var v=msg.split("|");												// Split msg into parts
	if (v[0] == "ShivaAct=goto") {										// GOTO
		var curLatlng=new google.maps.LatLng(v[1],v[2]);				// Set lat/lon
		this.map.setCenter(curLatlng);									// Center map
		this.map.setZoom(Number(v[3]));									// Zoom map
		}
	else if ((v[0] == "ShivaAct=show") || (v[0] == "ShivaAct=hide")) {	// SHOW/SHOW
		if (this.items[v[1]]) 											// If valid item	
			this.items[v[1]].visible=(v[0] == "ShivaAct=show").toString();	// Set visibility 
		this.DrawMapOverlays();											// Redraw
		}
	else if (v[0] == "ShivaAct=data")  {								// FILL MARKERS
		if (v[1]) 														// If valid item	
			this.MapAddMarkers(v[1]);									// Add markers
		}
	else if (v[0] == "ShivaAct=marker") { 								// SHOW/HIDE MARKERS
		if (v[1] < this.markerData.length) 								// If valid
			this.markerData[v[1]].obj.setMap(v[2]=="true"?this.map:null);	// Hide/show
		}
}

SHIVA_Show.prototype.MapAddMarkers=function(json, mData)			// ADD MARKERS TO MAP FROM JSON
{
	var hasLines=false;
	var i,j,o,mark,list,ops;
	var flat,flon,tlat,tlon,col,alpha,width,coords,path;
	var _this=shivaLib;
	if (typeof(json) == "string") {										// If it came from shivaEvent
		json=$.parseJSON(json);											// Objectify
		var cols=json[0].length;										// Number of fields
		for (i=1;i<json.length;++i) {									// For each event
			o={};														// Fresh obj
			for (j=0;j<cols;++j)  										// For each value
				o[json[0][j]]=json[i][j];								// Key value pair
			json[i]=o;													// Add to array
			}
		json=json.slice(1);												// Remove header
		mData=this.markerData;											// Point at markerdata
		if (mData) {													// If data
			for (i=0;i<mData.length;++i) {								// For each old maker
				if (mData[i].listener)									// If it has a listener
					google.maps.event.removeListener(mData[i].listener);	// Remove listener
				mData[i].obj.setMap(null);								// Remove marker
				}
			}
		this.markerData=mData=[];										// Clear data 
		}
	for (i=0;i<json.length;++i) {										// For each row
//https://docs.google.com/spreadsheet/ccc?key=0AohdE1_3ZElJdG9ETURycHJLMUF0WG94d2FHRGcxWUE&usp=sharing
		if (json[i].icon != "line")										// If not a line
			continue;													// Skip
		hasLines=true;													// Is a network map
		alpha=1;														// Assume full alpha
		width=2;														// Assume default width
		col="#990000";													// Assume default color
		if (json[i].width)												// If defined
			width=json[i].width;										// Use it
		if (json[i].color) {											// If defined
			col=json[i].color;											// Set color
			if (json[i].color.length > 7) {								// If has alpha
				col=json[i].color.substr(0,7);							// Isolate color
				alpha=parseInt(json[i].color.substr(7,2),16)/255;		// Isolate alpha
				}
			}
		flat=json[json[i].lat-2].lat;									// From lat	
		flon=json[json[i].lat-2].lon;									// From lon
		tlat=json[json[i].lon-2].lat;									// To lat	
		tlon=json[json[i].lon-2].lon;									// To lon
		path=new google.maps.Polyline({									// Polygon
    		path: [ new google.maps.LatLng(flat,flon),new google.maps.LatLng(tlat,tlon) ],
   			strokeColor: col,
    		strokeOpacity: alpha,
    		strokeWeight: width
  			});
		path.setMap(shivaLib.map);										// Add to map
		mData.push({ obj:path, title:"",listener:null });				// Add to array
		}
	for (i=0;i<json.length;++i) {										// For each row
		if (json[i].icon == "line")										// If a line
			continue;													// Skip
		mark=new google.maps.Marker();									// Create marker obj
		ops={};															// New obj
		if (json[i].title)												// If a title
			ops["title"]=json[i].title;									// Set title
		ops["position"]=new google.maps.LatLng(json[i].lat-0,json[i].lon-0); // Set position
		if (json[i].icon) {												// If has an icon
			if (hasLines)												// If a network map
				ops["icon"]={ url:json[i].icon, anchor: new google.maps.Point(8,8) };  // Center icon and add
			else 														// MarkerSet
				ops["icon"]=json[i].icon;								// Add icon
				}
		mark.setOptions(ops);											// Set options
		mark.setMap(shivaLib.map);										// Add to map
		list=google.maps.event.addListener(mark,'click', function(e) {	// Add listener
 			var j;
  			for (j=0;j<mData.length;++j)								// Look thru data	
 				if (mData[j].title == this.title)						// If titles match
 						break;											// Quit looking
    		shivaLib.SendShivaMessage("ShivaMap=marker",this.title+"|"+e.latLng.lat()+"|"+e.latLng.lng()+"|"+j);
			if (mData[j].desc) {										// If a desc
				shivaLib.mapsInfoWindow.setContent(mData[j].desc);		// Set new desc
	   			shivaLib.mapsInfoWindow.open(this.map,this);			// Open
				}
			});
		mData.push({ obj:mark, title:json[i].title,listener:list, desc:json[i].desc });	// Add to array
		}
}

SHIVA_Show.prototype.DrawLayerControlBox=function(items, show)			// DRAW LAYER CONTROLBOX
{
	var i,hasGotos=false,hasLayers=false;
	if (!show) {															// If not on
		$("#shivaMapControlDiv").remove();									// Remove it
		return;																// Quit
		}
	var l=$("#"+this.container).css("left").replace(/px/g,"");				// Get left
	var t=$("#"+this.container).css("top").replace(/px/g,"");				// Get top
	var h=$("#"+this.container).css("height").replace(/px/g,"");			// Get height
	if (t == "auto")	t=8;												// Must be a num
	if (l == "auto")	l=8;												// Must be a num
	if (this.options.shivaGroup == "Earth") {								// If earth, place top-right
		l=Number(l)+($("#"+this.container).css("width").replace(/px/g,"")-0)+8;	 // Right
		t=24;	h=0;														// Top
		}
	if ($("#shivaMapControlDiv").length == 0) {								// If no palette
		str="<div id='shivaMapControlDiv' style='position:absolute;left:"+l+"px;top:"+((t-0)+(h-0)-24)+"px'>";
		$("body").append("</div>"+str);										// Add palette to body
		$("#shivaMapControlDiv").addClass("rounded-corners").css("background-color","#eee").css('border',"1px solid #ccc");
		$("#shivaMapControlDiv").draggable();								// Make it draggable
		$("#shivaMapControlDiv").css("z-index",2001);						// Force on top
		}
	var str="<p style='text-shadow:1px 1px white' align='center'><b>&nbsp;&nbsp;Controls&nbsp;&nbsp;</b></p>";
	for (i=0;i<items.length;++i) {											// For each item
		if ((items[i].layerTitle) && (items[i].layerType != "GoTo")) 		// If titled and not a GoTo
			hasLayers=true;													// Draw layers header
		else if ((items[i].layerTitle) && (items[i].layerType == "GoTo")) 	// If titled and a GoTo
			hasGotos=true;													// Draw gotos header
		}
	if (this.options.shivaGroup == "Poster") {								// If a poster
			hasLayers=false;												// Draw layers header
			hasGotos=true;													// Draw gotos header
			}
	if (hasLayers) {														// If has layers, put up this header
		str="<p style='text-shadow:1px 1px white'><b>&nbsp;&nbsp;Show layer&nbsp;&nbsp;</b><br/>";
		for (i=0;i<items.length;++i) 
			if ((items[i].layerTitle) && (items[i].layerType != "GoTo")) {	// If titled and not a GoTo
				str+="&nbsp;<input type='checkbox' id='shcb"+i+"'";			// Add check
				if (items[i].visible == "true")								// If initially visible
					str+=" checked=checked ";								// Set checked
				str+=">"+items[i].layerTitle+"&nbsp;&nbsp;<br/>";			// Add label
				}
			str+="</p>";													// Close p	
			}
	if ((hasGotos) || (this.options.shivaGroup == "Poster")) {				// If gotos
		if (!hasLayers)  str="";											// If not layers, kill header
		str+="<p style='text-shadow:1px 1px white'><b>&nbsp;&nbsp;Go to:&nbsp;&nbsp;</b><br/>";
		str+="&nbsp;<input type='radio' name='gotos' id='shcr"+items.length+"' checked=checked>Start&nbsp;&nbsp;&nbsp;<br/>";		// Add home button
		for (i=0;i<items.length;++i) 										// For each item
			if ((items[i].layerTitle) && ((items[i].layerType == "GoTo") || (this.options.shivaGroup == "Poster"))) {	// If a GoTo
				str+="&nbsp;<input type='radio' name='gotos' id='shcr"+i+"'";	// Add check
				if (items[i].visible == "true")								// If initially visible
					str+=" checked=checked ";								// Set checked
				str+=">"+items[i].layerTitle+"&nbsp;&nbsp;&nbsp;<br/>";		// Add label
				}
		str+="</p>";														// Close p	
		}
	$("#shivaMapControlDiv").html(str+"<br/>");								// Add content	
	var _this=this;															// Local copy of this
	for (i=0;i<items.length;++i) {											// For each item
		if ((items[i].layerType == "GoTo") || (this.options.shivaGroup == "Poster"))	// If a goto
			$("#shcr"+i).click( function() { $.proxy(_this.SetLayer(this.id.substr(4),this.checked.toString(),"GoTo"),_this); } );  // Add handler
		else																// A regular layer
			$("#shcb"+i).click( function() { $.proxy(_this.SetLayer(this.id.substr(4),this.checked.toString(),"?"),_this); } );  	// Add handler
		}
	if (hasGotos)															// If has gotos
		$("#shcr"+items.length).click( function() { $.proxy(_this.SetLayer(this.id.substr(4),this.checked.toString(),"GoTo"),_this); } );  // Add handler
}

////////////// CUSTOM OVERLAY //////////////

if ((typeof(google) == "object") && (google.maps))							// If lib loaded
	ShivaCustomMapOverlay.prototype=new google.maps.OverlayView();			// Inherit from Google maps overlay class

function ShivaCustomMapOverlay(bounds, data)							// CUSTOM MAP OVERLAY
{
var swBound = new google.maps.LatLng(62.281819, -150.287132);
var neBound = new google.maps.LatLng(62.400471, -150.005608);
bounds = new google.maps.LatLngBounds(swBound, neBound);
	this.bounds_=bounds;													// Set bounds
  	this.data_= data;														// Drawing data
 	this.div_=null;															// Container div
  }

ShivaCustomMapOverlay.prototype.onAdd=function()						// ADD HANDLER
{
	var div=document.createElement('div');									// Layer div
	div.style.border="none";												
	div.style.borderWidth="0px";
	div.style.position="absolute";

var img = document.createElement("img");
img.src="http://www.viseyes.org/shiva/map.jpg";
img.style.width = "100%";
img.style.height = "100%";
div.appendChild(img);

	this.div_=div;															// Set div
	var panes=this.getPanes();												// Get list of panes
	panes.overlayLayer.appendChild(div);									// Add to overlay pane
}

ShivaCustomMapOverlay.prototype.draw=function()							// DRAW HANDLER
{
	var overlayProjection=this.getProjection();								// Get current proj
	var sw=overlayProjection.fromLatLngToDivPixel(this.bounds_.getSouthWest());  // Get corner
	var ne=overlayProjection.fromLatLngToDivPixel(this.bounds_.getNorthEast());	 // Get corner
	this.div_.style.left=sw.x+'px';											// Left
	this.div_.style.top=ne.y+'px';											// Top
	this.div_.style.width=(ne.x-sw.x)+'px';									// Width
	this.div_.style.height=(sw.y-ne.y)+'px';								// Hgt
}

ShivaCustomMapOverlay.prototype.onRemove=function()							// REMOVE HANDLER
{
	this.div_.parentNode.removeChild(this.div_);
  	this.div_=null;
}

////////////// LAND MAP ///////////////

SHIVA_Show.prototype.AddClearMapStyle=function(map)						// SET MAP STYLE
{
	var style=[
		{ featureType:"road", 	        elementType:"all",      stylers: [ { visibility:"off"} ] },
		{ featureType:"transit",        elementType:"all",      stylers: [ { visibility:"off"} ] },
		{ featureType:"poi",            elementType:"all",      stylers: [ { visibility:"off"} ] },
		{ featureType:"administrative", elementType:"all",      stylers: [ { visibility:"off"} ] },
		{ featureType:"landscape",      elementType:"all",      stylers: [ { visibility:"off"} ] },
		{ featureType:"all", 			elementType:"labels",   stylers: [ { visibility:"off"} ] },
		{ featureType:"all", 			elementType:"geometry", stylers: [ { lightness:-20}    ] }
		];
	var type=new google.maps.StyledMapType(style,{name:"Land"});
	map.mapTypes.set("LAND",type);
}

SHIVA_Show.prototype.AddBlankMapStyle=function(map)						// SET BLANK MAP STYLE
{
	var style=[
		{ featureType:"road", 	        elementType:"all",      stylers: [ { visibility:"off"} ] },
		{ featureType:"transit",        elementType:"all",      stylers: [ { visibility:"off"} ] },
		{ featureType:"poi",            elementType:"all",      stylers: [ { visibility:"off"} ] },
		{ featureType:"administrative", elementType:"all",      stylers: [ { visibility:"off"} ] },
		{ featureType:"landscape",      elementType:"all",      stylers: [ { visibility:"off"} ] },
		{ featureType:"water",      	elementType:"all",      stylers: [ { visibility:"off"} ] },
		{ featureType:"all", 			elementType:"labels",   stylers: [ { visibility:"off"} ] },
		{ featureType:"all", 			elementType:"geometry", stylers: [ { lightness:-20}    ] }
		];
	var type=new google.maps.StyledMapType(style,{name:"Blank"});
	map.mapTypes.set("BLANK",type);
}

///////////////////////////////////////////////////////////////////////////////////////////////
//  SHIVALIB MAPS/EARTH - DEPRECATED BY GOOGLE
///////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Show.prototype.DrawEarth=function(){} 
SHIVA_Show.prototype.EarthActions=function(msg)	{}
SHIVA_Show.prototype.EarthAddMarkers=function(json, mData) {}
///////////////////////////////////////////////////////////////////////////////////////////////
//  SHIVALIB VIDEO
///////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Show.prototype.DrawVideo=function() 										//	DRAW VIDEO
{
	var options=this.options;
//	options.dataSourceUrl="17853047"; 
//	options.dataSourceUrl="http://www.primaryaccess.org/music.mp3";	
//	options.dataSourceUrl="//www.kaltura.com/p/2003471/sp/0/playManifest/entryId/1_c7z7zuiv/format/url/flavorParamId/2003471/video.mp4";
	var con="#"+this.container;
	$(con).width(options.width);
	$(con).height(options.height);
	
	var o=this.playerOps={};													// Holds options
	o.playerAuto=options.autoplay;												// Autoplay?
	o.playerStart=o.playerEnd=0;												// Start/end
	o.playerVolume=options.volume;												// Default volume
	o.playerSpeed=1;
	o.playerAspect=.5625;
	o.playerControls="true";
	o.player=null;																// Holds player object
	o.playerNow=0;																// Current time in secs
	o.playerMode="empty";														// State of player
	o.playerType="";															// Type of player
	o.isMobile=false;															// Flag for mobile devices
	o.playerSource=options.dataSourceUrl;										// Source
	if (!o.playerSource)		
		return;																	// Quit if missing
	if (options.start)															// Start defined
		o.playerStart=shivaLib.TimecodeToSeconds(options.start);				// Convert tc -> secs
	if (options.end)															// End defined
		o.playerEnd=shivaLib.TimecodeToSeconds(options.start);					// Convert tc -> secs
	
	if (!isNaN(o.playerSource) || o.playerSource.match(/vimeo\.com/i)) {		// If Vimeo or simple number
			o.playerType="vimeo";												// Set type
			if (o.playerSource.match(/vimeo\.com\//i))							// A url or embed code
				o.playerSource=o.playerSource.match(/\d+/);						// Extract id
			this.RunPlayer("init");												// Init player
			}
	else if (o.playerSource.match(/\/\//i) && !o.playerSource.match(/youtu.*be/)) {	// If HTML5 and not a Youtube link
			if (this.player && (o.playerType == "html5")) {						// Player not active loaded
				if (this.player.currentSrc.indexOf(o.playerSource) == -1) {		// Different clip
					var base=o.playerSource.match(/(.*)\.[^.]+$/i)[1];			// Extract base
					if (o.playerSource.match(/\.mp3/i)) 						// If audio
						this.player.src=base+".mp3";							// MP3 Source
					else{														// VIDEO
						this.player.src=base+".mp4";							// MP4 Source
						this.player.src=base+".ogg";							// OGG Source
						this.player.src=base+".webm";							// WEBM Source
						}
					this.player.load();											// Load it
					}
				}
			else{
				o.playerType="html5";											// Set type
				this.RunPlayer("init");											// Init player
				}
			}
		else{																	// If YouTube
			if (o.playerSource.match(/v=/i)) 									// Direct link
				o.playerSource=o.playerSource.match(/v=(.+)/i)[1];				// Extract id
			else if (o.playerSource.match(/youtu\.be/i)) 						// Share link
				o.playerSource=o.playerSource.match(/youtu\.be\/(.+)/i)[1];		// Extract id

			o.playerType="youtube";												// Set type
			if (this.player) {													// Player active 
				if (!this.player.pauseVideo)	{								// If not YT player set
					if (YT.Player)												// If library is loaded
						this.RunPlayer("init");									// Re-init
					else{														// Load YT api
						var tag=document.createElement('script');				// Create script
						tag.src="//www.youtube.com/iframe_api";					// Set api url
						var firstScriptTag=document.getElementsByTagName('script')[0];	// Find 1st script
						firstScriptTag.parentNode.insertBefore(tag,firstScriptTag);		// Load
						}
					}
				else{															// Player is active
					if (this.player.getVideoUrl().indexOf(o.playerSource) == -1) // Different clip
						this.player.loadVideoById(o.playerSource);				// Reload clip
					else
						this.player.seekTo(o.playerStart);						// Seek to start point
					if (o.playerAuto == "true")									// If autoplay
						this.player.playVideo();								// Play video
					}
				}
			else{																// API not loaded yet
				var tag=document.createElement('script');						// Create script
				tag.src="//www.youtube.com/iframe_api";							// Set api url
				var firstScriptTag=document.getElementsByTagName('script')[0];	// Find 1st script
				firstScriptTag.parentNode.insertBefore(tag,firstScriptTag);		// Load
				}
			}
		shivaLib.RunPlayer("resize");											// Size player
		shivaLib.RunPlayer("volume",o.playerVolume);							// Set volume
		shivaLib.VideoNotes();													// Show notes if active
}																				// End DrawVideo() closure

function onYouTubeIframeAPIReady() 											// YOUTUBE PLAYER READY
{   
	shivaLib.RunPlayer("init");													// Init player								
}

SHIVA_Show.prototype.RunPlayer=function(what, param, param2)				//	DRAW VIDEO
{
		var i,str;
		var o=this.playerOps;													// Point at options
		var con="#"+this.container;
		if ((what == "play") || (what == "jump")) {								// Play/jump
			if ((o.playerMode == "empty") && o.isMobile)						// Mobiles need user to initiate touch before controlled play
				return;															// Quit
			o.playerMode="play";												// Set mode
 			if (param != undefined) {											// If playing to a time
				if ((""+param).match(/:/))										// In tc format
					param=TimecodeToSeconds(param);								// Convert to secs
				o.playerNow=param;												// Set cur time
				}	
			if (!this.player) {													// If no player yet
				return;															// Quit
				}
			if (o.playerType == "youtube") {									// If YouTube
				this.player.seekTo(o.playerNow,true);							// Cue
				if (o.playerMode == "play")			this.player.playVideo();	// Play
				else if (o.playerMode == "pause")	this.player.pauseVideo();	// Pause
				}
			else if (o.playerType == "vimeo") {									// If Vimeo
				
				this.player.contentWindow.postMessage("{\"method\":\"seekTo\",\"value\":\""+o.playerNow+"\"}","*")
				if (o.playerMode == "play")										// Play
					this.player.contentWindow.postMessage("{\"method\":\"play\"}","*");	// Send
				if (o.playerMode == "pause")									// Pause
					this.player.contentWindow.postMessage("{\"method\":\"pause\"}","*");	// Send
 				}
			else if (o.playerType == "html5") {									// If HTML5
				if (param != undefined) 										// If playing to a time
					this.player.currentTime=o.playerNow;						// Cue
				if (o.playerMode == "play")  	this.player.play(); 			// Play
				if (o.playerMode == "pause")	this.player.pause();			// Pause
				}
			if (o.playerMode == "play")	o.playerStarted=o.playerNow;			// Save start point
			
			}
		else if ((what == "scrub") || (what == "seek"))  {						// Scrub
			if ((o.playerMode == "empty") && o.isMobile)						// Mobiles need user to initiate touch before controlled play
				return;															// Quit
			o.playerNow=param;													// Set now
			if (!this.player) {													// If no player yet
				return;															// Quit
				}
			if (o.playerType == "youtube") 										// If YouTube
				this.player.seekTo(o.playerNow,true);							// Cue
			else if (o.playerType == "vimeo") 									// If Vimeo
				this.player.contentWindow.postMessage("{\"method\":\"seekTo\",\"value\":\""+o.playerNow+"\"}","*");
			else if (o.playerType == "html5") 									// If HTML5
				this.player.currentTime=o.playerNow;							// Cue
				}
		else if (what == "pause") {												// Pause
			$("#playBut").attr("src","images/playbut.gif");						// Show pause but
			o.playerMode="pause";												// Set mode
			if (!this.player)	return;											// If no player yet, quit
			if (o.playerType == "youtube") 										// If YouTube
				this.player.pauseVideo();										// Pause
			else if (o.playerType == "vimeo") 									// If Vimeo
				this.player.contentWindow.postMessage("{\"method\":\"pause\"}","*");	// Send
 			else if (o.playerType == "html5") 									// If HTML5
				this.player.pause(); 											// Pause
			}
		else if (what == "time") {												// Time
			if (!this.player)	return;											// If no player yet, quit
			if (o.playerType == "youtube") 										// If YouTube
				return this.player.getCurrentTime();							// Return time			
			else if (o.playerType == "vimeo") 									// If Vimeo
				return o.playerCurTime;											// Return time			
			else if (o.playerType == "html5") 									// If HTML5
				return this.player.currentTime;									// Return time			
			}

		else if (what == "volume") {											// Volume
			if (!this.player)	return;											// If no player yet, quit
			if (o.playerType == "youtube") 										// If YouTube
				this.player.setVolume(o.playerVolume-0);						// Set it
			else if (o.playerType == "vimeo") 									// If Vimeo
				this.player.contentWindow.postMessage("{\"method\":\"setVolume\",\"value\":\""+o.playerVolume/100+"\"}","*"); // Send
			else if (o.playerType == "html5") 									// If HTML5
				this.player.volume=o.playerVolume/100;							// Set
			}
		else if (what == "speed") {												// Speed
			if (!this.player)	return;											// If no player yet, quit
			s=Math.max(.25,o.playerSpeed/50);									// Speed set .25 to 2
			if (o.playerType == "youtube") 										// If initted YouTube
				this.player.setPlaybackRate(s);									// Set speed
			else if (o.playerType == "html5") 									// If HTML5
				this.player.playbackRate=s;										// Set speed
			}
		else if (what == "resize") {											// Resize
			if (!this.player)	return;											// If no player yet, quit
			var w=$(con).width();												// Get width
			$("#vplayer").width(w);												// Set width
			$("#vplayer").height(w*o.playerAspect);								// Set height
			}
		else if (what == "ready") {												// When ready
			shivaLib.RunPlayer("pause");										// Pause
			shivaLib.RunPlayer("resize");										// Size player
			if (o.playerAuto == "true")	{										// If autoplay
				shivaLib.RunPlayer("play",o.playerStart);						// Seek
				}
			else if (o.playerStart) {											// Normal pause start
				shivaLib.RunPlayer("scrub",o.playerStart);						// Seek
				shivaLib.RunPlayer("pause");									// Pause
				}
	 		shivaLib.SendReadyMessage(true);									// Ready										
			}

		else if (what == "init") {												// Init player
			if (o.playerType == "youtube") {									// If YouTube
				$(con).html("<div id='vplayer'></div>");						// Add holder div
	       		var pc=o.playerControls == "true" ? 1 : 0;						// Set player controls?
	       		this.player=new YT.Player("vplayer", {							// Init player
					playerVars:{ modestbranding:1, controls:pc, 				// Settings	
						disablekb:1, rel:0, showinfo:0, html5:1, autoplay:1 },
	          		videoId: o.playerSource,									// Set source
	         	 	events:{													// Add event handlers
	            		"onReady": function(s) { shivaLib.RunPlayer("ready") }	// When ready
		 	   			}});
					}
			else if (o.playerType == "vimeo") {									// If Vimeo
				str="<iframe id='vplayer' src='//player.vimeo.com/video/";		// Iframe start
				str+=o.playerSource;											// Add source
				str+="?api=1&player_id=vplayer' width='500' height='281' frameborder='0' webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>";
				$(con).html(str);												// Add vimeo iframe
		       	this.player=$("#vplayer")[0];										// Point to iframe
				}
			else if (o.playerType == "html5") {									// If HTML5
 				$(con).html("");												// Add video tag
				var base=o.playerSource.match(/(.*)\.[^.]+$/i)[1];				// Extract base
				str="<video id='vplayer' width='100%' height='100%'";			// Video tag
				if ((o.playerControls == "true") || o.isMobile)					// If has controls or mobile
					str+= " controls";											// Add native controls to player
				str+=">";														// Close tag
				if (o.playerSource.match(/\.mp3/i)) {							// If audio
					str+="<source src='"+base+".mp3'  type='audio/mp3'>";		// MP3 Source
					}
				else{															// VIDEO
					str+="<source src='"+base+".mp4'  type='video/mp4'>";		// MP4 Source
					str+="<source src='"+base+".ogg'  type='video/ogg'>";		// OGG Source
					str+="<source src='"+base+".webm' type='video/webm'>";		// WEBM Source
					}
				str+="</video>"
				$(con).html(str);												// Add video tag
  				var myVid=document.getElementById("vplayer");					// Point ar player	
 				
 				
 				myVid.onloadstart=function() {									// When loaded
 					shivaLib.player=$("#vplayer")[0];							// Point to player
 					shivaLib.RunPlayer("ready");								// Set up player		
					};
								
				myVid.oncanplay=function() {									// When ready
       				o.playerAspect=shivaLib.player.videoHeight/shivaLib.player.videoWidth;	// Set aspect 				
 					};

 				myVid.onended= function() {										// When done
  					shivaLib.RunPlayer("pause");								// Pause
 					};

				myVid.onplay= function() {										// When playing
					$("#playBut").attr("src","images/pausebut.gif");			// Show pause but
 						o.playerMode="play";									// Set mode
					o.playerStarted=o.playerNow;								// Save start point
					};

				myVid.onpause= function() {										// When paused
					$("#playBut").attr("src","images/playbut.gif");				// Show play but
 						o.playerMode="pause";									// Set mode
   					};
  		 		
 			  	myVid.addEventListener("loadstart",myVid.onloadstart);	 		// Add listener for safari
 		 		myVid.addEventListener("canplay",myVid.oncanplay);	 			// Add listener for safari
			  	myVid.addEventListener("ended",myVid.onended);	 				// Add listener for safari
 			  	myVid.addEventListener("play",myVid.onplay);	 				// Add listener for safari
 			  	myVid.addEventListener("pause",myVid.onpause);	 				// Add listener for safari
 	    		}
			}																	// End init
 	}																			// End closure
   
SHIVA_Show.prototype.VideoDuration=function()							//	GET VIDEO DURATION
{
	var o=this.playerOps;														// Point at options
	if (!this.player)															// If not initted yet	
		return -1;																// No time
	if (o.playerType == "html5")  												// If HTML5 
		return document.getElementById("vplayer").duration;						// Return duration											
	else if (o.playerType == "vimeo")											// Vimeo
		return o.playerTRT-0;													// Return duration		
	else if (o.playerType == "youtube") 										// If YouTube
		return this.player.getDuration();										// Return duration	
	return -1;																	// No time
}
  
SHIVA_Show.prototype.TimecodeToSeconds=function(timecode) 				// CONVERT TIMECODE TO SECONDS
{
	var h=0,m=0;
	var v=(""+timecode).split(":");											// Split by colons
	var s=v[0]																// Add them
 	if (v.length == 2)														// Just minutes, seconds
		s=v[1],m=v[0];														// Add them
	else if (v.length == 3)													// Hours, minutes, seconds
		s=v[2],m=v[1],h=v[0];												// Add them
	return(Number(h*3600)+Number(m*60)+Number(s));							// Convert
}

SHIVA_Show.prototype.SecondsToTimecode=function(secs) 					// CONVERT SECONDS TO TIMECODE
{
	var str="",n;
	n=Math.floor(secs/3600);												// Get hours
	if (n) str+=n+":";														// Add to tc
	n=Math.floor(secs/60);													// Get mins
	if (n < 10) str+="0";													// Add leading 0
	str+=n+":";																// Add to tc
	n=Math.floor(secs%60);													// Get secs
	if (n < 10) str+="0";													// Add leading 0
	str+=n;																	// Add to tc
	return str;																// Return timecode			
}	

SHIVA_Show.prototype.VideoNotes=function() 								//	ADD NOTES TO VIDEO
{
	var i,str,v;
	$("#shivaNotesDiv").remove();											// Clear it
	if ((!this.options.ntext) && (this.options.vnotes != "true")) 			// If not visible
		return;																// Turn it off
	var ts="color:#009900;cursor:pointer";									// Timecode style
	var ns="font-size:small;border:none;background:none;width:100%;padding:0px;margin:0px"; // Note style	
	var con=$("#"+this.container);											// Point at video player container	
	str="<div id='shivaNotesDiv' style='position:absolute;padding:8px;overflow-y:auto;";	// Div
	str+="width:500px;height:"+(con.height()-16)+"px;";						// Set sizing
	str+="background-color:#f8f8f8;border:1px solid #ccc;box-shadow:4px 4px 8px #ccc;";			// Set coloring
	var top=con.offset().top;												// Get top
	var left=con.offset().left+con.width()+16;								// Get left
	str+="top:"+top+"px;left:"+left+"px;'>";								// Set position
	str+="<table id='shivaNotesTbl' width='100%'>";							// Table
	str+="<div style='text-align:center;font-size:large;'><img src='shivalogo16.png' style='vertical-align:-2px'><b> SHIVA Notes</b></div><hr>";
	str+="<div style='position:absolute;top:-2px;left:0px;width:100%;text-align:right'><br/>Find: <input type='input' id='shivaNotesSearch' style='height:12px;width:60px;font-size:x-small;padding:0px;margin:0px'/>&nbsp; &nbsp;</div>"
	str+="<tr><td width='38' id='ntc-0' style='"+ts+"'>Type:</td><td><input id='ntx-0' type='input' style='"+ns+"'/></td></tr>";
	str+="</table>";														// End

	if (this.options.vnotes == "true") {									// If notes enabled
		str+="<div style='text-align:right'><br/>________________________________<br/><br/>Pause video while typing?<input type='checkbox' id='notesPause' style='height:11px'>";
		str+="<br/>Save notes: <img src='savedot.gif' id='shivaNotesSave' title='Save notes' width='15' style='vertical-align:bottom'>";
		}
	$('body').append(str+"</div>");											// Add to dom								

	if (this.options.ntext) {												// If notes
		v=this.options.ntext.split("|");									// Divide into lines
		for (i=0;i<v.length;++i) {											// For each line
			if (!v[i])	continue;											// Ignore blanks
			str="<tr><td id='ntc-"+i+"' style='"+ts+"'>Type:</td><td><input id='ntx-"+i+"' type='input' style='"+ns+"'/></td></tr>";
			if (i)															// 1st row is already there
				$("#shivaNotesTbl").append(str);							// Add row
			$("#ntc-"+i).text(v[i].substring(0,5));							// Set timecode	
			$("#ntx-"+i).val(v[i].substr(5));								// Set text	

			$("#ntc-"+i).click(function(e){									// Add click handler
				   	var time=$("#"+e.target.id).text();						// Get time
					if (e.shiftKey)											// If shift key pressed
						$("#"+e.target.id).text(shivaLib.SecondsToTimecode(shivaLib.VideoTime()));	// Set new time
					else
						shivaLib.RunPlayer("scrub",shivaLib.TimecodeToSeconds(time));	// Cue player
					});
			$("#ntc-"+i).dblclick(function(e){								// Add d-click handler
				   	var time=$("#"+e.target.id).text();						// Get time
					shivaLib.RunPlayer("play",time);						// Play
					});
			}
		}
	
	$("#shivaNotesDiv").draggable();										// Make draggable
	$("#ntx-0").focus();													// Focus on first one
	
	$("#shivaNotesSearch").on("keydown", function(e) {						// Handle filter
				var n=$("#shivaNotesTbl tr").length;						// Number of rows
				var patt=new RegExp($("#shivaNotesSearch").val());			// Pattern to find
				for (var i=0;i<n;++i) {										// For each row
					$("#ntx-"+i).css("color","black");						// Clear it
					if (($("#ntx-"+i).val()) && ($("#ntx-"+i).val().match(patt))) // If in there
						$("#ntx-"+i).css("color","red");					// Highlight it
					}
				});			
		
	$("#shivaNotesSave").on("click", function(e) {							// Handle save
				var str="";
				var n=$("#shivaNotesTbl tr").length;						// Number of rows
				for (var i=0;i<n;++i) 										// For each row
					if ($("#ntx-"+i).val())									// If something there
						str+=$("#ntc-"+i).text()+"\t"+$("#ntx-"+i).val()+"\n";	// Add row
	 			 	window.prompt ("To copy your Notes to the clipboard:\nType Ctrl+C or Cmd+C and click  OK button.",str);	// Copy to clipboard
				});			

	

	$("#shivaNotesTbl").on("keydown", function(e) {							// Handle key down
		var cap=false;														// Don't cap
		var rowNum=e.target.id.split("-")[1];								// Get rownum
		if ($("#"+e.target.id).val().length > 80)							// If past limit
			cap=true;														// Let's cap line
		if ((e.keyCode == 13) || (cap)) {									// Enter on capping a line
			var ts="color:#009900;cursor:pointer";							// Timecode style
			var ns="font-size:small;border:none;background:none;width:100%;padding:0px;margin:0px";	// Note style	
			var id=$("#shivaNotesTbl tr").length;							// If of next row
			var str="<tr><td id='ntc-"+id+"' style='"+ts+"'>Type:</td><td><input id='ntx-"+id+"' type='input' style='"+ns+"'/></td></tr>";
			$("#shivaNotesTbl").append(str);								// Add row
			$("#ntx-"+id).focus();											// Focus on new one
			if ($("#notesPause").prop('checked') && !cap) 					// If checked and not capped
				shivaLib.RunPlayer("play",shivaLib.RunPlayer("time"));		// Play
			if (cap)														// If line is capped
				$("#ntc-"+id).text($("#ntc-"+rowNum).text());				// Set to same time
			}
		else if ((e.keyCode == 8) || (e.keyCode == 46)) {					// Delete
			var id="#"+e.target.id;											// Get id
			if ((!$(id).val()) && (id != "#ntx-0")) {						// No more chars left sand not 1st row
				id="ntx-"+(id.substr(5)-1);									// Last row										
				$("#"+id).focus();											// Focus there to prevent page back action
				$("#"+e.target.id).parent().parent().remove();				// Delete
				}			
			}
		else if (!$("#ntx-"+rowNum).val()) {								// A key and nothing in the field yet
			$("#ntc-"+rowNum).text(shivaLib.SecondsToTimecode(shivaLib.RunPlayer("time")));	// Set new time
			if ($("#notesPause").prop('checked')) 							// If checked
				shivaLib.RunPlayer("pause");								// Pause
			
			$("#ntc-"+rowNum).click(function(e){							// Add click handler
				   	var time=$("#"+e.target.id).text();						// Get time
					if (e.shiftKey)											// If shift key pressed
						$("#"+e.target.id).text(shivaLib.SecondsToTimecode(shivaLib.RunPlayer("time")));	// Set new time
					else
						shivaLib.RunPlayer("scrub",shivaLib.TimecodeToSeconds(time));	// Cue player
					});
			
			$("#ntc-"+rowNum).dblclick(function(e){							// Add  d-click handler
				   	var time=$("#"+e.target.id).text();						// Get time
					shivaLib.RunPlayer("play",time);						// Play
					});
			}
		});
};
///////////////////////////////////////////////////////////////////////////////////////////////
//  SHIVALIB SUBWAY
///////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Show.prototype.DrawSubway=function(oldItems) 											//	DRAW SUBWAY
{
	var options=this.options;
	var container=this.container;
	var con="#"+container;
	var g=this.g=new SHIVA_Graphics();
	var items=new Array();
	if (oldItems)
		items=oldItems;
	else
	   	for (var key in options) {
			if (key.indexOf("item-") != -1) {
				var o=new Object;
				var v=options[key].split(';');
				for (i=0;i<v.length;++i)
					o[v[i].split(':')[0]]=v[i].split(':')[1].replace(/\^/g,"&").replace(/~/g,"=").replace(/\`/g,":");
				items.push(o);
				}
			}
	this.items=items;
	$(con).html("");
	g.CreateCanvas("subwayCanvas",container);
	var ctx=$("#subwayCanvas")[0].getContext('2d');
	$("#subwayCanvas").attr("width",options.cols*options.gridSize+30);
	$("#subwayCanvas").attr("height",options.rows*options.gridSize+30);
	$("#propInput8").val(options.cols*options.gridSize+30);
	$("#propInput7").val(options.rows*options.gridSize+30);
	$("#textLayer").remove();
	$(con).append("<div id='textLayer'></div>");
	ctx.clearRect(0,0,1000,1000);
	DrawBack();
	DrawTracks();
	DrawStations();
	DrawLegend();
	this.SendReadyMessage(true);											
	
	function DrawLegend()
	{
		var i,str;
		var x=Number(options.gridSize*5)+8;
		var y=Number(options.gridSize*options.rows);
		for (i=0;i<items.length;++i) 
			if (items[i].title) 
				y-=16;
		for (i=0;i<items.length;++i) 
			if ((items[i].title) && (items[i].visible != "false")) {
				g.DrawLine(ctx,"#"+items[i].lineCol,1,options.gridSize,y,x-8,y,items[i].lineWid);								
				str="<div style='position:absolute;left:"+x+"px;top:"+(y-6)+"px'>"+items[i].title;
				$("#textLayer").append(str+"</div>");
				y+=16;
				}
	}
	
	function DrawTracks()
	{
		var i,j,v,pts
		var xs=new Array();
		var ys=new Array();
		var gw=options.gridSize;
		for (i=0;i<items.length;++i) {
			if (items[i].visible == "false")
				continue;
			xs=[];	ys=[]
			if (!items[i].coords)
				continue;
			pts=items[i].coords.split(",");
			for (j=0;j<pts.length;++j) {
				v=pts[j].split(".");
				xs.push(v[0]*gw);	
				ys.push(v[1]*gw);	
				}
			g.DrawPolygon(ctx,-1,1,xs,ys,"#"+items[i].lineCol,items[i].lineWid,true);
			}
	}

	function DrawStations()
	{
		var pts,tp,align,link="",lab="";
		var i,j,x,y,y2,x2,w,w2,style,str,span;
		if (!options.stations)
			return;
		pts=options.stations.split("~");
		for (j=0;j<pts.length;++j) {
			v=pts[j].split("`");
			x2=x=Number(v[0])*Number(options.gridSize);
			y2=y=Number(v[1])*Number(options.gridSize);
			tp=v[2];
			style=v[3];
			lab=v[4];
			link=v[5]
			w=8;
			w2=w/2;
			if (style == "S")
				g.DrawCircle(ctx,"#fff",1,x,y,w,"#000",w2);								
			else if (style == "s")
				g.DrawCircle(ctx,"#fff",1,x,y,w*.7,"#000",w/4);								
			else if (style.charAt(0)== "i") {
				span=Number(style.charAt(1));
				x2=x+Number(span*options.gridSize);
				g.DrawCircle(ctx,"#fff",1,x,y,w,"#000",w2);				
				g.DrawCircle(ctx,"#fff",1,x2,y,w,"#000",w2);								
				g.DrawLine(ctx,"#fff",1,x,y,x2,y,w/2);								
				g.DrawLine(ctx,"#000",1,x+Number(w),y-w2,x2-w,y-w2,w2);								
				g.DrawLine(ctx,"#000",1,x+Number(w),y+w2,x2-w,y+w2,w2);								
				}
			else if (style.charAt(0)== "I") {
				span=Number(style.charAt(1));
				y2=y+Number(span*options.gridSize);
				g.DrawCircle(ctx,"#fff",1,x,y,w,"#000",w2);				
				g.DrawCircle(ctx,"#fff",1,x,y2,w,"#000",w2);								
				g.DrawLine(ctx,"#fff",1,x,y,x,y2,w/2);								
				g.DrawLine(ctx,"#000",1,x-w2,y+Number(w),x-w2,y2-w,w/2);								
				g.DrawLine(ctx,"#000",1,x+w2,y+Number(w),x+w2,y2-w,w/2);								
				}
			w=Number(options.gridSize);
			if (tp == "r") {	x2=x2+w-w2;				align='left';		y2=y+((y2-y)/2); }
			if (tp == "l") {	x2=x-200-w+w2;			align='right';		y2=y+((y2-y)/2); }
			if (tp == "t") {	x2-=((x2-x)/2)+100;		align='center';		y2=y-w+w2; 		 }
			if (tp == "b") {	x2-=((x2-x)/2)+100;		align='center';		y2=y2+w-w2; 	 }
			str="<div id='shivaSubtx"+j+"' style='position:absolute;color:#000;width:200px;left:"+x2+"px;top:"+(y2-6)+"px;text-align:"+align+"'>";
			if (link)
				str+="<a href='"+link+"' target='_blank' style='color:#000;text-decoration: none;'>"+lab+"</a>";
			else
				str+=lab;
			$("#textLayer").append(str+"</div>");
			$("#shivaSubtx"+j).click(function(){shivaLib.SendShivaMessage("ShivaSubway=click",this.id.substr(10))});
			if (tp == "t") 	
				$("#shivaSubtx"+j).css("top",(y2-$("#shivaSubtx"+j).height()+4)+"px");
			else if ((tp == "r") || (tp == "l")) 	
				$("#shivaSubtx"+j).css("top",(y2-$("#shivaSubtx"+j).height()/2)+"px");
			}
	}

	function DrawBack()
	{
		var gridSize=options.gridSize;
		var numRows=options.rows;
		var numCols=options.cols;
		ctx.textAlign="center";		
		if (!options.showGrid) {
			g.DrawRoundBar(ctx,"#"+options.backCol,1,0,0,numCols*gridSize,numRows*gridSize,options.backCorner);
			return;	
			}
		for (i=1;i<=numCols;++i) {
			g.DrawLine(ctx,"#cccccc",1,i*gridSize,gridSize,i*gridSize,numRows*gridSize,.5);
			g.DrawText(ctx,i,(i*gridSize),gridSize/2,"color=#999");
			}
		for (i=1;i<=numRows;++i) {
			g.DrawLine(ctx,"#cccccc",1,gridSize,i*gridSize,numCols*gridSize,i*gridSize,.5);
			g.DrawText(ctx,i,gridSize/2,(i*gridSize)+3,"color=#999");
			}
		}
}

///////////////////////////////////////////////////////////////////////////////////////////////
//  SHIVALIB NETWORK
///////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Show.prototype.DrawNetwork=function() 											//	DRAW NETWORK
{
	if (!this.jit)
		this.jit=new VIZ(this.container);
	this.jit.Draw(this.options);
}

function VIZ(container) 
{
	this.chartType = "rgraph";
	this.container = container; 
	this.config = new Object();	
	this.data = new Array();
	this.Config = {
		rgraph:	{
			background: { CanvasStyles: {}	},
			Navigation: { enable: true, panning: true },
			Node: 		{ CanvasStyles:{} },		
			Edge: 		{ overridable: true, CanvasStyles: {} },
			Label: 		{ overridable: true, type: 'HTML'	},
			Tips: 		{ enable: true },
			Events: 	{ enable: true,	enableForEdges: true },
			NodeStyles: { enable: true },
			CanvasStyles: {	}
			},
		forcedir: {
			iterations: 200,
			background: { CanvasStyles: {}, numberOfCircles: 0 },
			Navigation: { enable: true,	panning: 'avoid nodes' },
			Node: 		{ CanvasStyles: {} },		
			Edge: 		{ overridable: true, CanvasStyles: {} },
			Label: 		{ overridable: true, type: 'HTML' },
			Tips: 		{ enable: true	},
			Events: 	{ enable: true,	enableForEdges: true },
			NodeStyles: { enable: true },
			CanvasStyles: {}
			},
		hypertree: {
			background: { CanvasStyles: {}, numberOfCircles: 0 },
			Navigation: { enable: true, panning: true },		
			Node: 		{ CanvasStyles: {}, transform: false },
			Edge: 		{ overridable: true, CanvasStyles: {} },
			Label: 		{ overridable: true, type: 'HTML'	},
			Tips:		{ enable: true	},
			Events: 	{ enable: true,	enableForEdges: true },
			NodeStyles: { enable: true	},
			CanvasStyles: {}
			}	
	}
}

SHIVA_Show.prototype.NetworkActions=function(msg)								// REACT TO SHIVA ACTION MESSAGE
{
	var v=msg.split("|");															// Split msg into parts
	if (v[0] == "ShivaAct=resize") {  												// RESIZE
		if (v[1] == "100") 															// If forcing 100%
			shivaLib.options.width=shivaLib.options.height="100%";					// Set values
		shivaLib.DrawNetwork();														// Redraw
	}
}

VIZ.prototype.Draw=function(json) 
{
	var k,key,val;
	this.chartType=json.chartType;		
	for (key in json) {
		val=json[key];
		if (key.match(/_(fillStyle|strokeStyle|color)/)) 	// It would be nice to inspect props here ...
			val = '#' + val;
		if (val == "true") 																
			val=true;
		else if (val == 'false') 													
			val=false;
		
		k=key.split("_"); // Split key name into its implicit parts (hopefully none has more than 3)
		if (k.length == 2) 				
			this.Config[this.chartType][k[0]][k[1]] = val;
		else if (k.length == 3)
			this.Config[this.chartType][k[0]][k[1]][k[2]] = val;
		else
			this.Config[this.chartType][key] = val;
		
		}
	shivaLib.GetSpreadsheet(json.dataSourceUrl,false,null,$.proxy(this.Spreadsheet2Jit,this));
	this.config=this.Config[this.chartType]; 
	$("#"+this.container).height(this.config.height);
	$("#"+this.container).width(this.config.width);
	$jit.id(this.container).style.backgroundColor=this.config.background.CanvasStyles.fillStyle;
}

VIZ.prototype.Spreadsheet2Jit=function(data)
{	
	var i,j,v,n;
	var ROWS=[];
	var numCols=0;
	var numRows=data.length;									// Number of rows
	for (i=0;i<numRows;i++) {									// For each row
		ROWS[i]=[];												// Init sub-array
		n=data[i].length;										// Get row length
		numCols=Math.max(numCols,n);							// Expand to longest
		for (j=0;j<n;j++) {										// For each col
			v=data[i][j];										// Get value
			if (isNaN(v)) 										// If not a number
				 v=v.replace(/(^\s+|\s+$)/g,"");				// Remove padding (crucial!)
			ROWS[i][j]=v;										// Set in array of arrays
			}
	}
	// Grab the classes for interpolating into the JIT json
	// This allows overriding node and link properties from within the spreadsheet!
	var CLASSES = {node: {}, link: {}};
	for (var i = 0; i < numRows; i++) {				
		var rType = ROWS[i][0];
		if (!rType.match(/-class/)) continue;
		var c = ROWS[i][1];			// Class
		var k = ROWS[i][2];			// Property (Key)
		var v = ROWS[i][3]; 		// Value
		if (rType.match(/node-class/)) {
			if (CLASSES.node[c] == undefined) CLASSES.node[c] = {};
			CLASSES.node[c][k] = v;
		} else if (rType.match(/link-class/)) {
			if (CLASSES.link[c] == undefined) CLASSES.link[c] = {};
			CLASSES.link[c][k] = v;
		}
	}
		
	var JIT = {};		
	for (var i = 0; i < numRows; i++) {
		var rType 	= ROWS[i][0];  
		if (rType.match(/-class/)) continue;	
		var nodeID 	= ROWS[i][1];
		
		if (JIT[nodeID] == undefined) {
			JIT[nodeID] 						= {};
			JIT[nodeID].id					= nodeID;
			JIT[nodeID].data 				= {}; // For properties
			JIT[nodeID].adjacencies = []; // For links (note: tree viz types want 'children' here)
		}
		
		if (rType.match(/^\s*node\s*$/)) {
			
			if (ROWS[i][2] && !ROWS[i][2].match(/^\s*$/)) {
				JIT[nodeID].name 	= ROWS[i][2]; 		
			} else {
				JIT[nodeID].name 	= nodeID; 
			}
			
			var nodeClass = ROWS[i][3];
			JIT[nodeID].data.className = nodeClass;
			for (var k in CLASSES.node[nodeClass]) {
				JIT[nodeID].data['$' + k] = CLASSES.node[nodeClass][k];
			}

			if (numCols > 4) {
				JIT[nodeID].data.tip = ROWS[i][4]; 	
			}
			
		} else if (rType.match(/^\s*link\s*$/)) {
			var linkClass = ROWS[i][2];
			var nodeTo 		= ROWS[i][3];
			var linkObject = {'nodeTo': nodeTo, 'data': {'class': linkClass}};
			for (var k in CLASSES.link[linkClass]) {
				linkObject.data['$' + k] = CLASSES.link[linkClass][k];
			}
			JIT[nodeID].adjacencies.push(linkObject);  
		}
		
	}		
	shivaLib.SendReadyMessage(true);					// Send ready msg to drupal manager
	this.data = [];															// Clear data array
	for (var x in JIT) this.data.push(JIT[x]);	// Turn into array
		$jit.id(this.container).innerHTML = ''; 	// Empty div										
	this.Init[this.chartType](this); 						// Draw it			
}

VIZ.prototype.Init = {
	rgraph:	function (obj) {
		var data 		= obj.data;
		var config 	= obj.Config[obj.chartType];
		var div 		= obj.container;
		config.injectInto = div;							// Canvas level params set at run time

		var divElement = document.getElementById(div);
		config.width = divElement.offsetWidth; // - 50;
		config.height = divElement.offsetHeight; // - 50;
		            
		config.onCreateLabel = function(domElement, node) {
			domElement.className = 'shiva-node-label';
			domElement.innerHTML = node.name;
			domElement.onclick = function(){
				shivaLib.SendShivaMessage("ShivaNetwork=click",node.id);				
				rgraph.onClick(node.id,{});
			};
			var style = domElement.style;
			style.fontSize 		= config.Label.size + 'px';
			style.color 		= config.Label.color;
			style.fontWeight 	= config.Label.style;
			style.fontStyle 	= config.Label.style;
			style.fontFamily 	= config.Label.family;
			style.textAlign 	= config.Label.textAlign;
			style.cursor = 'crosshair';	
			style.display = '';

		};
		
		config.onPlaceLabel = function(domElement, node) { };
		
		config.Tips.onShow = function(tip, node) {
			var count = 0;
			node.eachAdjacency(function() { count++; });
			if (node.data.tip) {
				tip.innerHTML = "<div class='tip-title'>" + node.data.tip + "</div>";
			} else {
				tip.innerHTML = "<div class='tip-title'>" + node.name + " is a <b>" + node.data.className + "</b> with " + count + " connections.</div>";
			}
			tip.style.color = 'black';
			tip.style.fontFamily = config.Label.family;
			tip.style.backgroundColor = 'white';
			tip.style.padding = '1em';
			tip.style.maxWidth = '200px';
			tip.style.fontSize = '10pt';
			tip.style.border = '1px solid black';
			tip.style.opacity = '0.99';
			tip.style.boxShadow = '#555 2px 2px 8px';
		};
		 		
		var rgraph = new $jit.RGraph(config);		

		rgraph.loadJSON(data);
		
		rgraph.graph.eachNode(function(n) {
			var pos = n.getPos();
			pos.setc(-200, -200);
		});
		
		rgraph.compute('end');
		
		rgraph.fx.animate({
			modes:['polar'],
			duration: 2000
		});
		
		var canvasConfig = rgraph.canvas.getConfig();	
	},
	forcedir: function (obj) {
		var jsonData 		= obj.data;
		var config			= obj.Config[obj.chartType];
		var div 			= obj.container;
		config.injectInto = div; 
	
		config.onCreateLabel = function(domElement, node){
			var style = domElement.style;
			domElement.className = 'shiva-node-label';
			style.fontSize 		= config.Label.size + 'px';
			style.color 		= config.Label.color;
			style.fontWeight 	= config.Label.style;
			style.fontStyle 	= config.Label.style;
			style.fontFamily 	= config.Label.family;
			style.textAlign 	= config.Label.textAlign;
			style.cursor = 'crosshair';
			domElement.innerHTML = node.name;
			var left = parseInt(style.left);
			var top = parseInt(style.top);
			var w = domElement.offsetWidth;
			style.left = (left - w / 2) + 'px';
			style.top = (top + 10) + 'px';
			style.display = '';
			domElement.onclick = function(){
				shivaLib.SendShivaMessage("ShivaNetwork=click",node.id);				
			};
		};

		config.onPlaceLabel = function(domElement, node) { };
		
		config.onMouseEnter = function() {
			fd.canvas.getElement().style.cursor = 'move';
		};
		config.onMouseLeave = function() {
			fd.canvas.getElement().style.cursor = '';
		};
		config.onDragMove = function(node, eventInfo, e) {
			var pos = eventInfo.getPos();
			node.pos.setc(pos.x, pos.y);
			fd.plot();
		};
		config.onTouchMove = function(node, eventInfo, e) {
			$jit.util.event.stop(e); //stop default touchmove event
			this.onDragMove(node, eventInfo, e);
		};
		
		config.Tips.onShow = function(tip, node) {
			var count = 0;
			node.eachAdjacency(function() { count++; });
			if (node.data.tip) {
				tip.innerHTML = "<div class='tip-title'>" + node.data.tip + "</div>";
			} else {
				tip.innerHTML = "<div class='tip-title'>" + node.name + " is a <b>" + node.data.className + "</b> with " + count + " connections.</div>";
			}
			tip.style.color = 'black';
			tip.style.fontFamily = config.Label.family;
			tip.style.backgroundColor = 'white';
			tip.style.padding = '1em';
			tip.style.maxWidth = '200px';
			tip.style.fontSize = '10pt';
			tip.style.border = '1px solid black';
			tip.style.opacity = '0.99';
			tip.style.boxShadow = '#555 2px 2px 8px';
		};

		var fd = new $jit.ForceDirected(config);
		fd.loadJSON(jsonData);
		
		fd.computeIncremental({// compute positions incrementally and animate.
			iter: 40,
			property: 'end',
			onStep: function(perc){},
			onComplete: function(){
				fd.animate({
					modes: ['linear'],
					transition: $jit.Trans.Elastic.easeOut,
					duration: 2500
				});
			}
		});
	},
	hypertree: function (obj) {
		var data 		= obj.data;
		var config		= obj.Config[obj.chartType];
		var div			= obj.container;
	
		config.injectInto = div;
		
		var divElement = document.getElementById(div);
		config.width = divElement.offsetWidth; // - 50;
		config.height = divElement.offsetHeight; // - 50;
		
		config.onCreateLabel = function(domElement, node) {
			domElement.innerHTML = node.name;
			var style = domElement.style;
			domElement.className = 'shiva-node-label';
			style.fontSize 		= config.Label.size + 'px';
			style.color 			= config.Label.color;
			style.fontWeight 	= config.Label.style;
			style.fontStyle 	= config.Label.style;
			style.fontFamily 	= config.Label.family;
			style.textAlign 	= config.Label.textAlign;
			style.cursor = 'crosshair';
			style.display = '';
			$jit.util.addEvent(domElement, 'click', function () {
				ht.onClick(node.id, {
					onComplete: function() {
						shivaLib.SendShivaMessage("ShivaNetwork=click",node.id);				
						ht.controller.onComplete();
					}
				});
			});
		};
		
		config.onPlaceLabel = function(domElement, node) { };
		
		config.onComplete = function() {
			return;
		}
		
		config.Tips.onShow = function(tip, node) {
			var count = 0;
			node.eachAdjacency(function() { count++; });
			if (node.data.tip) {
				tip.innerHTML = "<div class='tip-title'>" + node.data.tip + "</div>";
			} else {
				tip.innerHTML = "<div class='tip-title'>" + node.name + " is a <b>" + node.data.className + "</b> with " + count + " connections.</div>";
			}
			tip.style.color = 'black';
			tip.style.fontFamily = config.Label.family;
			tip.style.backgroundColor = 'white';
			tip.style.padding = '1em';
			tip.style.maxWidth = '200px';
			tip.style.fontSize = '10pt';
			tip.style.border = '1px solid black';
			tip.style.opacity = '0.99';
			tip.style.boxShadow = '#555 2px 2px 8px';
		};
		
		var ht = new $jit.Hypertree(config);
		ht.loadJSON(data);
		ht.refresh();
		ht.controller.onComplete();
	}	
}

///////////////////////////////////////////////////////////////////////////////////////////////
//  SHIVALIB TIMELINE
///////////////////////////////////////////////////////////////////////////////////////////////

//  TIMEGLIDER /////////////////////////////////////////////////////////////////////////////////////////// 
//  From Than 1/31/13

SHIVA_Show.prototype.DrawTimeGlider=function() //  DRAW TIMEGLIDER
{
  if($('#cp_colorbar').is(":visible") == true || $('#cp_colormap').is(":visible") == true) {
    return;
  }
  var i;
  var stimeline = new Object();
  
  if($('link[href*=timeglider]').length == 0) {
    $('head').append('<link rel="stylesheet" href="css/timeglider/Timeglider.css" type="text/css" media="screen" title="no title" charset="utf-8">');
  }
  
  stimeline.events=null;
  stimeline.options=this.options;
  stimeline.container=this.container;
  stimeline.con="#"+stimeline.container;

  // Always set width and height before drawing timeline as the layout depends on the container size.
  $(stimeline.con).width(stimeline.options['width']);
  $(stimeline.con).height(stimeline.options['height']);
  $(stimeline.con).timeline('resize');  // Resixe after setting height

	this.GetSpreadsheet(stimeline.options.dataSourceUrl,true,stimeline.options.query,$.proxy(ProcessTimelineData, this)); 
	
	function ProcessTimelineData(data) {
    eventData={ events:new Array() };
    // process event
    for(var n in data) {
    	var ev = data[n];
    	// normalize dates and strings for events
    	// further event normalization occurs in normalizeEventData() function called below.
    	for(var prop in ev) {
    		var val = ev[prop];
    		if(prop == 'icon' || val == '') { continue; }
    		// dates
    		if ((prop == "startdate") || (prop == "enddate")) {
          ev[prop] = ConvertTimelineDate(val);
        // strings
        } else if(typeof(val) == "string" ) {
          // replace carriage returns with <br/> html
          ev[prop] = val.replace(/[\n\r\f]/g, "<br/>");
        }
        eventData.events.push(ev);
        data[n] = ev; // update data array
    	} // end of event property loop
    } // end of array of events loop
    
    stimeline.events = eventData.events;
    
    // Normalize timeline options
    if (typeof(stimeline.options.min_zoom) == "undefined" ||
         stimeline.options.min_zoom == "" || 
         stimeline.options.min_zoom == "0") {
            stimeline.options.min_zoom = 1;
    }
    if (typeof(stimeline.options.max_zoom) == "undefined" ||
         stimeline.options.max_zoom == "" || 
         stimeline.options.max_zoom == "0") {
            stimeline.options.max_zoom = 99;
    }
    if (typeof(stimeline.options.initial_zoom) == "undefined" ||
         stimeline.options.initial_zoom == "" || 
         stimeline.options.initial_zoom == "0") {
            stimeline.options.initial_zoom = 50;
    }
    var stldata = [{
      "id":"stl" + (new Date()).getTime(),
      "title":stimeline.options.title,
      "description":"<p>" + stimeline.options.description + "</p>",
      "focus_date": ConvertTimelineDate(stimeline.options.focus_date),
      "timezone":stimeline.options.timezone,
      "initial_zoom":stimeline.options.initial_zoom * 1,
      "events": normalizeEventData(stimeline.events)
    }];
    
    // Set data and create new timeline if window's timeline object is undefined
    if(typeof(window.shivaTimeline) == "undefined") {
      // Load the initial timeline with default data
      window.shivaTimeline =  $(stimeline.con).timeline({
          "min_zoom":stimeline.options.min_zoom * 1,
          "max_zoom":stimeline.options.max_zoom * 1,
          "icon_folder": 'images/timeglider/icons/', // check to see if we can make this a parameter
          "data_source":stldata,
          "timezone": "-05:00",
          "show_footer":Boolean(stimeline.options.show_footer),
          "display_zoom_level":Boolean(stimeline.options.display_zoom_level),
          "constrain_to_data":false,
          "image_lane_height": stimeline.options.imglane_height * 1,
          "mousewheel": "none",
          "loaded":function (args, data) {
            $(stimeline.con).timeline('setOptions', stimeline.options, true);
            $(stimeline.con).timeline('registerEvents', stimeline.events);
            $(stimeline.con).timeline('eventList'); //setTimeout('$(\'' + stimeline.con + '\').timeline(\'eventList\')', 500);
            if(stimeline.options.show_desc == "false") { $('.tg-timeline-modal').fadeOut();  }
            shivaLib.SendReadyMessage(true);
          }
      });
   
   // Inserting or updating data into timeline structure already created
   } else {
      var callbackObj = {
        fn : function (args, data) {
            setTimeout(function() {
              $(stimeline.con).timeline('setOptions', stimeline.options, true);
              $(stimeline.con).timeline('registerEvents', stimeline.events);
              $(stimeline.con).timeline('eventList');
              if(stimeline.options.show_desc == "false") { $('.tg-timeline-modal').fadeOut();  }
            }, 500);
        },
        args : {
          "min_zoom":stimeline.options.min_zoom * 1,
          "max_zoom":stimeline.options.max_zoom * 1,
          "icon_folder": 'images/timeglider/icons/', // check to see if we can make this a parameter
          "data_source": stldata,
          "timezone": "-05:00",
          "mousewheel": "none",
          "show_footer":Boolean(stimeline.options.show_footer),
          "display_zoom_level":Boolean(stimeline.options.display_zoom_level),
          "constrain_to_data":false,
          "image_lane_height": stimeline.options.imglane_height * 1,
        },
        display : true
      };
      $(stimeline.con).timeline('loadTimeline', stldata, callbackObj);
    }

    // Make event modal windows draggable
    window.stlInterval = setInterval(function() {
      $('.timeglider-ev-modal').draggable({cancel : 'div.tg-ev-modal-description'});
    }, 500);

		// Functions called above 
		// Convert dates to something ingestible by Timeglider
    function ConvertTimelineDate(dateTime) {
    	if(typeof(dateTime) == 'undefined') {return '';}
      var dt = dateTime;
      // First deal with dates that only have month/year, as these break the date object
      // Add the day to be 15th of the month (TO DO: make it into a span if no end date or if there is then use the first of the month)
      if(typeof(dateTime) == "number") { dateTime = dateTime.toString(); }
      if( typeof(dateTime) == 'string') {
        var m = dateTime.match(/\//g);
        if(m != null && m.length == 1) {
          var dp = dateTime.split('/');
          dp.splice(1,0,"15");
          dateTime = dp.join('/');
        }
        // Parse Date piece by piece to account for BC or - years
        var dt = new Date();
        var dp = dateTime.split('/');
        var y = $.trim(dp[dp.length - 1]);
        if(y.indexOf(' ')> -1) {
          pts = y.split(' ');
          y = pts[0];
          // Test and account for times in dates
          if (pts[1].indexOf(':') > -1) {
            tpts = pts[1].split(":");
            if (tpts.length == 3) {
              dt.setHours(tpts[0]);
              dt.setMinutes(tpts[1]);
              dt.setSeconds(tpts[2]);
            }
          }
        }
        dt.setFullYear(y);
        var m = (dp.length > 1)? dp[dp.length - 2] : 1;
        dt.setMonth((m * 1) - 1);
        var d = (dp.length > 2)? dp[dp.length - 3] : 15;
        dt.setDate(d);
      }
      
      // Adjust positive years to match the tick (doesn't work with BCE years)
      /* Taking out because it messes with the dates too much. 
       * If it is still an issue of aligning with the tick marks trying using CSS
       if(typeof(dt.getFullYear()) == "number" && dt.getFullYear() > 0) {
        dateTime=Date.parse(dt)+50000000;
        dt = new Date(dateTime);
      }*/
      if (typeof(dt) == "undefined" || dt == null) { return ''; }
      var mn = padZero(dt.getMonth() + 1);
      var dy = padZero(dt.getDate());
      var hrs = padZero(dt.getHours());
      var mns = padZero(dt.getMinutes());
      var scs = padZero(dt.getSeconds());
      var dtstr = dt.getFullYear() + "-" + mn + "-" + dy + " " + hrs + ":" + mns + ":" + scs;
      return dtstr;
    }
		
		// Zero padding function
    function padZero(n) {
      if(n < 10) { n = '0' + n; }
      return n;
    }
		
		// Event data normalization
    function normalizeEventData(events) {
      var ct = 0;
      for(var i in events) {
        ct++;
        var ev = events[i];
        if(typeof(ev.id) == "undefined" || ev.id == null) {
          ev.id = "event-" + ct;
        } else {
          ev.id = ev.id + "-" + ct;
        }
        if(typeof(ev.startdate) == "undefined" && typeof(ev.start) != "undefined") {
          ev.startdate = ConvertTimelineDate(ev.start);
        }
        if(typeof(ev.enddate) == "undefined" && typeof(ev.end) != "undefined") {
          ev.enddate = ConvertTimelineDate(ev.end);
        }
        if(typeof(ev.enddate) == "undefined" || ev.enddate == "" || ev.enddate == null) {
          ev.enddate = ev.startdate;
        }
        if(typeof(ev.importance) == "undefined" || ev.importance == "" || ev.importance == null) {
          ev.importance = 50;
        }
        if(typeof(ev.date_display) == "undefined" || ev.date_display == "" || ev.date_display == null) {
          ev.date_display = "ye";
        }
        if(typeof(ev.icon) == "undefined" || ev.icon == "" || ev.icon == null)  {
          ev.icon = "none";
        }
      }
      return events;
    }
	}
};

//  SIMILE

SHIVA_Show.prototype.DrawTimeline=function(oldItems) 											//	DRAW TIMELINE
{
	var i;
	var eventData=null;
	var options=this.options;
	var container=this.container;
	var con="#"+container;
	var ops=new Array();
	var items=new Array();
	$(con).css('width',options['width']+"px");
	$(con).css('height',options['height']+"px");
	var eventSource=new Timeline.DefaultEventSource();
	$("#timelineCSS").attr('href',"css/timeline"+options.theme+".css");
	if (oldItems)
		items=oldItems;
	else
	   	for (var key in options) {
			if (key.indexOf("item-") != -1) {
				var o=new Object;
				var v=options[key].split(';');
				for (i=0;i<v.length;++i)
					o[v[i].split(':')[0]]=v[i].split(':')[1].replace(/\^/g,"&").replace(/~/g,"=").replace(/\`/g,":");
				items.push(o);
				}
			}
	this.items=items;
	for (i=0;i<items.length;++i) {
		if (items[i].visible == "false")
			continue;
		o=new Object();
		o.width=items[i].pct+"%";
		o.intervalUnit=eval("Timeline.DateTime."+items[i].intu.toUpperCase()); 
		o.intervalPixels=Number(items[i].intw);
		o.eventSource=eventSource;
		o.date=items[i].date;
		o.overview=(items[i].text == "false");
		var theme=Timeline.ClassicTheme.create();
		theme.event.tape.height=Number(items[i].thgt);
		theme.event.track.height=Number(items[i].thgt)+2;
		o.theme=theme;
		ops.push(Timeline.createBandInfo(o));
		if (i) {
			if (items[i].sync != "None")
				ops[i].syncWith=Number(items[i].sync)-1;
				ops[i].highlight=(items[i].high == "true");
				}
		}
	i=(options['orientation'] != "Vertical")?0:1; 		
	if (this.timeLine) 
		Timeline.timelines.pop();
	this.timeLine=Timeline.create(document.getElementById(container),ops,i);
	if (options['dataSourceUrl'])
		GetSpreadsheetData(options['dataSourceUrl'],"",this);
	else{
  		this.timeLine.loadJSON("SimileTestData.js",function(json, url) {  eventSource.loadJSON(json, url); });
		this.SendReadyMessage(true);											
		}
		
	function GetSpreadsheetData(file, conditions, _this) 
	{
		lastDataUrl=file.replace(/\^/g,"&").replace(/~/g,"=").replace(/\`/g,":");
		var query=new google.visualization.Query(lastDataUrl);
		if (conditions)
			query.setQuery(conditions);
   		query.send(handleQueryResponse);
 
	    function handleQueryResponse(response) {
		    var i,j,key,s=0;
			var data=response.getDataTable();
			var rows=data.getNumberOfRows();
			var cols=data.getNumberOfColumns();
	 		eventData={ events:new Array() };
			if (!$.trim(data.getColumnLabel(0)))
				s=1;
			for (i=s;i<rows;++i) {
 				o=new Object();
				for (j=0;j<cols;++j) {
					key=$.trim(data.getColumnLabel(j));
					if (!key)
						key=$.trim(data.getValue(0,j));
					if ((key == "icon") && (!data.getValue(i,j)))
						continue;
					if ((key == "start") || (key == "end")) {
						if (data.getFormattedValue(i,j))
							o[key]=_this.ConvertDateToJSON(data.getFormattedValue(i,j));
						}
					else	
						o[key]=data.getValue(i,j);
					}
 				eventData.events.push(o);
  				}
 			eventSource.loadJSON(eventData,'');
		 	shivaLib.SendReadyMessage(true);											
 	     }
  	}
};

SHIVA_Show.prototype.TimeActions=function(msg)						// REACT TO SHIVA ACTION MESSAGE
{
	var v=msg.split("|");												// Split msg into parts
	if (v[0] == "ShivaAct=resize") { 									// RESIZE
		if (v[1] == "100") {											// If forcing 100%
			$("#"+shivaLib.container).width("100%");					// Set container 100%
			$("#"+shivaLib.container).height("100%");					// Set container 100%
			}
	$("#"+shivaLib.container).timeline('resize');  						// Resize after setting height
	}
};///////////////////////////////////////////////////////////////////////////////////////////////
//  SHIVALIB COLOR PICKER
///////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Show.prototype.ColorPicker = function(mode, attr) {
    $("#shiva_dialogDiv").remove();                                     //remove existing dialogs
    var self = this;
	var sel = "";
	if (isNaN(attr)) 
		sel="#"+attr.replace(/___/g,"");
	else if (attr < 0) 
		sel = "#colordiv";
	else if (attr > 100)														
		sel="#itemInput"+(Math.floor(attr/100)-1)+"-"+(attr%100);	
	else sel = "#propInput" + attr;
		
    var inputBox = $(sel);
    var inputBoxChip = $(sel+"C");

    //HELPER FUNCTIONS
    this.HEX_to_HSV = function(hexString) {                             
        var value = hexString.substring(1);
        
        var r = parseInt(value.substring(0, 2), 16) / 255;
        var g = parseInt(value.substring(2, 4), 16) / 255;
        var b = parseInt(value.substring(4, 6), 16) / 255;

        var max = Math.max.apply(Math, [r, g, b]);
        var min = Math.min.apply(Math, [r, g, b]);

        var hue;
        var sat;
        var val = max;

        var delta = max - min;
        if (max != 0)
            sat = delta / max;
        else {
            sat = 0;
            hue = 0;
            return;
        }

        if (delta == 0) {
            return [0, 0, val];
        }

        if (r == max)
            hue = (g - b) / delta;
        else if (g == max)
            hue = 2 + (b - r) / delta;
        else
            hue = 4 + (r - g) / delta;
        hue *= 60;
        if (hue < 0)
            hue += 360;
        return [hue, sat, val];
    }

    this.RGB_to_HSV = function(r, g, b) {

        var max = Math.max.apply(Math, [r, g, b]);
        var min = Math.min.apply(Math, [r, g, b]);

        var hue;
        var sat;
        var val = max;

        var delta = max - min;

        if (max != 0)
            sat = delta / max;
        else {
            sat = 0;
            hue = 0;
            return [hue, sat, val];
        }

        if (delta == 0) {
            return [0, 0, val];
        }

        if (r == max) {
            hue = (g - b) / delta;
        } else if (g == max) {
            hue = 2 + (b - r) / delta;
        } else {
            hue = 4 + (r - g) / delta;
        }

        hue *= 60;
        if (hue < 0)
            hue += 360;
        return [hue, sat, val];
    }

    this.HSV_to_HEX = function(h, s, v) {

        if (h === 0)
            h = .001;
        else if (h == 360)
            h = 359.999;

        chroma = v * s;
        hprime = h / 60;
        x = chroma * (1 - Math.abs(hprime % 2 - 1));

        var r;
        var g;
        var b;

        if (h == 0)
            r, g, b = 0;
        else if (hprime >= 0 && hprime < 1) {
            r = chroma;
            g = x;
            b = 0;
        } else if (hprime >= 1 && hprime < 2) {
            r = x;
            g = chroma;
            b = 0;
        } else if (hprime >= 2 && hprime < 3) {
            r = 0;
            g = chroma;
            b = x;
        } else if (hprime >= 3 && hprime < 4) {
            r = 0;
            g = x;
            b = chroma;
        } else if (hprime >= 4 && hprime < 5) {
            r = x;
            g = 0;
            b = chroma;
        } else if (hprime >= 5 && hprime < 6) {

            r = chroma;
            g = 0;
            b = x;
        }

        m = v - chroma;
        r = Math.round(255 * (r + m));
        g = Math.round(255 * (g + m));
        b = Math.round(255 * (b + m));

        return self.RGB_to_HEX(r, g, b);
    }

    this.RGB_to_HEX = function(r, g, b) {
        h1 = Math.floor(r / 16).toString(16);
        h2 = Math.floor((r % 16)).toString(16);
        h3 = Math.floor(g / 16).toString(16);
        h4 = Math.floor((g % 16)).toString(16);
        h5 = Math.floor(b / 16).toString(16);
        h6 = Math.floor((b % 16)).toString(16);

        return "#" + h1 + h2 + h3 + h4 + h5 + h6;
    }
    
    //  BUILDING THE COLORPICKER
    var hue = 0;
    var sat = 1;
    var val = 1;
    var cp_current = 0;
    var cp_first = 0;

	var z = ($('.ui-widget-overlay').length > 0)?($('.ui-widget-overlay').css('z-index')+1):'auto';
    $('body').append($("<div>", {
        id : 'shiva_dialogDiv',
         css : {
        	zIndex: z,
            position : 'absolute',
            right : '100px',
            top : '30px',
            width : '240px',
            marginLeft : '2px',
            marginRight : '2px',
            padding : '5px',
            paddingBottom : '30px',
            paddingTop : '10px'
        }
    }).draggable().addClass("propTable"));
    //TABS
    $("#shiva_dialogDiv").append($("<div>", {
        id : 'cp_colorbar',
        css : {
            position : 'absolute',
            right : '1px',
            top : '-1px',
            width : '244px',
            height : '22px',
            borderTopLeftRadius : '8px',
            borderTopRightRadius : '8px'
        }
    }));
   $("#cp_colorbar").append($("<a>", {
      css : {
            width : '30px',
            height : '20px',
            position : 'relative',
            left : '-5px',
            float : 'left',
            border : '0',
            borderRadius : '0',
            borderTopLeftRadius : '8px',
            borderRight : '1px solid gray',
            borderBottom : '1px solid gray'
        	},
        click : function() {
            if (cp_first > 0)
                cp_first--;
            self.position_bar();
        	}
	    }).button({
	        icons : {
	            primary : 'ui-icon-arrowthick-1-w'
	        	},
	        text : false
	 }).addClass("cbar_control"));
    $("#cp_colorbar").append($("<a>", {
        css : {
            width : '28px',
            height : '20px',
            position : 'absolute',
            left : '216px',
            top : '0px',
            border : '0',
            borderRadius : '0',
            borderTopRightRadius : '8px',
            borderLeft : '1px solid gray',
            borderBottom : '1px solid gray'
        },
        click : function() {
            if (cp_first < $(".tab").length - 5)
                cp_first++
            self.position_bar();
        }
    }).button({
        icons : {
            primary : 'ui-icon-arrowthick-1-e'
        },
        text : false
    }).addClass("cbar_control"));
    $("#cp_colorbar").append($("<a>", {
         css : {
            width : '18.5px',
            height : '20px',
            position : 'absolute',
            top : '0',
            left : '196px',
            border : '0',
            borderRadius : '0',
            borderLeft : '1px solid gray',
            borderBottom : '1px solid gray'
        },
        click : function() {
            cp_first++;
            self.add();
        }
    }).button({
        icons : {
            primary : 'ui-icon-plusthick'
        },
        text : false
    }).addClass("cbar_control"));
    $("#cp_colorbar a").hover(function() {
        $(this).css("cursor", "pointer");
    });
    $("#shiva_dialogDiv").append($("<span>", {
        html : "S&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;B",
        css : {
            color : 'gray',
            position : 'absolute',
            top : '25px',
            left : 
            '186px'
        }
    }));
    $("#shiva_dialogDiv").append($("<div>", {
        id : 'cp_colormap',
        css : {
            position : 'relative',
            top : '20px',
            width : '150px',
            padding : '2px',
            height : '150px'
        }
    }));
    $("#cp_colormap").append($("<img>", {
        src : 'hsv_wheel.png',
        click : function(e) {
            self.position((e.pageX - $(this).parent().offset().left), (e.pageY - $(this).parent().offset().top));
        }
    }))
    $("#shiva_dialogDiv").append($("<input>", {
        id : 'cp_current',
        maxLength : '7',
        css : {
            position : 'absolute',
            top : '97px',
            left : '52.5px',
            width : '58px',
            height : '20px',
            border : '0',
            textAlign : 'center',
            backgroundColor : 'transparent'
        },
        change : function() {
            var val = $(this).attr("value");
            if (val[0] != "#")
                val = "#" + val;
              if (val == "none")
                self.update(null);
            else if (val.length === 7) {
                var hsv = self.HEX_to_HSV(val);
                if (hsv == -1) {
                    self.setColor(0, 0, 0);
                    $(this).attr("value", "000000");
                } else {
                    hue = hsv[0];
                    sat = hsv[1];
                    val = hsv[2];
                    self.setColor(hue, sat, val);
                }
            }
        }
    }));
    //SLIDERS
    $("#shiva_dialogDiv").append($("<div>", {
        id : 'cp_brightness',
        title : 'brightness',
        css : {
            width : '5px',
            height : '85px',
            position : 'relative',
            right : '24.5px',
            top : '-120px',
            float : 'right',
            borderRadius : '8px',
            border : '1px solid gray'
        }
    }).slider({
        value : 100,
        orientation : 'vertical'
    }).addClass("slider"));
    $("#shiva_dialogDiv").append($("<div>", {
        id : 'cp_saturation',
        title : 'saturation',
        css : {
            width : '5px',
            height : '85px',
            position : 'relative',
            right : '45.5px',
            top : '-120px',
            float : 'right',
            borderRadius : '8px',
            border : '1px solid gray'
        }
    }).slider({
        value : 100,
        orientation : 'vertical'
    }).addClass("slider"));
    $(".slider a").css("width", '20px');
    $(".slider a").css("height", '10px');
    $(".slider a").css("left", "-8px");
    $(".slider").first().slider("option", "slide", function() {
        self.setColor(hue, sat, $(this).slider("option", "value") / 100);
    });
    $(".slider").last().slider("option", "slide", function() {
        self.setColor(hue,$(this).slider("option", "value") / 100, val);
    });
    $("#shiva_dialogDiv").append($("<div>", {
        id : 'cp_chip',
        css : {
            border : '1px solid gray',
            borderRadius : '4px',
            width : '50px',
            height : '30px',
            position : 'relative',
            left : '172px',
            top: '-25px'
        }
    }));
    $("#shiva_dialogDiv").append($("<div>", {
        id : 'cp_basic',
        css : {
            width : '216px',
            position : 'relative',
            left : '10px'
        }
    }));
    $("#cp_basic").append($("<div>", {
        id : 'basic_colors',
        css : {
            position : 'absolute',
            width : '216px',
            height : '20px',
            border : '1px solid gray'
        }
    }))
    $("#cp_basic").append($("<div>", {
        id : 'neutral',
        css : {
            position : 'absolute',
            top : '20px',
            width : '216px',
            height : '20px',
            border : '1px solid gray'
        }
    }))
    var form = [16, 16];
    for (var i = 0; i < 2; i++) {
        var html = "";
        for (var j = 0; j < form[i]; j++) {
            html += "<div class= \'chips\' style=\'height:100%;width:" + ((1 / form[i]) * 100) + "%;float:left\'></div>";
        }
        $("#cp_basic").children().eq(i).html(html);
    }
    for (var i = 0; i < 16; i++) {
        $("#basic_colors").children().eq(i).css("backgroundColor", self.HSV_to_HEX((i * 22.5), 1, 1))
    }
    for (var i = 0; i < 16; i++) {
        $("#neutral").children().eq(i).css("backgroundColor", self.HSV_to_HEX(0, 0, (i * 0.06666666666666667)));
    }
    $("#cp_basic").children().children().click(function() {
        var color = $(this).css("backgroundColor");
        color = color.slice(4, color.length - 1);
        color = color.split(",");
        var hsv = self.RGB_to_HSV(color[0] / 255, color[1] / 255, color[2] / 255);
        self.setColor(hsv[0], hsv[1], hsv[2]);
    });

    $("#shiva_dialogDiv").append($("<div>", {
        id : 'cp_control',
        css : {
            width : '216px',
            height : '30px',
            position : 'relative',
            top : '50px'
        }
    }));

    //SCHEMES
    $("#cp_control").append($("<button>", {
        id : 'cp_schemes',
        html : 'Schemes',
        css : {
            left : '18px'
        },
        click : function() {
            $("#cp_schemediv").toggle();
        }
    }).addClass("button"));
    $("#shiva_dialogDiv").append($("<div>", {
        id : 'cp_schemediv',
        css : {
            height : '160px',
            position : 'relative',
            top : '60px',
            paddingBottom : '30px'

        }
    }));
    $("#cp_schemediv").hide();

    $("#cp_schemediv").append($("<div>", {
        id : 'cp_schemebox'
    }));
    for (var i = 0; i < 4; i++) {
        $("#cp_schemebox").append($("<div>", {
            css : {
                width : '100%',
                height : '35px',
                position : 'relative',
                top : '-5px',
                paddingBottom : '2px',
                paddingTop : '2px'
            }
        }));
    };
    var names = [["monochromatic"], ["complementary", "split-complementary"], ["triadic", "analagous"], ["tetrad"]];
    var form = [[16], [2, 3], [3, 3], [4]];
    for (var i = 0; i < form.length; i++) {
        for (var j = 0; j < form[i].length; j++) {
            $("#cp_schemebox").children().eq(i).append($("<div>", {
                html : "<center>" + names[i][j] + "</center>",
                css : {
                    float : 'left',
                    position : 'absolute',
                    top : '0',
                    left : (((92 / form[i].length) + 2) * j) + 2 + "%",
                    fontSize : '10px',
                    width : 92 / form[i].length + "%",
                    height : '100%'
                }
            }));
            for (var k = 0; k < form[i][j]; k++) {
                $("#cp_schemebox").children().eq(i).children("div").eq(j).append($("<div>", {
                    css : {
                        float : 'left',
                        position : 'relative',
                        top : '1px',
                        width : 100 / form[i][j] + "%",
                        height : '50%'
                    }
                }));
            }
        }
    }
    $("#cp_schemebox").children().children().css("fontSize", "8.5px");
    $("#cp_schemebox div:not(:has(*))").filter("div").click(function() {
        var color = $(this).css("backgroundColor");
        color = color.slice(4, color.length - 1);
        color = color.split(",");
        color = self.RGB_to_HEX(color[0], color[1], color[2]);
        $(".tab").eq(cp_current).children().first().css("backgroundColor", color);
        $(".tab").eq(cp_current).children().first().html("");
        self.drawColors(color);
    });
    ///end of schemes

    $("#cp_control").append($("<button>", {
        id : 'cp_nocolor',
         html : "No color",
        css : {
            left : '22px'
        },
        click : function() {
            self.update("none");
        }
    }).addClass("button"));

    $("#cp_control").append($("<button>", {
        id : 'cp_OK',
        html : "OK",
        css : {
            width : '60px',
            left : '35px'
        },
        click : function() {
            $("#shiva_dialogDiv").remove();
            return;
        }
    }).addClass("button"));
    $(".button").button();
    $(".button").css({
        position : 'relative',
        borderRadius : '8px',
        float : 'left',
        fontSize : '9px',
        top : '3px'
    });

    this.scheme = function() {    //Dynamically builds the schemes                                      
        for (var i = 0; i < 16; i++) {
            $("#cp_schemebox").children("div").eq(0).children("div").eq(0).children("div").eq(i).css("backgroundColor", self.HSV_to_HEX(hue, (1 - (i / 16)), 1));
        }
        $("#cp_schemebox").children("div").eq(1).children("div").eq(0).children("div").eq(0).css("backgroundColor", self.HSV_to_HEX(hue, sat, val));
        $("#cp_schemebox").children("div").eq(1).children("div").eq(0).children("div").eq(1).css("backgroundColor", self.HSV_to_HEX((hue + 180) % 360, sat, val));
        $("#cp_schemebox").children("div").eq
        (1).children("div").eq(1).children("div").eq(0).css("backgroundColor", self.HSV_to_HEX(hue, sat, val));
        $("#cp_schemebox").children("div").eq(1).children("div").eq(1).children("div").eq(1).css("backgroundColor", self.HSV_to_HEX((hue + 150) % 360, sat, val));
        $("#cp_schemebox").children("div").eq(1).children("div").eq(1).children("div").eq(2).css("backgroundColor", self.HSV_to_HEX((hue + 210) % 360, sat, val));
        $("#cp_schemebox").children("div").eq(2).children("div").eq(0).children("div").eq(0).css("backgroundColor", self.HSV_to_HEX(hue, sat, val));
        $("#cp_schemebox").children("div").eq(2).children("div").eq(0).children("div").eq(1).css("backgroundColor", self.HSV_to_HEX((hue + 120) % 360, sat, val));
        $("#cp_schemebox").children("div").eq(2).children("div").eq(0).children("div").eq(2).css("backgroundColor", self.HSV_to_HEX((hue + 240) % 360, sat, val));
        $("#cp_schemebox").children("div").eq(2).children("div").eq(1).children("div").eq(0).css("backgroundColor", self.HSV_to_HEX((hue + 330) % 360, sat, val));
        $("#cp_schemebox").children("div").eq(2).children("div").eq(1).children("div").eq(1).css("backgroundColor", self.HSV_to_HEX(hue, sat, val));
        $("#cp_schemebox").children("div").eq(2).children("div").eq(1).children("div").eq(2).css("backgroundColor", self.HSV_to_HEX((hue + 390) % 360, sat, val));
        $("#cp_schemebox").children("div").eq(3).children("div").eq(0).children("div").eq(0).css("backgroundColor", self.HSV_to_HEX(hue, sat, val));
        $("#cp_schemebox").children("div").eq(3).children("div").eq(0).children("div").eq(1).css("backgroundColor", self.HSV_to_HEX((hue + 30) % 360, sat, val));
        $("#cp_schemebox").children("div").eq(3).children("div").eq(0).children("div").eq(2).css("backgroundColor", self.HSV_to_HEX((hue + 180) % 360, sat, val));
        $("#cp_schemebox").children("div").eq(3).children("div").eq(0).children("div").eq(3).css("backgroundColor", self.HSV_to_HEX((hue + 210) % 360, sat, val));
    }

    this.update = function(attr, value) {     //Sets "hue", "sat", or "val" and handles the consequences
         if (attr == "none") {
            $(".tab").eq(cp_current).children().html("<center>none</center>");
            $(".tab").eq(cp_current).children().css("backgroundColor", "white");
            $("#cp_chip").css("backgroundColor", "white");
            $("#cp_chip").css("border", "1px dashed gray");
            $(".slider").first().slider("option", "value", 100);
            $(".slider").last().slider("option", "value", 100);
  			inputBox.val("none");
			inputBox.css('border-color',"white");
			inputBoxChip.css('background-color', "white");
            $("#shiva_dialogDiv").remove();
  	 		Draw();
        } else if (attr == null) {
            $(".tab").eq(cp_current).children().html("");
            $(".tab").eq(cp_current).children().css("backgroundColor", "transparent");
            $("#cp_current").attr("value", "");
            $("#cp_chip").css("backgroundColor", "transparent");
            $("#cp_chip").css("border", "1px dashed gray");
            $(".slider").first().slider("option", "value", 100)
            $(".slider").last().slider("option", "value", 100)
            //handle inputBox?
        } else {
             if (attr == "saturation") {
                sat = value;
            } else if (attr == "brightness") {
                val = value;
            } else if (attr == "hue") {
                hue = value;
            }
             var color = self.HSV_to_HEX(hue, sat, val);
            $("#cp_chip").css("backgroundColor", color);
            $("#cp_chip").css("border", "1px solid gray");
      	    $(".tab").eq(cp_current).children().css("backgroundColor", color)
             if (color.match(/NaN/))
  	         	color="#none";
          	$("#cp_current").attr("value", color.slice(1))
             $(".tab").eq(cp_current).children().html('');
            $(".slider").first().slider("option", "value", val * 100)
            $(".slider").last().slider("option", "value", sat * 100)
        }
        self.scheme()
    }

    this.add = function(color_HEX) {                //Adds a new chip to the tabs
        cp_current = $(".tab").length;
        $("#cp_colorbar a:eq(1)").before($("<div>", {
            css : {
                height : '16px',
                width : '28px',
                border : '1px solid gray',
                borderTop : '0',
                padding : '2px',
                position : 'relative',
                left : '-6px',
                float : 'left'
            },
            click : function() {
                $(".tab:not(:eq(" + $(this).index(".tab") + "))").css("borderBottom", '1px solid gray');
                $(this).css("borderBottom", '0');
                cp_current = $(this).index(".tab");
            }
        }).addClass("tab").append($("<div>", {
            css : {
                fontSize : '10px',
                width : "100%",
                height : '100%'
            }
        })).append($("<img>", {
            src : 'cpclose.png',
            css : {
                width : '4px',
                position : 'absolute',
                top : '2.5px',
                right : '2.5px'
            },
            mouseenter : function() {
                $(this).css({
                    width : '10px'
                })
            },
            mouseleave : function() {
                $(this).css({
                    width : '4px'
                })
            },
            click : function() {
                cp_current = $(this).parent().index(".tab");
                self.removeTab();
            }
        })));
        if (color_HEX == "none") {
            $('.tab').last().children().css("backgroundColor", "transparent");
            self.update("none");
        } else if (color_HEX == null) {
            $('.tab').last().children().css("backgroundColor", "transparent");
            self.update(null);
        } else {
            $('.tab').last().children().css("backgroundColor", color_HEX);
            var color = self.HEX_to_HSV(color_HEX);
            if ( typeof color != "undefined")
                self.setColor(color[0], color[1], color[2]);
            else
                self.setColor(0, 0, 0);
        }
        self.position_bar();
    }
    
    this.drawColors = function(color_HEX) {
		if (mode != 0) {
			var colors = inputBox.val().split(",");
			colors[cp_current] = color_HEX.slice(1);

			var boxChip = colors[cp_current];
			boxChip = "#" + boxChip;
			inputBox.css('border-color', boxChip);
			inputBoxChip.css('background-color', boxChip);

			var str = colors.toString();

			if (str[str.length - 1] != ",")
				str += ",";
			if (str.match(/NaN/))		
				str="none";
			inputBox.val(str);
		}
		else{
			var boxChip = color_HEX;
			inputBox.css('border-color', boxChip);
			inputBoxChip.css('background-color', boxChip);
			inputBox.val(boxChip.slice(1,boxChip.length));
		}

		Draw();
	}
    this.setColor = function(h, s, v) {                       
        self.update("hue", h);
        self.update("saturation", s);
        self.update("brightness", v);

       self.drawColors(self.HSV_to_HEX(h, s, v));
    }

    this.position_bar = function() {
        if (cp_current > cp_first + 4)
            cp_current = cp_first + 4;
        $(".tab").eq(cp_current).click();
        $(".tab").show();
        $(".tab:lt(" + cp_first + ")").hide();
        $(".tab:gt(" + (cp_first + 4) + ")").hide();
    }
    //HANDLES the setting of HUE by angle relative to the center of the wheel
    this.position = function(x, y) {
        var xrel = x - 75;
        var yrel = 75 - y;
        var angleR = Math.atan2(yrel, xrel);

        var angle = angleR * (180 / Math.PI);
        var h;

        if (angle > 0) {
            h = (360 - (angle - 90)) % 360;
        } else {
            h = 90 + (angle - (angle * 2));
        }
        self.setColor(h, 1, 1);
    }

    this.removeTab = function() {
        $(".tab").eq(cp_current).remove();
        var colors = inputBox.val();
        colors = colors.split(",");
        colors.splice(cp_current, 1)
        var str = colors.toString();
        if (str[str.length - 1] != ",")
            str = str + ",";
        inputBox.val(str);
        while ($(".tab").length < 5)
        self.add();
        cp_current = cp_first;
        $(".tab").eq(cp_current).click();
        Draw();
    }
    //COLORPICKER INITIALIZATION

    var oldcols = inputBox.val();

    //SINGLE color mode
    if (mode == 0) {
        $("#cp_colorbar").hide();
        if (oldcols != "") {
            if (oldcols[0] != "#")
                oldcols = "#" + oldcols;
            var color = self.HEX_to_HSV(oldcols);
            self.setColor(color[0], color[1], color[2]);
        }
    }
    //MULTI color mode
    else {
        $("#cp_nocolor").hide();
        $("#cp_OK").css("left", '90px');
        if (oldcols != "") {
            oldcols = oldcols.split(",");
            var rem = 6 - oldcols.length;
            for (var i = 0; i < oldcols.length; i++) {
                if (oldcols[i] != "") {
                    self.add("#" + oldcols[i]);
                }
            }
            if (rem > 0) {
                for (var j = 0; j < rem; j++) {
                    self.add();
                }
            }
        } else {
            for (var j = 0; j < 5; j++) {
                self.add();
            }
        }

        $(".tab").first().click();
        Draw();

        $(".tab").hover(function() {
            $(this).css("cursor", "pointer");
        });
    }
    $("#cp_schemebox div:not(:has(*))").hover(function() {
        $(this).css("cursor", "pointer");
    });
    $("#cp_basic div:not(:has(*))").hover(function() {
        $(this).css("cursor", "pointer");
    });
    $(".slider a").hover(function() {
        $(this).css("cursor", "pointer");
    });
}

/* 	CSV has 3 required args, and one optional arg:
	inputID: 			the id value of the source URL's <input>
	mode: 				choose 'show' to enable user validation; 'hide' to run silently
	output_type:		sets output type, choose 'JSON', or 'Array'; support for Gtables is possible but maybe not necessary...
							the chartWrapper expects an array for its datasource not a Gtable
	callback (optional): sets the callback function to be executed on completion...the final call will be callback(output_type)
*/

function CSV(inputID, mode, output_type, callback) {

				var self = this;
  
				var cellopts = [',', '\t', 'other']
				var textopts = ['\"', '\''];
				var cellDelim = ',';
				var quote = '\''
				var CSV_title = '';
				var csvHasHeader = false;
				var CSV_data = [];

				var input = '';
				$.get('proxy.php', {
					url : $('#' + inputID).val()
				}, function(data) {
					input = data;
					if (data == -1) {
						console.log("Bad data source.");
						alert("Please check your source URL...we didn't find anything at the other end.");
						return;
					} else {
						CSV_title = $('#' + inputID).val().split('/').pop().split(".")[0];
						if (mode === 'hide') {
							self.prep();
							self.parse();
							self.done();
						} else if (mode === 'show') {
							self.prep();
							self.show(10);
						} else
							console.log("Bad mode type.");
					}
				});

				self.prep = function() {
					input = input.replace(/\n\r/g, '\n');
					input = input.replace(/\r\n/g, '\n');
					input = input.replace(/\r/g, '\n');

					var c = input.split(',').length;
					var t = input.split('\t').length;
					var cn = input.split(';').length

					//try to autodetect cell delimiter
					if (c >= t && c >= cn)
						cellDelim = ',';
					else if (t >= c && t >= cn)
						cellDelim = '\t';
					else if (cn >= c && cn >= t)
						cellDelim = ';';
					//try to autodetect quote delimiter
					quote = (input.split("\"").length >= input.split("\'").length) ? "\"" : "\'";
				}

				self.parse = function(n) {
					var cell = "";
					var row = 0;
					var text = false;
					CSV_data[row] = [];

					for (var i = 0; i < input.length; i++) {
						if ( typeof n !== 'undefined' && row === n)
							break;
						text = (RegExp(quote, 'g').test(input[i])) ? !text : text;
						if (text)
							cell += input[i];
						else {
							if (/\n/g.test(input[i])) {
								CSV_data[row].push(cell);
								cell = "";
								row++;
								if ( typeof input[i + 1] != 'undefined')
									CSV_data[row] = [];
							} else if (RegExp(cellDelim, 'g').test(input[i])) {
								CSV_data[row].push(cell);
								cell = "";
							} else {
								cell += input[i];
							}
						}
					}
					if (typeof CSV_data[0][0] != typeof CSV_data[1][0]) {
						csvHasHeader = true;
					}
				}

				self.init = function() {
					$('body').append($("<div>", {
						id : 'CSV_overlay',
						css : {
							color : 'black',
							position : 'absolute',
							top : '0',
							left : '0',
							width : $(document).width(),
							height : '150%',
							opacity : '0.4',
							backgroundColor : 'black'
						}
					}).append($('<div>', {
						id : 'CSV_preview',
						css : {
							padding : '56px',
							position : 'absolute',
							top : '10%',
							left : '20%',
							width : '800px',
							height : '400px',
							backgroundColor : 'white',
							borderRadius : '5px'
						}
					}).append($("<div>", {
						id : 'CSV_preview_table',
						marginLeft : 'auto',
						marginRight : 'auto',
						css : {
							overflow : 'scroll',
							position : 'absolute',
							top : '25%',
							height : '330px',
							width : '86%',
							borderRadius : '5px',
							border : 'solid thin gray'
						}
					})).append($("<div>", {
						id : 'csvControl',
						css : {
							position : 'absolute',
							top : '2%',
							bottom : '76%',
							width : '86%',
							borderRadius : '5px'
						}
					}))));
					$("#csvControl").append($("<p>", {
						css : {
							position : 'relative',
							left : '5px'
						}
					}).append($("<span>", {
						html : "Title: "
					})).append($("<input>", {
						id : 'titleInput',
						value: CSV_title,
						css : {
							position : 'relative',
							left : '5px',
							marginRight : '40px'
						},
						change: function(){
							CSV_title = $(this).val();
						}
					})).append($("<span>", {
						html : 'Data has header row?'
					})).append($("<input>", {
						id : 'dataHasHeader',
						type : 'checkbox',
						checked : (csvHasHeader) ? true : false,
						css : {
							position : 'relative',
							left : '5px'
							},
						change : function() {
							csvHasHeader = ($(this).is(":checked")) ? true : false;
							self.show()
							}
					}))).append($("<p>", {
						css : {
							position : 'relative',
							left : '5px'
						}
					}).append($("<span>", {
						html : "Cell delimiter: "
					})).append($("<select>", {
						id : 'cellDelimInput',
						html : '<option value=0>Comma (,)</option><option value=1>Tab (\\t)</option><option value=2> Other </option>',
						css : {
							width : '100px',
							position : 'relative',
							left : '5px',
							marginRight : '40px'
						},
						change : function() {
							if ($(this).val() == 2) {
								$("#cellDelimOther").show();
							} else {
								$("#cellDelimOther").hide();
								cellDelim = cellopts[$(this).val()];
								self.show();
							}
						}
					})).append($("<span>", {
						html : 'Text delimitier: '
					})).append($("<select>", {
						id : 'textDelimInput',
						html : "<option value=0>Double quote (\")</option><option value=1>Single quote (\')</option>",
						css : {
							position : 'relative',
							left : '5px'
						},
						change : function() {
							quote = textopts[$(this).val()];
							self.show();
						}
					})));
					$('#CSV_overlay').append($("<input>", {
						id : 'cellDelimOther',
						css : {
							height : $('#cellDelimInput').css('height') - 2,
							width : '75px',
							position : 'absolute',
							left : $('#cellDelimInput').offset().left,
							top : $('#cellDelimInput').offset().top
						},
						change : function() {
							cellDelim = $(this).val();
							self.show();
						}
					}).hide());

					$('#CSV_preview').append($("<button>", {
						html : 'Back',
						css : {
							position : 'absolute',
							bottom : '15px',
							left : '350px'
						},
						click : function() {
							$(input).val("");
							$('#CSV_overlay').remove();
						}
					}).button()).append($("<button>", {
						html : 'Accept',
						css : {
							position : 'absolute',
							bottom : '15px',
							right : '391px'
						},
						click : function() {
							self.done();
						}
					}).button())

					$('#cellDelimInput').val(cellDelim);
					$('#textDelimInput').val(quote);
				}
				self.show = function() {
					if ($('#CSV_overlay').length > 0)
						$('#CSV_preview_table').children().remove();
					else
						self.init();
					self.parse(10);

					var gwidth;

					for (var i = 0; i < 10; i++) {
						var odd = (i % 2 == 0) ? 'lightgray' : 'transparent';
						$("#CSV_preview_table").append($("<div>", {
							css : {
								height : $('#CSV_preview_table').height() / 10 + 'px',
								backgroundColor : odd
							}
						}).addClass("row"));
						for (var j = 0; j < CSV_data[i].length; j++) {
							var alignment = 'right';
							if (isNaN(CSV_data[i][j]))
								alignment = 'left';
							$("#CSV_preview_table").children().eq(i).append($("<div>", {
								html : (i === 0 && csvHasHeader) ? '<center><strong>' + CSV_data[i][j] + '</strong></center>' : CSV_data[i][j],
								align : alignment,
								css : {
									paddingLeft : '2px',
									paddingRight : '2px',
									height : $('#CSV_preview_table').height() / 10 + 'px',
									float : 'left',
									outline : '1px solid black'
								}
							}).addClass("col"+j));
							if ($('.col' + j).length > 1 && $('.col' + j).last().width() > $('.col' + j).eq($('.col' + j).last().index('.col' + j) - 1).width()) {
								$('.col' + j).css('width', $('.col' + j).last().width() + 'px');
							} else {
								$('.col' + j).last().css('width', $('.col' + j).width() + 'px');
							}
						}
					}
					var gwidth = 0;
					for (var i = 0; i < $('.row').last().children().length; i++) {
						gwidth += $('.row').last().children().eq(i).width();
					}
					$('.row').css('width', (gwidth + (CSV_data[0].length * 4)) + 'px');
				}

				self.to_JSON = function() {
					if (CSV_data.length == 0) {
						throw new Error("The CSV_data source is empty.")
						return;
					} else {
						var table = {
							"title" : (CSV_title != "") ? CSV_title : "New Table",
							"headers" : (csvHasHeader) ? CSV_data[0] : null,
							"data" : (csvHasHeader) ? CSV_data.slice(1) : CSV_data
						}
						$("#CSV_overlay").remove();
						return table;
					}
				}

				/*self.to_Gtable = function() {
					if (CSV_data.length == 0) {
						throw new Error("The CSV_data source is empty.")
						return;
					} else{
						return google.visualization.arrayToDataTable(CSV_data);
					}
				}*/

				self.done = function() {
					self.parse();
					if (callback != null) {
						if (output_type === 'JSON') {
							callback(self.to_JSON());
						} else if (output_type === 'Google')
							callback(self.to_Gtable());
						else if(output_type === 'Array'){
							callback(CSV_data);
						}						
						else {
							console.log('Output type not recognized or not implemented.');
							return;
						}
					} else {
						if (output_type === 'JSON')
							return (self.toJSON());
						else if (output_type === 'Google')
							return (self.to_Gtable());
						else if(output_type === 'Array')
							return CSV_data;
						else
							console.log('Output type not recognized or not implemented.');
					}
				}
			}


SHIVA_Show.prototype.DrawWordCloud = function() {
    var wcloud;
    var fill = d3.scale.category20();
    //Routing to prevent unecessary redraws
    if (!this.wcloud) {
        wcloud = new wordCloud(this.container);
        this.wcloud = wcloud;
        wcloud.options = this.options;
        wcloud.load(this.options.dataSourceUrl);
        wcloud.ready = false;
    } else {
        wcloud = this.wcloud;
        var props = Object.keys(this.options);
        for (var i = 0; i < props.length; i++) {
            var prop = props[i];
            if (this.wcloud.options[prop] != this.options[prop]) {
                if (prop == "dataSourceUrl") {
                    wcloud.options = this.options;
                    wcloud.load(wcloud.options['dataSourceUrl']);
                    break;
                } else if (prop == "width" || prop == "height" || prop == "low_threshold" || prop == "high_threshold" || prop == 'tiltRange' || prop == "scale") {
                    wcloud.options = this.options;
                    wcloud.buildLayout(wcloud.d);
                } else {
                    switch (prop) {
                        case 'font_name':
                            d3.selectAll('text').style('font-family', this.options.font_name);
                            break;
                        case 'backgroundColor':
                            if(typeof this.options.backgroundColor == 'undefined' || this.options.backgroundColor == '')
                                this.options.backgroundColor = 'ffffff';
                            d3.select('rect').style('fill', '#' + this.options.backgroundColor);
                            break;
                        case 'spectrum':
                            wcloud.colorize(this.options.spectrum);
                            break;
                        case 'title':
                            d3.select('#cloudTitle').text(this.options.title);
                            break;
                        case 'titleColor':
                            d3.select('#cloudTitle').attr('fill', '#' + this.options.titleColor);
                            break;
                        case 'titleFontSize':
                            d3.select('#cloudTitle').style('font-size', this.options.titleFontSize + 'px');
                            break;
                        case 'wordList':
                            if (this.options.wordList == "true")
                                $('#cloudShowListButton').show();
                            else {
                                $('#cloudShowListButton').hide();
                                $('#wordCloudWordList').hide();
                            }
                            break;
                    }
                }
            }
        }
        wcloud.options = this.options;
    }
    function wordCloud(container) {
        this.d = [];
        this.filterSet = [];
        this.container = container;
        this.draw = function(data, bounds) {
            $('svg').remove();
            $('#cloudLoad').remove(); 
            var svg = d3.select("#" + wcloud.container)
                .append("svg").attr("id", "wordCloud")
                    .attr("width", wcloud.options.width+"px")
                    .attr("height", wcloud.options.height+"px");
                svg.append("g").attr('fill', 'none').attr('scale', '').append('rect').attr('x', 0).attr('y', 0).attr('width', '100%').attr('height', '90%').style('fill', (typeof wcloud.options.backgroundColor =="undefined" || wcloud.options.backgroundColor == "") ? 'white' : '#'+wcloud.options.backgroundColor);
            var t = d3.select('g').selectAll("text").data(data);
            t.enter().append("text").attr('class', 'word').style("font-size", function(d) {
                return d.size + "px";
            }).style("font-family", wcloud.options.font_name).style("fill", function(d, i) {
                if(typeof d.color != 'undefined')
                    return (d.color[0]=="#")?d.color:'#'+d.color;
                return fill(i);
            }).attr("text-anchor", "middle").attr("transform", function(d) {
                return "translate(" + [d.x+wcloud.options.width/2, d.y+wcloud.options.height/2] + ")rotate(" + d.rotate + ")";
            }).text(function(d) {
                return d.text;
            });
            t.exit().remove();
            
            d3.select('svg').append('text').attr('id', 'cloudTitle').text(wcloud.options.title).style('font-size', wcloud.options.titleFontSize + 'px').attr('text-anchor', 'middle').attr('y', wcloud.options.height - (wcloud.options.titleFontSize)).attr('x', wcloud.options.width / 2);

            //add wordlist
            if($('#wordCloudWordList').length ==0){
            $('#containerDiv').append($('<a>').attr('id', 'cloudShowListButton').css({
                position : 'absolute',
                top : '10px',
                left : 0,
                width : '25px',
                height : '20px'
            }).click(function() {
                $('#wordCloudWordList').toggle();
            }).button({
                icons : {
                    primary : 'ui-icon-script'
                }
            }).hide());

            $('#containerDiv').append($('<div>', {
                id : 'wordCloudWordList',
                css : {
                    position :'absolute',
                    top : '10px',
                    left : '20px',
                    height : (wcloud.options.height * 0.6) + "px",
                    width : '120px',
                    borderRadius : '8px',
                    border : '5px solid #EEE',
                    backgroundColor : 'white',
                    overflow: 'scroll',
                    padding: '5px'
                }
            }).hide());
            }
            d3.selectAll('.listEntry').remove();
            
            d3.select('#wordCloudWordList').selectAll('.listEntry').data(wcloud.d).enter().append('div').attr('class','listEntry').style('vertical-align','middle').style('height','20px').style('width', '100px').text(function(d) {
                return d.text + " (" + d.freq + ")";
            }).on('click', function(d){
                //More SEA events
                console.log(d.text + " : " +  d.freq);
                shivaLib.SendShivaMessage("ShivaWord=click", d.text + "|" + d.freq);
                $('.listEntry').css('backgroundColor','white');
                $(this).css('backgroundColor', 'rgba(255,255,105,0.5)');
            });
            
            var listClickHandler = function(e, pass){
                e.preventDefault();
                e.stopPropagation();
                if(typeof pass =="undefined")
                    pass = false;
                if($(this).hasClass('ui-icon-close')){
                    $(this).removeClass('ui-icon-close').addClass('ui-icon-arrowreturnthick-1-w');
                    $(this).parent().css('opacity',0.5);
                }
                else{
                    $(this).removeClass('ui-icon-arrowreturnthick-1-w').addClass('ui-icon-close');
                    $(this).parent().css('opacity',1);   
                }
                var word = $(this).parent().text().split(' ')[0];
                if(!pass)
                    wcloud.filter();                
            };
            
            $('.listEntry').append($('<span>',{
                css: {
                    float: 'right'
                }
            }).addClass('listEntryFilter ui-icon ui-icon-close').on('click', listClickHandler));
            
            $('.listEntry').filter(function(i){
                    return wcloud.filterSet.indexOf($(this).text().split(' ')[0]) != -1;
            }).find('span').trigger('click',[true]);
            
            if (wcloud.options.wordlist == "true") {
                $('#cloudShowListButton').show();
            }
 			shivaLib.SendReadyMessage(true);           
            //add colors if necessary
            if(typeof wcloud.options.spectrum != "undefined" && wcloud.options.spectrum!="")
                wcloud.colorize(wcloud.options.spectrum);
            
            //Bind Events for SHIVA Messages
            d3.selectAll('.word').on("click", function(d) {
                console.log(d.text + " : " +  d.freq);
                shivaLib.SendShivaMessage("ShivaWord=click", d.text + "|" + d.freq);
            });
            //ready
            if(!wcloud.ready){
                shivaLib.SendShivaMessage("ShivaWord=ready");
                wcloud.ready = true;   
            }
        };
        this.buildLayout = function(words) {
              //fix height and width if %
            if(typeof wcloud.options.height == "string" && wcloud.options.height.indexOf('%') != -1)
                wcloud.options.height = $('#containerDiv').height()*(wcloud.options.height.slice(0,-1)/100);
            if(typeof wcloud.options.width == "string" && wcloud.options.width.indexOf('%') != -1)
                wcloud.options.width = $('#containerDiv').width()*(wcloud.options.width.slice(0,-1)/100);
                
            
            var count = 0;
            var l = words.length;
            for(var i=0; i<l; i++){
                count+=words[i].freq;
            }
            //how close is the max to the average?
            var avg = count/l;
            var distro = (words[0].freq-avg)/(words[0].freq);
                        
            var fs;
            if(wcloud.options.scale=="logarithmic")
                fs = d3.scale.log().range([5,100]);
            else if(wcloud.options.scale=="linear")
                fs = d3.scale.linear().domain([0, words[0].freq]).range([10,100]);
            else if(wcloud.options.scale =="binary")
                fs = d3.scale.quantile().range([0,(wcloud.options.height/(words.length/5))]);
                  
            var high,low;      
            low = (typeof wcloud.options.low_threshold == 'undefined' || wcloud.options.low_threshold=='')?0:parseInt(wcloud.options.low_threshold);
            high = (typeof wcloud.options.high_threshold == 'undefined' || wcloud.options.high_threshold=='')?100000000000:parseInt(wcloud.options.high_threshold);
            words = words.filter(function(el){
                return el.freq >= low && el.freq <= high;
            });
            
            var cloud = d3.layout.cloud();
            cloud.size([wcloud.options.width, wcloud.options.height * 0.8]).words(words).rotate(function() {
                return ~~((Math.random() * 2) * wcloud.options.tiltRange)*((Math.random()>0.5)?1:-1);
            }).font(wcloud.options.font_name).fontSize(function(d) {
                return fs(d.freq);
            }).on("end", function(){
                wcloud.draw(words);
            }).start();
            var bounds = wcloud.options.bounds;
            var shift = "translate(-"+bounds[0].x+" -"+bounds[0].y+")";
            var xDiff = bounds[1].x - bounds[0].x;
            var yDiff = bounds[1].y - bounds[0].y;
            var sfactor = Math.min(wcloud.options.width/xDiff, (wcloud.options.height*0.8)/yDiff);
            var scale = "scale("+sfactor+")";
            d3.select('g').attr('transform', scale+" "+shift);
        };
        this.load = function(src, algo) {
            if (typeof algo == "undefined")
                algo = "raw";
            d3.select('svg').remove();
            var qs = 'parser.php?' + encodeURIComponent('url') + '=' + encodeURIComponent(src) + "&" + encodeURIComponent('a') + '=' + encodeURIComponent(algo);
            d3.json(qs, function(error, d) {
                if (d.error) {
                    if (d.error == "fetch_fail")
                        alert("Sorry we didn't find anything at that URL. Plese make sure it is correct.");
                    else if (d.error == "robots")
                        $('<div id="wordcloudError"><p> SHIVA has detected that the site you are trying to access has set a robots.txt policy that prohibits machine access to the content you are trying to fetch. Please instead copy and paste the text from the page you would like to access into the text box to the right of "Data source URL". <br /><br /> For more information about robots.txt, please visit <a target="_blank" href="http://www.robotstxt.org/robotstxt.html">this page.</a></p></div>').dialog({
                            appendTo : 'body',
                            position : 'top'
                        });
                    return false;
                }
                wcloud.d = d;
                wcloud.buildLayout(d);
            });
        };
        this.filter = function(){
            var words = [];
            wcloud.filterSet.length = 0;
            $('.listEntry').filter(function(){
                return $(this).children('span').hasClass('ui-icon-close');
            }).each(function(){
                words.push($(this).text().split(' (')[0]);
            });
            var data = wcloud.d.filter(function(el){
                if(words.indexOf(el.text) == -1){
                    wcloud.filterSet.push(el.text);
                    return false;
                }
                else
                    return true;
            });
            wcloud.buildLayout(data);
        };
        this.colorize = function(colors){
             var opts = colors.split(',').slice(0, -1);
                            if (opts.length == 1)
                                opts.push('ffffff');
                            var spec = [];
                            for (var j = 1; j < opts.length; j++) {
                                var s = d3.hsl('#' + opts[j - 1]);
                                var e = d3.hsl('#' + opts[j]);
                                spec.push(d3.interpolate(s, e));
                            }
                            var size = wcloud.d[0].freq + 1;
                            d3.selectAll('.word').style('fill', function(d, i) {
                                var hole = Math.floor((wcloud.d[i].freq / size) * spec.length);
                                var rem = (wcloud.d[i].freq / size) * spec.length % 1;
                                return spec[hole](rem);
            });
        };
    }
}

SHIVA_Show.prototype.WordActions = function(msg) {
    var m = msg.split('=')[1];
    var cmd = m.split('|');
    switch(cmd[0]) {
        case 'data':
            if (/^http/gi.test(cmd[1])) {
                //parse URL
                this.wcloud.load(cmd[1]);
            } else {
                try {
                    //check if JSON
                    var json = JSON.parse(cmd[1]);
                    if(json[0] instanceof Array){
                        json = json.map(function(a){
                            if (typeof a[2] != "undefined")
                                return {'text':a[0], 'size':0, 'freq':a[1], 'color':a[2]};
                            return   {'text':a[0], 'size':0, 'freq':a[1]};
                         });                    
                    }
                    json.sort(function(a,b){
                        return b.freq-a.freq;
                    });
                    this.wcloud.d = json;
                    this.wcloud.buildLayout(json);
                } catch(e) {
                    //parse raw
                    this.wcloud.load(cmd[1]);
                }
            }
        break;
        case 'resize':
            if (cmd[1] == "100") {                                            // If forcing 100%
                $("#"+shivaLib.container).width("100%");                    // Set container 100%
                $("#"+shivaLib.container).height("100%");                   // Set container 100%
                this.wcloud.options.width =  $("#"+shivaLib.container).width();
                this.wcloud.options.height =  $("#"+shivaLib.container).height();
            }
            this.wcloud.buildLayout(this.wcloud.d);
        break;
    }
}//  ///////////////////////////////////////////////////////////////////////////////////////////////////// 
//  SHIVALIB POSTER  (USED IN IMAGE:ZOOMABLE too)
//  ///////////////////////////////////////////////////////////////////////////////////////////////////// 

SHIVA_Show.prototype.DrawPoster=function() 											//	DRAW POSTER
{
	var str,i,j,k,o,v,vv;
	var options=this.options;
	var container=this.container;
	var con="#"+container;
 	var _this=this;
	this.items=new Array();
   	for (var key in options) {
		if (key.indexOf("item-") != -1) {
			var o=new Object;
			var v=options[key].split(';');
			for (i=0;i<v.length;++i) {
				v[i]=v[i].replace(/http:/g,"http`");
				o[v[i].split(':')[0]]=v[i].split(':')[1].replace(/\^/g,"&").replace(/~/g,"=").replace(/\`/g,":");
				}
			this.items.push(o);
			}
		}
	if (!this.posterScale)																// If first time
   		this.posterScale=2;																// Init
	if (options.shivaGroup == "Poster") {												// If poster
		if (!this.eva)																	// If no eva
			this.eva=new EvA();															// Alloc it															
	  	this.eva.ondos=new Array();														// Clear ondos
		if (options.eva) {																// If some options
			var ud=options.eva.split("``");												// Split into rows
		  	for (i=0;i<ud.length;++i) {													// For each row
		 		v=ud[i].split("`");														// Split by value pair
				if (v.length < 2)														// If not enough elements
					continue;															// Skip
				o={};																	// New obj
				for (j=0;j<v.length;++j) {												// For each pair
					vv=v[j].split("~");													// Split pair
					o[vv[0]]=vv[1];														// Add it in
					}
				this.eva.ondos.push(o);													// Add to list and run if an init
				}
			}
		}
	
	var str="<div id='posterDiv' style='position:absolute;";							// Make poster div
	str+="background-color:#"+options.backCol+"'></div>";								// Back color
	$(con).html(str);																	// Add div
 	$(con).css({border:"1px solid",overflow:"hidden",margin:"0px",padding:"0px"});		// Put border and hode overflow on container
	$(con).width(options.width);	$(con).height(options.height);						// Set size
	$("#posterDiv").draggable({ drag:function(event,ui) {								// Make it draggable
								var w=$("#posterDiv").width();							// Get image width
								var h=$("#posterDiv").height();							// Get image height
								var s=shivaLib.posterScale;								// Current scale
								shivaLib.posterX=(-$("#posterDiv").css("left").replace(/px/,"")+(w/s/2))/w; // Get centerX %
								shivaLib.posterY=(-$("#posterDiv").css("top").replace(/px/,"")+(h/s/2))/h;  // Get centerY %
								shivaLib.DrawPosterOverview();							// Reflect pos in overview
								$("#propInput0").val(shivaLib.options.pos=Math.round(shivaLib.posterScale*1000)+"|"+Math.round(shivaLib.posterX*1000)+"|"+Math.round(shivaLib.posterY*1000));  // Set cur pos
								if (shivaLib.options.chartType == "Zoomable")			// If a zoomable
								  	shivaLib.SendShivaMessage("ShivaImage=move",shivaLib.options.pos); // Send message
								}});	 
	
	if (options.dataSourceUrl) {														// If a back img spec'd
		str="<img src='"+options.dataSourceUrl+"' ";									// Name
		str+="height='100%' width='100%'>";												// Size
		$("#posterDiv").append(str);													// Add image to poster
		}	
	this.DrawPosterOverview();															// Draw overview, if enabled
	if (this.posterMode != "Connect") {													// If editing or viewing
		this.DrawPosterPanes(-1,"draw");												// Draw panes
		this.DrawLayerControlBox(this.items,(options.controlbox == "true"));			// Draw control box?
		if ((this.posterMode != "Edit") && (this.options.eva))							// If not editing
			this.eva.Run(this.options.eva);												// Run Eva
		}
	var v=options.pos.split("|");														// Get start pos
	this.PositionPoster(v[0],v[1],v[2]);												// Set position
	this.DrawPosterOverview();															// Draw overview, if enabled
	this.SendReadyMessage(true);														// Send ready message
}

SHIVA_Show.prototype.PositionPoster=function(size, left, top) 						// POSITION POSTER
{
	if (size != undefined) {
		shivaLib.posterScale=size/1000;													// Current scale
		shivaLib.posterX=left/1000; 													// Get center X%
		shivaLib.posterY=top/1000;  													// Get center Y%
		}
	var s=shivaLib.posterScale;															// Point at scale
	$("#posterDiv").width(shivaLib.options.width);										// Set poster width
	$("#posterDiv").height(shivaLib.options.height);									// Set poster height
	var w=$("#posterDiv").width()*s;													// Get image width scaled
	var h=$("#posterDiv").height()*s;													// Get image height
	$("#posterDiv").width(w);															// Size it
	$("#posterDiv").height(h);															// Size it
	var l=w*shivaLib.posterX-(w/s/2);													// Get left
	var t=h*shivaLib.posterY-(h/s/2);													// Get top
	$("#posterDiv").css({"left":-l+"px","top":-t+"px"});								// Position poster	
	$("#propInput0").val(shivaLib.options.pos=Math.round(shivaLib.posterScale*1000)+"|"+Math.round(shivaLib.posterX*1000)+"|"+Math.round(shivaLib.posterY*1000));  // Set cur pos
	this.DrawPosterPanes(-1,"resize");													// Resize panes
	if (typeof(DrawPosterGrid) == "function")											// If not in embedded
		DrawPosterGrid();																// Draw grid if enabled

	var l=$("#"+shivaLib.container).position().left;									// Left boundary
	var r=l-0+(w/s-w);																	// Right boundary
	var t=$("#"+shivaLib.container).position().top;										// Top boundary
	var b=t-0+(h/s-h);																	// Bottom boundary
	$("#posterDiv").draggable("option",{ containment: [r,b,l,t] } );					// Reset containment
}

SHIVA_Show.prototype.GoToPosterPane=function(num) 									// GO TO PANE
{
	if (num < this.items.length) {														// If a pane													
		var v=this.items[num].data.split("|");											// Get pane pos
		v[0]=Math.round(1000/v[0]*1000);												// Rescale
		this.options.pos=v[0]+"|"+v[1]+"|"+v[2];										// Set pos
		$("#posterOverDiv").hide();
		}
	else{																				// If start
		$("#posterOverDiv").show();
		this.options.pos="1000|500|500";												// Centered full screen
		}
	v=this.options.pos.split("|");														// Split put
	this.PositionPoster(v[0],v[1],v[2]);												// Redraw
	this.DrawPosterOverview();															// Redraw overview
	$("#shcr"+num).attr("checked","checked");											// Reset radio button
}

SHIVA_Show.prototype.DrawPosterOverview=function() 									// DRAW POSTER OVERVIEW
{
	var str;
	var options=this.options;
	var s=this.posterScale;																// Scale
	var w=$("#containerDiv").width()/4;													// Width of frame
	var h=$("#containerDiv").height()/4;												// Height of frame
	var h=w*h/w;																		// Height based on aspect
	if (($("#posterOverDiv").length == 0) && (options.overview == "true"))  {			// If not initted yet and showing
		var css = { position:"absolute",												// Frame factors
					left:w*4-w+"px",
					width:w+"px",
					height:h+"px",
					top:h*4-h+"px",
					border:"1px solid",
					"background-color":"#"+options.backCol
					};
		
		str="<div id='posterOverDiv'></div>";											// Frame box div
		$("#"+this.container).append(str);												// Add to container
		$("#posterOverDiv").css(css);													// Set overview frame
		if (options.dataSourceUrl) {													// If a back img spec'd
			str="<img src='"+options.dataSourceUrl+"' ";								// Name
			str+="height='"+h+"' ";														// Height
			str+="width='"+w+"' >";														// Width
			$("#posterOverDiv").append(str);											// Add image to poster
			}	
		if (typeof(DrawPosterOverviewGrid) == "function")								// If not embedded
			DrawPosterOverviewGrid();													// Draw grid in overview if enabled
		var css = { position:"absolute",												// Box factors
					border:"1px solid #666",
					"z-index":3,
					"background-color":"rgba(220,220,220,0.4)"
					};
		str="<div id='posterOverBox'></div>";											// Control box div
		$("#posterOverDiv").append(str);												// Add control box to overview frame
		$("#posterOverBox").css(css);													// Set overview frame
		$("#posterOverBox").draggable({ containment:"parent", 							// Make it draggable 
							drag:function(event,ui) {									// Handle drag						
								var w=$("#posterOverDiv").width();						// Overview width
								var pw=$("#posterDiv").width();							// Poster width
								var h=$("#posterOverDiv").height();						// Overview hgt
								var ph=$("#posterDiv").height();						// Poster hgt
								var s=shivaLib.posterScale;								// Current scale
								var x=Math.max(0,ui.position.left/w*pw);				// Calc left
								var y=Math.max(0,ui.position.top/h*ph);					// Calc top
								shivaLib.posterX=(x+(pw/s/2))/pw; 						// Get center X%
								shivaLib.posterY=(y+(ph/s/2))/ph;  						// Get center Y%
								$("#posterDiv").css({"left":-x+"px","top":-y+"px"});	// Position poster	
								$("#propInput0").val(shivaLib.options.pos=Math.round(shivaLib.posterScale*1000)+"|"+Math.round(shivaLib.posterX*1000)+"|"+Math.round(shivaLib.posterY*1000));  // Set cur pos
								if (shivaLib.options.chartType == "Zoomable")			// If a zoomable
								  	shivaLib.SendShivaMessage("ShivaImage=move",shivaLib.options.pos); // Send message
								}
							 });		
		$("#posterOverBox").resizable({ containment:"parent",						// Resizable
								aspectRatio:true,
								minHeight:12,
								stop:function(event,ui) {								// On resize stop
									var w=$("#posterOverDiv").width();					// Overview width
									var pw=$("#posterDiv").width();						// Poster width
									var h=$("#posterOverDiv").height();					// Overview hgt
									var ph=$("#posterDiv").height();					// Poster hgt
									shivaLib.posterScale=Math.max(w/ui.size.width,1); 	// Get new scale, cap at 100%					
									var s=shivaLib.posterScale;							// Current scale
									var x=Math.max(0,ui.position.left/w*pw);			// Calc left
									var y=Math.max(0,ui.position.top/h*ph);				// Calc top
									shivaLib.posterX=(x+(pw/s/2))/pw; 					// Get center X%
									shivaLib.posterY=(y+(ph/s/2))/ph;  					// Get center Y%
									$("#propInput0").val(shivaLib.options.pos=Math.round(shivaLib.posterScale*1000)+"|"+Math.round(shivaLib.posterX*1000)+"|"+Math.round(shivaLib.posterY*1000));  // Set cur pos
									shivaLib.PositionPoster();							// Redraw
									if (shivaLib.options.chartType == "Zoomable")		// If a zoomable
								  		shivaLib.SendShivaMessage("ShivaImage=move",shivaLib.options.pos); // Send message
									}
								}); 
			}
		var x=$("#posterDiv").css("left").replace(/px/,"");								// Get x pos
		x=-x/w/4*w/this.posterScale;													// Scale to fit
		var y=$("#posterDiv").css("top").replace(/px/,"");								// Get y pos
		y=-y/h/4*h/this.posterScale;													// Scale to fit
		$("#posterOverBox").width(w/this.posterScale).height(h/this.posterScale);		// Set size
		$("#posterOverBox").css({"left":x+"px","top":y+"px"});							// Position control box		
}

SHIVA_Show.prototype.DrawPosterPanes=function(num, mode) 							// DRAW POSTER PANES
{
	var i,v,u,str,dw,dh,x,y,s=0,isImg=true;
	var scale=this.posterScale;
	var e=this.items.length;															// Assume end is all items
	var w=$("#posterDiv").width();														// Poster width
	var h=$("#posterDiv").height();														// Poster height
	if (num != -1) s=num,e=num-0+1;														// Just draw one
	for (i=0;i<e;++i) {																	// For each pane
		v=this.items[i].data.split("|");												// Get specs
		dw=v[0]/1000*w;																	// Div width
		if (this.items[i].asp)															// If loaded
			dh=dw*this.items[i].asp/1000;												// Div height based on aspect
		else																			// Not loaded yet
			dh=v[0]/1000*h;																// Div height based on poster frame
		x=w*v[1]/1000-(dw/2);															// Set centered left
		y=h*v[2]/1000-(dh/2);															// Set centered top
		str="<div id='posterPane"+i+"' style='position:absolute;background:none transparent;";	// Base
		if (this.items[i].style) 														// If a style spec'd
			str+=this.items[i].style.replace(/\|/g,";").replace(/=/g,":");				// Add it
		str+="'>"
		u=this.items[i].url;															// Point at url
		if (isImg=u.match(/\.jpg|\.jpeg|\.gif|\.png/i))									// If an image file
			str+="<img src='"+this.items[i].url+"' width='100%'>";						// Image				
		else if (u) {																	// Something else
				if (this.items[i].asp)														// If loaded
				srs="go.htm?srs=100&";													// Resize to 100%
			else																		// First time
				srs="go.htm?";															// Get in original aspect ratio
			if (!isNaN(u))																// If a number
				u=srs+"e="+u;															// Add file base
			else if ((u.match(/e=/)) || (u.match(/M=/)))								// An eStore or drupal
				u=srs+u;																// Add file base
			if (u.match(/go.htm/))														// A shiva module
				u+="&if="+i;															// Add id
			str+="<iframe id='posterFrame-"+i+"' src='"+u+"'";							// Iframe base
			if (this.items[i].scrollbars == "false")									// If not scrolling
				str+="scrolling='no' ";													// Inhibit it
			str+="frameborder='0' allowtransparency='true'></iframe>";					// Finish iframe				
			}
		if (mode == "draw") {															// If doing them all, or redrawing one
			$("#posterPane"+i).remove();												// Remove old one, if there
			$("#posterDiv").append(str+"</div>");										// Add div to poster
			if (this.posterMode == "Edit") {											// If editing
				str="<div style='position:absolute;left:0px;top:0px;width:100%;height:100%;border:1px dashed'>";	// Make overlay div for dragging
				str+="<div id='posterPaneLab"+i+"' style='position:absolute;left:0px;text-shadow:1px 1px #eee'>";
				str+="<b> "+(i+1)+". "+this.items[i].layerTitle+"</b></div>";			// Label
				$("#posterPane"+i).append(str+"</div>");								// Add div
				}
			else if (this.items[i].caption) {											// If a caption
				str="<div style='font-size:small;position:absolute;left:0px;top:100%;width:100%;padding:4px;text-align:center'><b>"+shivaLib.LinkToAnchor(this.items[i].caption)+"</b>";// Show it
				$("#posterPane"+i).append(str+"</div>");								// Add div
				}
			if ((this.posterMode != "Edit") && (this.items[i].drag == "true")) {		// If in draggable view
				str="<div style='position:absolute;left:0px;top:0px;width:80%;height:20px;'>";	// Make overlay div for dragging
				$("#posterPane"+i).append(str+"</div>");								// Add div
				$("#posterPane"+i).draggable({ containment:"parent" });					// Make draggable		
				}
			}
		$("#posterFrame-"+i).height(dh);												// Set iframe height
		$("#posterFrame-"+i).width(dw);													// Set iframe width
		$("#posterPane"+i).height(dh);													// Set pane height
		$("#posterPane"+i).width(dw);													// Set pane width
		$("#posterPane"+i).css({"left":x+"px","top":y+"px"});							// Set pos			
		$("#posterPaneLab"+i).css("top",$("#posterPane"+i).height()+3+"px");			// Set label pos			
		if (this.options.overview == "true")  {											// If showing overview
			str="<div id='posterOverPane"+i+"' style='position:absolute;opacity:.4;border:1px solid white;pointer-events:none;background-color:#666'/>";	// Base
			if (mode == "draw") 														// If adding to dom
				$("#posterOverDiv").append(str);										// Add div to overview
			x=$("#posterPane"+i).position().left;										// Get left
			y=$("#posterPane"+i).position().top;										// Get top
			$("#posterOverPane"+i).css({"left":x/4/scale+"px","top":y/4/scale+"px"});	// Set pos			
			$("#posterOverPane"+i).height(dh/4/scale);									// Set pane height
			$("#posterOverPane"+i).width(dw/4/scale);									// Set pane width
			}
		if ((mode == "resize") && (u)) {												// If resizing a filled iframe
			if (u.match(/go\.htm/)) {													// If a  SHIVA module		
				var win=document.getElementById("posterFrame-"+i).contentWindow;		// Point at iframe	
				win.postMessage("ShivaAct=resize","*");									// Send message to container
				}
			}
		if (this.posterMode != "Edit") 													// If viewing
			continue;																	// No need for interaction

		$("#posterPane"+i).resizable({ 	containment:"parent",							// Resizable
										aspectRatio:!(shivaLib.items[i].url.match(/http/)),
										stop:function(event,ui) {						// On resize stop
											var i=event.target.id.substr(10);			// Extract id
											var v=shivaLib.items[i].data.split("|");	// Get parts
											v[0]=Math.floor(Math.min(ui.size.width/$("#containerDiv").width()/shivaLib.posterScale,1)*1000); // Get new scale, cap at 100%					
											shivaLib.items[i].data=v[0]+"|"+v[1]+"|"+v[2];				// Set new size
											$("#itemInput"+i+"-1").val(shivaLib.items[i].data);			// Put in menu
											if (shivaLib.items[i].url.match(/http/)) { 					// If not a shiva module
												var asp=Math.round(ui.size.height/ui.size.width*1000);	// Set asp string
												shivaLib.items[i].asp=asp;								// Set new asp
												$("#itemInput"+i+"-2").val(asp);						// Set props
												}
											shivaLib.DrawPosterPanes(i,"resize");						// Redraw this pane, and resize 								
											}
										});
		
		$("#posterPane"+i).draggable({  containment:"parent",							// Draggable
										drag:function(event,ui) {						// On drag stop
											var i=event.target.id.substr(10);			// Extract id
											var v=shivaLib.items[i].data.split("|");	// Get parts
											var w=$("#posterDiv").width();				// Poster wid
											var h=$("#posterDiv").height();				// Poster hgt
											var off=0;									// Iframe offset
											if (shivaLib.items[i].url.match(/[[.]jpg|jpeg|gif|png]/i))	// If an image file
												off=12*shivaLib.posterScale;			// Set offset
											v[1]=Math.round(($("#posterPane"+i).position().left+$("#posterPane"+i).width()/2)/w*1000);
											v[2]=Math.round(($("#posterPane"+i).position().top+$("#posterPane"+i).height()/2+off)/h*1000);
											shivaLib.items[i].data=v[0]+"|"+v[1]+"|"+v[2];		// Set new pos
											$("#itemInput"+i+"-1").val(shivaLib.items[i].data);	// Put in menu									
											shivaLib.DrawPosterPanes(i,"drag");			// Redraw this pane in overview									
											}
										});
		}	
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   EvA METHODS 
//   Documentation: https://docs.google.com/document/d/1Q42_K0Li7ZDtXfY27neZuo7aENZ-yGybKAYMFNBTGqg/edit
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

function EvA() 														// CONSTRUCTOR
{
	this.ondos=new Array();												// Hold ondo statements
	this.data=new Array();												// Holds table data
	if (window.addEventListener) 
		window.addEventListener("message",$.proxy(this.ShivaEventHandler,this),false); // Add event listener
	else
		window.attachEvent("message",$.proxy(this.ShivaEventHandler,this),false); // Add event listener
}

EvA.prototype.Run=function(ondoList) 								// RUN
{
	var i,o;
	this.data=[];														// Clear table data
	for (i=0;i<this.ondos.length;++i) {									// For each ondo
		o=this.ondos[i];												// Point at ondo
		o.done=0;														// Not done yet
		if (o.on == "init")												// If an init
			this.RunOnDo(o);											// Run it
		}
	}

EvA.prototype.RunOnDo=function(ondo) 								// RUN AN INIT ONDO
{
	var str,o,i;
	var to=ondo.to;														// Save to
	var from=ondo.from;													// Save to
	if (!isNaN(to))    	to="posterFrame-"+(to-1);						// True iframe ids
	if (!isNaN(from)) 	from="posterFrame-"+(from-1);					// True iframe ids
	switch(ondo.Do) {													// Route on type
		case "load": 													// Load an iframe
			str=ondo.src;												// Set url
			if (!to.match(/posterFrame-/)) {							// If loading a data file							
	   			shivaLib.GetSpreadsheet(str,false,null,function(data){	// Get spreadsheet data
					ondo.ready=true;									// Done
					shivaLib.eva.data[ondo.to]=data;					// Save data in table def'd by 'to'
					},true);											// Add fields too
				break;
				}
			if (ondo.src.indexOf("e=") == 0)							// An eStore
				str="//www.viseyes.org/shiva/go.htm?srs=100&"+ondo.src;	// Make url
			else if (ondo.src.indexOf("m=") == 0)						// A Drupal manager
				str="//shiva.shanti.virginia.edu/go.htm?srs=100&m=//shiva.virginia.edu/data/json/"+ondo.src.substr(2);	// Make url
			else if (ondo.src.indexOf("E=") == 0)						// eStore test
				str="//127.0.0.1:8020/SHIVA/go.htm?srs=100&e="+ondo.src.substr(2);	// Make url
			else if (ondo.src.indexOf("M=") == 0)						// Drupal test
				str="//127.0.0.1:8020/SHIVA/go.htm?srs=100&m=//shiva.virginia.edu/data/json/"+ondo.src.substr(2);	// Make url
			$("#"+to).attr("src",str);									// Set src
				break;
		case "fill": 													// Fill an iframe
			if ((!ondo.src) || (!this.data[ondo.src]))					// No src
				break;													// Quit
			str="ShivaAct=data|";										// Base			
			str+=this.TableToString(this.data[ondo.src])				// Add table data
			this.SendMessage(to,str);									// Send message to iframe
			break;
		case "tell": 													// Run an action
			str="ShivaAct="+ondo.src;									// Add base
			for (i=1;i<7;++i) {											// For each possible param
				if (ondo["p"+i]) 										// If it is set
					str+="|"+ondo["p"+i];								// Add it
				}
			this.SendMessage(to,str);									// Send message to iframe
			break;
		case "script": 													// Add a script
			if (!ondo.src)												// If no source
				break;													// Quit
			var s=document.createElement("script");						// Create new element
			$("#scr-"+ondo.to).remove();								// Remove old one
			s.id="scr-"+ondo.to;										// Set id same a fname
			s.setAttribute('type','text/javascript');					// JS
			str="function "+ondo.to+"(p1,p2,p3,p4,p5,p6,p7){";			// Function header
			str+=ondo.src.replace(/&apos;/g,"\'").replace(/&quot;/g,"\"").replace(/&br;/g,"\n");	// Unescape ', ", & \n
			s.appendChild(document.createTextNode(str+"}"));			// Add text node
			document.getElementsByTagName('head').item(0).appendChild(s);	// Add to DOM
	 		break;
		case "call": 													// Run a callback
			window[ondo.to](ondo.p1,ondo.p2,ondo.p3,ondo.p4,ondo.p5,ondo.p6);// Callback
			break;
		case "filter": 													// Run a query
			if (!ondo.src || !ondo.to)									// If no source/dest
				break;													// Quit
			this.data[ondo.to]=[];										// New array
			this.Query(this.data[ondo.src],this.data[ondo.to],ondo.query,ondo.p1,ondo.p2);	// Run query on table
			break;
		}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   MESSAGING  
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

EvA.prototype.ShivaEventHandler=function(e) 						// CATCH SHIVA EVENTS
{
	var from;
	var i,o,n=this.ondos.length;
	var v=e.data.split("|");											// Get parts
	if (v[0].match(/ShivaChart=ready/)) {								// A ready message
		if (v[1].match(/posterFrame-/)) 								// A frame ready
			if ((i=v[1].substr(12)) && (v.length > 2)){					// Get id
				if (!shivaLib.items[i].asp[i]) {						// If not set
					shivaLib.items[i].asp=v[2];							// Set it
					$("#itemInput"+i+"-2").val(v[2]);					// Set props
					}
				}
		}
	v[0]=v[0].split("=")[1];											// Strip prefix
	for (i=0;i<n;++i) {													// For each ondo
		o=this.ondos[i];												// Point at it
		from=o.from;													// Copy
		if (!isNaN(o.from)) from="posterFrame-"+(o.from-1);				// True iframe ids
		if (o.on == "ready") { 											// A ready message
			if ((!o.done) && (v[1] == from) && (v[0] == "ready")) {		// If it matches source and not done yet
				o.done++;												// Mark it done
				this.RunOnDo(o);										// Do it
				}
			}
		else if ((v[1] == from) && (v[0] == o.on))						// If it matches source and type
			this.HandleOnEvent(o,e.data);								// Handle it
		}
}

EvA.prototype.HandleOnEvent=function(ondo, data) 					// HANDLE INCOMING EVENT
{
	var run=new Object();												// New run obj
	for (o in ondo)														// For each field in on field
		run[o]=ondo[o];													// Add to run obj
	if ((!run.p1) && (run.Do == "call")) {								// If params not defined for a callback
		var v=data.split("|");											// Get on params
		if (v[1] != undefined)	run.p1=v[1];							// Add param from on
		if (v[2] != undefined)	run.p2=v[2];							// Add 
		if (v[3] != undefined)	run.p3=v[3];							// Add 
		if (v[4] != undefined)	run.p4=v[4];							// Add 
		if (v[5] != undefined)	run.p5=v[5];							// Add 
		if (v[6] != undefined)	run.p6=v[6];							// Add 
		}	
	this.RunOnDo(run);													// Run it
}

EvA.prototype.SendMessage=function(con, msg) 						// SEND HTML5 MESSAGE TO IFRAME
{
	var win=document.getElementById(con).contentWindow;					// Point at iframe	
	win.postMessage(msg,"*");											// Send message to container
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////
//   DATA TABLES  
/////////////////////////////////////////////////////////////////////////////////////////////////////////////


EvA.prototype.TableToString=function(table) 						// SAVE TABLE AS STRING
{
	var i,j,val,str="[";
	var cols=table[0].length-1;											// Number of fields
	var rows=table.length-1;											// Number of rows
	for (i=0;i<=rows;++i) {												// For each event
		str+="[";														// Begin row
		for (j=0;j<=cols;++j) { 										// For each value
			val=table[i][j];											// Get value
			if ((isNaN(val)) || (!val)) {								// If not a number or blank		
				str+="\""+val+"\"";										// Add value
				}
			else														// A number
				str+=val;												// Add it
			if (j != cols)												// If not last
				str+=",";												// Add comma
			}
		str+="]";														// End row
		if (i != rows)													// If not last
			str+=",";													// Add comma
		}
	return str+"]";														// Return stringified array
}

EvA.prototype.Query=function(src, dst, query, fields, sort) 		// RUN QUERY
{
	var v,j,i=0;
	var allFields=false;												// Assume selected fields
	var nAnds=0;														// Assume no AND clauses yet
	if (!src || !dst)													// No data
		return;															// Quit
	var n=src.length;													// Length of table
	var clause=new Array();												// Holds clauses
	var ands=new Array();												// Holds hits of AND clauses
	var ors=new Array();												// Holds hits of OR clauses

	if ((!fields) || (fields == "*")) { 								// If no fields spec'd
		fields=src[0];													// Return all fields
		allFields=true;													// Fast track
		}
	else																// Only these fields
		fields=fields.split("+");										// Split buy '+'
	if ((!query) || (query == "*"))										// If no query spec'd
		query="* * *";													// Return all rows

	var o=new Object();													// Create obj
	clause.push(o);														// Add 1st clause
	o.type="AND";														// 1st is AND
	v=query.split(" ");													// Tokenize
	while (i < v.length) {												// For each token	
		o.hits=[];														// No hits yet
		o.field=v[i++];													// Field
		o.cond=v[i++];													// Condition
		o.what=v[i++];													// Field
		if ((i < v.length) && (v[i] != "AND") && (v[i] != "OR"))		// Must have space in what word phrase
			o.what+=" "+v[i++];											// Ad next what word
		if (i < v.length) {												// For each token
			o={};														// Fresh obj
			o.type=v[i++];												// Type
			clause.push(o);												// Add new clause
			}
		}	
	for (i=0;i<clause.length;++i) {										// For each clause
		o=clause[i];													// Point at clause
		h=ands;															// Point at ands array to store hits
		if (o.type == "OR")												// Unless it's an OR
			h=ors;														// Point at ors array
		else															// An AND
			nAnds++;													// Add to count
		for (j=0;j<src[0].length;++j) 									// For each field
			if (o.field == src[0][j]) {									// If name matches
				o.field=j;												// Replace name with num
				break;													// Quit looking
				}
		for (j=1;j<n;++j) {												// If each row
			if (o.cond == "*")	{										// Always
				h.push(j-1);											// Add it to clause									
				}
			if (o.cond == "LT")	{										// Less than
				if (src[j][o.field] < o.what)							// A hit
					h.push(j-1);										// Add it to clause									
				}
			else if (o.cond == "GT") {									// Greater than
				if (src[j][o.field] > o.what)							// A hit
					h.push(j-1);										// Add it to clause		
				}							
			if (o.cond == "LE")	{										// Less than or equal
				if (src[j][o.field] <= o.what)							// A hit
					h.push(j-1);										// Add it to clause									
				}
			else if (o.cond == "GE") {									// Greater than or equal
				if (src[j][o.field] >= o.what)							// A hit
					h.push(j-1);										// Add it to clause		
				}							
			if (o.cond == "EQ")	{										// Equal
				if (src[j][o.field] == o.what)							// A hit
					h.push(j-1);										// Add it to clause									
				}
			if (o.cond == "NE")	{										// Not equal
				if (src[j][o.field] != o.what)							// A hit
					h.push(j-1);										// Add it to clause									
				}
			if (o.cond == "LK")	{										// Like
				if (src[j][o.field].toLowerCase().indexOf(o.what.toLowerCase()) != -1)	// A hit
					h.push(j-1);										// Add it to clause									
				}
			if (o.cond == "NL")	{										// Not like
				if (src[j][o.field].toLowerCase().indexOf(o.what.toLowerCase()) == -1)	// A hit
					h.push(j-1);										// Add it to clause									
				}
			}
		}

	var results=new Array();											// Make new array to hold results
	if (nAnds == 1) 													// If just one AND clauses
		results=ands;													// Take hits from ands
	else {																// Multiple AND clauses
		var thisOne;
		n=ands.length;													// Number of AND hits
		var matches=1;													// Set matches counter
		for (i=0;i<n;++i) {												// For each and hit
			thisOne=ands[i];											// Point at current and hit
			for (j=i+1;j<n;++j) {										// For following ands
				if (ands[j] == thisOne)									// A match
					++matches;											// Add to count
				if (matches == nAnds)	{								// Enough to add row to results	
					results.push(ands[i]);								// Add to results
					matches=1;											// Reset matches
					break;												// Stop looking for this one
					}
				}
			}
		}
	n=results.length;													// Number of hits
	if (ors.length) {													// If any OR clauses
		for (i=0;i<ors.length;++i) {									// For each or hit
			for (j=0;j<n;++j) 											// For each result
				if (ors[i] == results[j])								// If already in
					break;												// Quit
			if (j == n)													// Didn't have it already
				results.push(ors[i]);									// Add to results
			}
		}
	
	n=fields.length;													// Number of fields
	if (allFields) {													// If doing all fields
		for (i=0;i<results.length;++i) 									// For each result
			dst.push(src[results[i]]);									// Add row
		}
	else{																// Selected fields
		var ids=new Array();
		for (i=0;i<n;++i) { 											// For each desired field
			for (j=0;j<src[0].length;++j) 								// For each possible field
				if (fields[i] == src[0][j]) {							// If name matches
					ids[i]=j;											// Replace name with num
					break;												// Quit looking
					}
			}
		for (i=0;i<results.length;++i) {								// For each result
			o=[];														// New array
			for (j=0;j<n;++j) 	{										// For each result
				o.push(src[results[i]+1][ids[j]]);						// Add data (skip header)
			}
			dst.push(o);												// Add row
			}
		}
	
	if (sort) {															// If sorting
		var dir=1;														// Assume ascending
		if (sort.charAt(0) == "-") {									// If neg	
			dir=-1;														// Sort descending
			sort=sort.substr(1);										// Eemove '-'
			}
		for (j=0;j<n;++j) 												// For each field
			if (sort == src[0][j]) {									// If name matches
				sort=j;													// Replace name with num
				break;													// Quit looking
				}
		dst.sort(function(a,b) { return a[sort] > b[sort]?-1*dir:1*dir });	// Sort it
		}
	dst.splice(0,0,fields);												// Set header
}

	///////////////////////////////////////////////////////////////////////////////////////////////
//  SHIVALIB IMAGE
///////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Show.prototype.DrawImage=function() 												//	DRAW IMAGE
{
	var i,v,o,str;
	var options=this.options;
	var container=this.container;
	var con="#"+container;
	var _this=this;
	if (!options.chartType)																	// If not type defined (legacy)
		options.chartType="Slideshow";														// Make it slideshow	
	if (options.chartType == "Slideshow") {													// If slideshow or single image
		if (options.dataSourceUrl.indexOf("//docs.google.com") != -1)						// Google doc
 	   		GetSpreadsheetData(options.dataSourceUrl,options.imgHgt,options.showImage,options.showSlide,options.transition,options.width);
  		 else if (options.dataSourceUrl) {
	   		$("#"+this.container).html("<img id='"+this.container+"Img' "+"width='"+options.width+"' src='"+options.dataSourceUrl+"'/>");
			if (options.height)
				$(con).css('height',options.height);
			this.SendReadyMessage(true);											
			}
		else
			this.SendReadyMessage(true);	
		}										
	else if ((options.chartType == "Zoomable") && (options.dataSourceUrl)) 					// If zoomable
		this.DrawPoster("Image");															// Draw poster
	else if (options.chartType == "Montage") {												// If montage
		var items=new Array();																// Alloc iteems array
	   	for (var key in options) {															// For each item
			if (key.indexOf("item-") != -1) {												// If an item
				o={};																		// Alloc obj
				v=options[key].split(';');													// Split by ;
				for (i=0;i<v.length;++i)													// For each field
					o[v[i].split(':')[0]]=v[i].split(':')[1].replace(/\^/g,"&").replace(/~/g,"=").replace(/\`/g,":");
				items.push(o);
				}
			}
		this.items=items;
		$(con).height(options.height);														// Set height
		$(con).width(options.width);														// Set width
		var act=$("#accord").accordion("option","active");									// Get active
   		if ((act === false) || (isNaN(act)) || (!$("#accord").length))						// If no image or in go.htm
   			act=0;																			// Force to first
		if (!this.imageMob)																	// If fist time
			this.imageMob={ div:this.container+"Img" };										// Init obj
 		this.imageMob.start=0;																// Start fresh
  		this.imageMob.curMob=act;															// Set curMob
  	 	this.imageMob.audioStart=0;															// Start fresh
		for (i=0;i<act;++i)																	// Run up to act
			this.imageMob.audioStart+=items[i].dur-0;										// Add time
		this.imageMob.numMobs=items.length;													// Number of mobs
   		clearInterval(shivaLib.imageMob.interval);											// Clear timer
		shivaLib.imageMob.interval=0;														// Clear var

		$(con).html("<img id='"+this.container+"Img' "+"' src='"+items[act].url+"' onclick='shivaLib.DrawImage()'/>"); // Add image
		if (act < items.length-1)															// If not last image
			$(con).append("<img id='"+this.container+"Img2' "+"' src='"+items[act+1].url+"' style='display:none' />");	// Preload next image
		$("#"+this.container+"Snd").remove();												// Remover old ones
		this.imageMob.snd=null;																// No audio object		
		if (options.audio) {																// If an audio file
			var file=options.audio.substr(0,options.audio.length-4);						// Remove extension
			str="<audio id='"+this.container+"Snd'";										// Base
			str+="><source src='"+file+".ogg' type='audio/ogg'><source src='"+file+".mp3' type='audio/mpeg'></audio>";	// Add sources
			$(con).append(str);																// Add audio to container
			this.imageMob.snd=document.getElementById(this.container+"Snd");				// Point at audio object
			this.imageMob.snd.volume=options.volume/100;									// Set volume
			}
		str="<div id='"+this.container+"Title'";											// Base
		if (options.etitle == "true") 	str+=" contenteditable='true'";						// If editable, set flag
		else							str+=" onclick='shivaLib.DrawImage()'";				// If not, repond to clicks
		str+="style='top:0px;left:0px;height:90%;width:90%;padding:5%;position:absolute;"; 	// Pos
		str+="font-size:"+options.height/20+"px;font-weight:bold;";							// Set height/bold
		str+="text-align:center;text-shadow:5px 5px 10px black;color:white'>";				// Text format		
		str+=items[act].title+"</div>";														// Add title
		$(con).append(str);																	// Add title overlay to container
		if ($("#accord").length)															// If editing	
			this.AnimateDiv("full");														// Draw full image
		else																				// Playing in go.htm
			this.AnimateDiv("start");														// Draw image at start pos
		if ((options.autoplay == "true") && (!$("#accord").length))							// If autoplay in go.htm
			$("#"+this.container+"PlyBut").trigger("click");								// Trigger play								
		this.SendReadyMessage(true);														// Send ready messge										
		}
		
 	  function GetSpreadsheetData(url, imgHgt, showImage, showSlide, trans, wid) {			// GET DATA FROM SPREADSHEET

		shivaLib.GetSpreadsheet(url,false,null,function(data) {								// Get spreadsheet data
  	     	AddImages(data,imgHgt,showImage,showSlide,trans,wid);							// Add images to gallery
		 	shivaLib.SendReadyMessage(true);												// Send ready message
  	    	});
 		}

  
  http://127.0.0.1:8020/SHIVA/go.htm?shivaGroup=Poster&item-1=name:Pane-1;data:250|437|285;url:599;asp:654;layerTitle:Montage;scrollbars:false;caption:Montage%20-%20Demo;style:border`3px%20solid%20white&item-2=name:Pane-2;data:250|438|621;asp:1000;url:610;layerTitle:Network;scrollbars:false;caption:Network%20-%20Demo;style:border`3px%20solid%20white&item-3=name:Pane-3;data:272|720|284;asp:610;url:500;layerTitle:Video%20-%20Demo;scrollbars:false;caption:Video%20-%20Demo;style:border`3px%20solid%20white&item-4=name:Pane-4;asp:764;data:356|761|588;url:586;layerTitle:Timeline%20-%20Demo;scrollbars:false;caption:Timeline%20-%20Demo;style:border`3px%20solid%20white&pos=1000|500|500&eva=&height=900&width=1400&backCol=fffcf2&dataSourceUrl=https://lh6.googleusercontent.com/-O-8_RgU9WCU/UoYskYStOyI/AAAAAAAAL_0/gwopG2GnaLo/w1440-h900-no/Creative-Sanford-Background-300.png&overview=true&grid=false&controlbox=false&ud=false
   
  
   	function AddImages(data, imgHgt, showImage, showSlide, transition, wid)				// ADD IMAGES TO GALLERY
 	{
		var str="<div id='gallery' class='ad-gallery'>"
		if (showImage == "true")
			str+="<div class='ad-image-wrapper'></div>";
		if (showSlide == "true")
			str+="<div class='ad-controls'></div>";
		str+="<div class='ad-nav'><div class='ad-thumbs'><ul class='ad-thumb-list'>"
		for (var i=1;i<data.length;++i) {
			str+="<li><a href='"+data[i][0]+"'><img height='"+imgHgt+" 'src='"+data[i][0]+"'";
			if (data[i][1])
				str+=" title='"+data[i][1]+"'";		
			if (data[i][2])
				str+=" alt='"+data[i][2]+"'";		
	   		str+=" class='image"+i+"'></a></li>";
	   		}
	    str+="</ul></div></div></div>";
	    $("#"+container).html(str);																// Add slideshow
	  	$('.ad-gallery').adGallery()[0].settings.effect=transition;								// Set transition style
	    $("#gallery").css("background","#ddd");													// Gray b/g
		if (wid.match(/%/)) {																	// If a percent
			wid=wid.replace(/%/,"")/100;														// Lop off % and turn to val
			wid=$("#"+container).width()*wid;													// Get a real #
			}
		$(".ad-gallery").css("width",wid+"px");													// Set wid 
 	}

}  // Closure end


SHIVA_Show.prototype.AnimateDiv=function(mode)									// ANIMATE/POSITION DIV
{
	var o,v;
	var mob=shivaLib.imageMob;														// Point at mob
 	if (!mob)																		// Nothing there
 		return;																		// Q!uit
 	if (mode == "next") {															// Advance to next pic
 		if (mob.curMob < shivaLib.items.length-1)	{								// If not last pic
 			mob.curMob++;															// Inc
			shivaLib.imageMob.start=new Date().getTime();							// Set start
			shivaLib.imageMob.interval=setInterval(shivaLib.AnimateDiv,42);			// Set timer ~24fps
			}
 		else{																		// All done
			if (shivaLib.imageMob.snd)												// If a sound object
				shivaLib.imageMob.snd.pause();										// Stop playing
			if (!$("#accord").length)												// If in go.htm
				mob.curMob=0;														// Back to the top
			$("#"+shivaLib.container+"PlyBut").show();								// Show play button
		  	shivaLib.SendShivaMessage("ShivaImage=done");							// Done
			return;																	// Quit
	 		}
	 	}
 	var o=shivaLib.items[mob.curMob];												// Point at current item
	v=o.sp.split(",");	mob.sx=v[0]-0; 	mob.sy=v[1]-0; 	mob.sw=v[2]-0;				// Start pos
  	v=o.ep.split(",");	mob.ex=v[0]-0; 	mob.ey=v[1]-0; 	mob.ew=v[2]-0;				// Emd pos
   	mob.dur=o.dur-0;	mob.fx=o.fx;	mob.url=o.url;	mob.ease=o.ease;			// Misc options
   	mob.title=o.title;													
 	$("#"+shivaLib.container+"Title").html(mob.title);								// Set title
	$("#"+shivaLib.container).css("overflow","hidden");								// Extra is hidden
	if (($("#"+shivaLib.container+"PlyBut").length == 0) && mob.dur) {				// If no playbut yet, but animated
		$("#"+shivaLib.container).append("<img id='"+this.container+"PlyBut' src='playbut.gif' style='position:absolute;top:48%;left:47%;padding:2px;padding-left:18px;padding-right:18px' class='propTable' width='18'>");
		$("#"+shivaLib.container+"PlyBut").click( function(){						// Play button click handler
			$(this).hide();															// Hide it 
			if (shivaLib.imageMob.snd) {											// If a sound object
				if (shivaLib.imageMob.snd.readyState)								// If ready
					shivaLib.imageMob.snd.currentTime=shivaLib.imageMob.audioStart;	// Cue audio
				shivaLib.imageMob.snd.play();										// Start playing
				}
			clearInterval(shivaLib.imageMob.interval);								// Clear timer
			shivaLib.imageMob.start=new Date().getTime();							// Set start
			shivaLib.imageMob.interval=setInterval(shivaLib.AnimateDiv,42);			// Set timer ~24fps
		  	shivaLib.SendShivaMessage("ShivaImage=play");							// Playing
			});	
		}
 	if (mob.url != $("#"+mob.div).attr('src'))	{									// If not same url
 	 	$("#"+mob.div).attr('src',shivaLib.items[mob.curMob].url);					// Set src
 	 	if (mob.curMob < mob.numMobs-1)												// If not last mob
 	 		$("#"+mob.div+"2").attr('src',shivaLib.items[mob.curMob+1].url);		// Preload next one
		}
	var pct=(new Date().getTime()-mob.start)/(mob.dur*1000);						// Get percentage
	if (mob.start == 0)																// If first time
		pct=0;																		// Start at beginning
	if (pct >= .99) { 																// If done
		clearInterval(shivaLib.imageMob.interval);									// Clear timer
		shivaLib.imageMob.interval=0;												// Clear var
		mob.start=0;																// Stop recursing for some reason
		shivaLib.AnimateDiv("next");												// Get next pic
 		return;
		}
 	if (mob.start == 0)																// If first time
		pct=0;																		// Start at beginning
	if (mob.ease == "both")															// Both
		pct=1.0-((Math.cos(3.1414*pct)+1)/2.0);										// Full cosine curve
	else if (mob.ease == "in")														// Slow in
		pct=1.0-(Math.cos(1.5707*pct));												// 1st quadrant of cosine curve
	else if (mob.ease == "out")														// Slow out
		pct=1.0-(Math.cos(1.5707+(1.5707*pct))+1.0);								// 2nd quadrant of cosine curve
	var o={ position:"relative"};													// Position mode
	o.left=(mob.sx+((mob.ex-mob.sx)*pct))/100;										// Calc left
	o.top=(mob.sy+((mob.ey-mob.sy)*pct))/100;										// Calc top
	o.width=1000000/((mob.sw+((mob.ew-mob.sw)*pct)));								// Calc width
	o.opacity=(mob.sa+((mob.ea-mob.sa*pct))/100);									// Calc alpha
	o.left=(-o.width*(o.left/100))+"%";												// Scale left
	o.top=(-o.width*(o.top/100))+"%";												// Scale top
	o.width+="%"																	// Add %
	if ((mode == "full") &&	($("#accord").length)) {								// If full image
  		o.top=o.left="0%",o.width="100%",o.opacity=1;								// Ignore settings	
  		$("#"+shivaLib.container).css("overflow","visible");						// Show extra
  		}
	$("#"+mob.div).css(o);															// Set css 
}

SHIVA_Show.prototype.ImageActions=function(msg)									// REACT TO SHIVA ACTION MESSAGE
{
	var v=msg.split("|");															// Split msg into parts
	if (v[0] == "ShivaAct=resize") {  												// RESIZE
		if (v[1] == "100") 															// If forcing 100%
			shivaLib.options.width=shivaLib.options.height="100%";					// Set values
		shivaLib.DrawImage();														// Redraw image
		}
	else if (v[0] == "ShivaAct=play") {   											// PLAY
		if (!shivaLib.imageMob.interval)											// If not playing
			$("#"+this.container+"PlyBut").trigger("click");						// Trigger play								
		}
	else if (v[0] == "ShivaAct=pause") {   											// PAUSE
		if (shivaLib.imageMob.interval)												// If not paused
			shivaLib.DrawImage();													// Redraw image to pause
		}
}

                      
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GOOGLE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Show.prototype.GoogleDriveLoad=function(allFiles, callback)			// GOOGLE IMPORTER
{
	var _this=this;																// Save context
 	
	LoadGoogleDrive(true, function(s) {
		callback(s.url);
		});
	
 	function LoadGoogleDrive(allFiles, callback)								// LOAD PICKER FOR GOOGLE DRIVE
	{
	  	var pickerApiLoaded=false;
		var oauthToken;
		var key="AIzaSyAVjuoRt0060MnK_5_C-xenBkgUaxVBEug";
		var id="81792849751-1c76v0vunqu0ev9fgqsfgg9t2sehcvn2.apps.googleusercontent.com";
		if (window.location.hostname.match("virginia.edu") || window.location.hostname.match("visuals.dd")) {
			id="783824671276-f555r8jak4qqrunab0ksmn1elg01hjhc.apps.googleusercontent.com"; 			// UVA client id & api key
			key="AIzaSyDO7EDm14EXi44pLkarnB8jjqI90LSa61g";
			}
		gapi.load('auth', { 'callback': function() {
				window.gapi.auth.authorize( {
	              	'client_id': id,
	             	'scope': ['https://www.googleapis.com/auth/drive'],
	              	'immediate': false }, function(authResult) {
							if (authResult && !authResult.error) {
	          					oauthToken=authResult.access_token;
	          					createPicker();
	          					}
	          				});
				}
			});
		
		gapi.load('picker', {'callback': function() {
				pickerApiLoaded=true;
		        createPicker();
	    	   	}
			});
	
		function createPicker() {
	        if (pickerApiLoaded && oauthToken) {
	//         	var upview=new google.picker.DocsUploadView();
	           	var view=new google.picker.DocsView().
	           		setOwnedByMe(allFiles).
					setIncludeFolders(true);
	          	var picker=new google.picker.PickerBuilder().
	          		addView(view).
	//         		addView(upview).
					setOAuthToken(oauthToken).
					setDeveloperKey(key).
					setCallback(pickerCallback).
					build();
				picker.setVisible(true);
	       		}
	    	}
	
		function pickerCallback(data) {
	        if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {
         		var doc=data[google.picker.Response.DOCUMENTS][0];
	      		callback(doc)
	       		}
			}
	   
	}	// End closure
}


///////////////////////////////////////////////////////////////////////////////////////////////
//  SHIVALIB DATA ACCESS (CSV/GOOGLE DOCS)
///////////////////////////////////////////////////////////////////////////////////////////////


SHIVA_Show.prototype.GetSpreadsheet=function(url, fields, query, callback, addHeader, sendError) 		//	GET GOOGLE DOCS SPREADSHEET
{
	this.spreadsheetError=null;
	if (url.indexOf("google.com") != -1) {									// If Google doc
		var query=new google.visualization.Query(url);						// Make query object	
		query.send(handleGoogleResponse);									// Fetch data
		}
	else{																	// A CSV
		$.ajax({															// Fetch file
			type:  'GET',													// a GET
			url:   'proxy.php',												// Use proxy for cross-domain issue
			data:  { url : url },											// Add url
			async: false }													// Async									
		).complete(handleCSVResponse); 										// Callback
	}

   function handleCSVResponse(response) {								// HANDLE INCOMING DATA
	    var i,j,o,lab;
		var keys=new Array();												
		var theData=new Array();
		if (!response.responseText && sendError) {							// If no data and sending
			callback(null,url);												// Send to callback
			return(null)													// Return null
			}
		var data=shivaLib.parseCSV(response.responseText);					// Parse CSV
		var cols=data[0].length;											// Get cols
		if (addHeader || fields) {											// If setting header
			for (i=0;i<data[0].length;++i) {								// For each header
		 		lab=$.trim(data[0][i]);										// Get trimmed lab
				if (!lab)													// If noting there
				 	break;													// Quit
				keys.push(lab);												// Add to keys array
				}
			cols=keys.length;												// Cols = keys length
			}
		var rows=data.length;												// Set rows

		if (fields) {														// If fielded JSON mode
			for (i=1;i<rows;++i) {											// For each row
				o={};														// New obj
				for (j=0;j<keys.length;++j) 								// For each key
					o[keys[j]]=data[i][j];									// Get data
				theData.push(o);											// Add to result
	 			}
			}
		else{																// Nested arrays
			if (addHeader)													// If adding a header
 				theData.push(keys);											// Add it
			for (i=0;i<rows;++i) {											// For each row
 				o=[];														// New sub-array
				for (j=0;j<cols;++j) {										// For each col
					if (isNaN(data[i][j])) 									// If a string
						o.push(data[i][j]);									// Add to result
					else													// If a number
						o.push((data[i][j]-0));								// Cast and add to result
					}
  				theData.push(o);											// Add row
				}
			}
		callback(theData,url);												// Send to callback
	}			

     
    function handleGoogleResponse(response) {							// HANDLE INCOMING DATA
	    var i,j,o,lab;
		var keys=new Array();												
		var theData=new Array();
		var data=response.getDataTable();									// Try getting table from Google
		if (!data && sendError) {											// If no data and sending
			callback(null,url);												// Send to callback
			return(null)													// Return null
			}
		var cols=data.getNumberOfColumns();									// Get cols
		var rows=data.getNumberOfRows();									// Get rows
		if (addHeader || fields) {											// If setting header
			for (i=0;i<cols;++i) {											// For each field
			 	lab=$.trim(data.getColumnLabel(i));							// Get trimmed lab
				if (!lab)													// If noting there
			 		break;													// Quit
				keys.push(lab);												// Add to keys array
				}
			cols=keys.length;												// Cols = keys length
			if (addHeader)													// If adding header
				theData.push(keys);											// Add it
			}
		if (fields) {														// If fielded JSON mode
			for (i=0;i<rows;++i) {											// For each row
				o={};														// New obj
				for (j=0;j<keys.length;++j) 								// For each key
					o[keys[j]]=data.getValue(i,j);							// Get data
				theData.push(o);											// Add to result
	 			}
			}
		else{																// Nested arrays
			for (i=0;i<rows;++i) {											// For each row
 				o=[];														// New sub-array
				for (j=0;j<cols;++j) 										// For each col
					o.push(data.getValue(i,j));								// Add to result
   				theData.push(o);
				}
			}
		callback(theData,url);												// Send to callback
   	}															
};

SHIVA_Show.prototype.parseCSV=function(str) 							// PARSE CSV TO NESTED ARRAYS
{
	var arr=[];
	var quote=false;  														// True means we're inside a quoted field
   	str=str.replace(/\\r\\n/g,"\n");										// Convert \r\n -> \n
  	str=str.replace(/\\n\\r/g,"\n");										// Convert \n\r -> \n
	for (var row=col=c=0;c < str.length;c++) {   							// Iterate over each character, keep track of current row and column (of the returned array)
		var cc=str[c],nc=str[c+1];        									// Current character, next character
		arr[row]=arr[row] || [];             								// Create a new row if necessary
		arr[row][col]= arr[row][col] || '';   								// Create a new column (start with empty string) if necessary
		if (cc == '"' && quote && nc == '"') { arr[row][col] += cc; ++c; continue; }  // If the cur char is ", and we're inside a quoted field, and the next char is also a ", add a " to the current column and skip the next character
		if (cc == '"') { quote = !quote; continue; }        				// If it's just one quotation mark, begin/end quoted field
		if (cc == ',' && !quote) { ++col; continue; }      					// If it's a comma and we're not in a quoted field, move on to the next column
		if (cc == '\n' && !quote) { ++row; col = 0; continue; }        		// If it's a newline and we're not in a quoted field, move on to the next row and move to column 0 of that new row
		arr[row][col] += cc;        										// Otherwise, append the current character to the current column
		}
	return arr;																// Return nested arrays
}


SHIVA_Show.prototype.Query=function(src, dst, query, fields, sort) 	// RUN QUERY
{
	var v,j,i=0;
	var allFields=false;												// Assume selected fields
	var nAnds=0;														// Assume no AND clauses yet
	if (!src || !dst)													// No data
		return;															// Quit
	var n=src.length;													// Length of table
	var clause=new Array();												// Holds clauses
	var ands=new Array();												// Holds hits of AND clauses
	var ors=new Array();												// Holds hits of OR clauses

	if ((!fields) || (fields == "*")) { 								// If no fields spec'd
		fields=src[0];													// Return all fields
		allFields=true;													// Fast track
		}
	else																// Only these fields
		fields=fields.split("+");										// Split buy '+'
	if ((!query) || (query == "*"))										// If no query spec'd
		query="* * *";													// Return all rows

	var o=new Object();													// Create obj
	clause.push(o);														// Add 1st clause
	o.type="AND";														// 1st is AND
	v=query.split(" ");													// Tokenize
	while (i < v.length) {												// For each token	
		o.hits=[];														// No hits yet
		o.field=v[i++];													// Field
		o.cond=v[i++];													// Condition
		o.what=v[i++];													// Field
		if ((i < v.length) && (v[i] != "AND") && (v[i] != "OR"))		// Must have space in what word phrase
			o.what+=" "+v[i++];											// Ad next what word
		if (i < v.length) {												// For each token
			o={};														// Fresh obj
			o.type=v[i++];												// Type
			clause.push(o);												// Add new clause
			}
		}	
	for (i=0;i<clause.length;++i) {										// For each clause
		o=clause[i];													// Point at clause
		h=ands;															// Point at ands array to store hits
		if (o.type == "OR")												// Unless it's an OR
			h=ors;														// Point at ors array
		else															// An AND
			nAnds++;													// Add to count
		for (j=0;j<src[0].length;++j) 									// For each field
			if (o.field == src[0][j]) {									// If name matches
				o.field=j;												// Replace name with num
				break;													// Quit looking
				}
		for (j=1;j<n;++j) {												// If each row
			if (o.cond == "*")	{										// Always
				h.push(j-1);											// Add it to clause									
				}
			if (o.cond == "LT")	{										// Less than
				if (src[j][o.field] < o.what)							// A hit
					h.push(j-1);										// Add it to clause									
				}
			else if (o.cond == "GT") {									// Greater than
				if (src[j][o.field] > o.what)							// A hit
					h.push(j-1);										// Add it to clause		
				}							
			if (o.cond == "LE")	{										// Less than or equal
				if (src[j][o.field] <= o.what)							// A hit
					h.push(j-1);										// Add it to clause									
				}
			else if (o.cond == "GE") {									// Greater than or equal
				if (src[j][o.field] >= o.what)							// A hit
					h.push(j-1);										// Add it to clause		
				}							
			if (o.cond == "EQ")	{										// Equal
				if (src[j][o.field] == o.what)							// A hit
					h.push(j-1);										// Add it to clause									
				}
			if (o.cond == "NE")	{										// Not equal
				if (src[j][o.field] != o.what)							// A hit
					h.push(j-1);										// Add it to clause									
				}
			if (o.cond == "LK")	{										// Like
				if (src[j][o.field].toLowerCase().indexOf(o.what.toLowerCase()) != -1)	// A hit
					h.push(j-1);										// Add it to clause									
				}
			if (o.cond == "NL")	{										// Not like
				if (src[j][o.field].toLowerCase().indexOf(o.what.toLowerCase()) == -1)	// A hit
					h.push(j-1);										// Add it to clause									
				}
			}
		}

	var results=new Array();											// Make new array to hold results
	if (nAnds == 1) 													// If just one AND clauses
		results=ands;													// Take hits from ands
	else {																// Multiple AND clauses
		var thisOne;
		n=ands.length;													// Number of AND hits
		var matches=1;													// Set matches counter
		for (i=0;i<n;++i) {												// For each and hit
			thisOne=ands[i];											// Point at current and hit
			for (j=i+1;j<n;++j) {										// For following ands
				if (ands[j] == thisOne)									// A match
					++matches;											// Add to count
				if (matches == nAnds)	{								// Enough to add row to results	
					results.push(ands[i]);								// Add to results
					matches=1;											// Reset matches
					break;												// Stop looking for this one
					}
				}
			}
		}
	n=results.length;													// Number of hits
	if (ors.length) {													// If any OR clauses
		for (i=0;i<ors.length;++i) {									// For each or hit
			for (j=0;j<n;++j) 											// For each result
				if (ors[i] == results[j])								// If already in
					break;												// Quit
			if (j == n)													// Didn't have it already
				results.push(ors[i]);									// Add to results
			}
		}
	
	n=fields.length;													// Number of fields
	if (allFields) {													// If doing all fields
		for (i=0;i<results.length;++i) 									// For each result
			dst.push(src[results[i]]);									// Add row
		}
	else{																// Selected fields
		var ids=new Array();
		for (i=0;i<n;++i) { 											// For each desired field
			for (j=0;j<src[0].length;++j) 								// For each possible field
				if (fields[i] == src[0][j]) {							// If name matches
					ids[i]=j;											// Replace name with num
					break;												// Quit looking
					}
			}
		for (i=0;i<results.length;++i) {								// For each result
			o=[];														// New array
			for (j=0;j<n;++j) 	{										// For each result
				o.push(src[results[i]+1][ids[j]]);						// Add data (skip header)
			}
			dst.push(o);												// Add row
			}
		}
	
	if (sort) {															// If sorting
		var dir=1;														// Assume ascending
		if (sort.charAt(0) == "-") {									// If neg	
			dir=-1;														// Sort descending
			sort=sort.substr(1);										// Eemove '-'
			}
		for (j=0;j<n;++j) 												// For each field
			if (sort == src[0][j]) {									// If name matches
				sort=j;													// Replace name with num
				break;													// Quit looking
				}
		dst.sort(function(a,b) { return a[sort] > b[sort]?-1*dir:1*dir });	// Sort it
		}
	dst.splice(0,0,fields);												// Set header
}
///////////////////////////////////////////////////////////////////////////////////////////////
//  SHIVALIB GRAPH
///////////////////////////////////////////////////////////////////////////////////////////////

SHIVA_Show.prototype.DrawGraph=function() 							//	DRAW GRAPH
{
	var i,j,o,shape,id=0;
	var options=this.options;											// Local options
	var con="#"+this.container;											// Container
	var svg=null,nodes=null,edges=null,labels=null;						// Pointers to d3 data
	var dataSet=null;													// Holds data
	var d3Zoom;															// Scale/zoom
	var minZoom=.1,maxZoom=10;											// Zoom range
	var margins=[0,0,0,0];												// Default margins
	var canPan=true;													// Can pan/zoom screen
	var firstTime=true;
		
	var unselectable={"-moz-user-select":"none","-khtml-user-select":"none",	
		   			  "-webkit-user-select":"none","-ms-user-select":"none",
		   			  "user-select":"none","pointer-events":"none" }
	
	$(con).css("overflow","hidden")										// Keep in container

	if (!$("d3Popup").length)											// If not popup div yet
		$("body").append("<div id='d3Popup' class='rounded-corners' style='display:none;position:absolute;border:1px solid #999;background-color:#eee;padding:8px'></div>");
	
	var styles=new Object();											// Styles

	if (options.backCol == "none")										// If  transparent
		$(con).css("background-color","transparent");					// Set background color
	else																// Normal color
		$(con).css("background-color","#"+options.backCol);				// Set background color
	$(con).width(options.width);										// Set width
	if (options.height)													// If height spec'd												
		$(con).height(options.height);									// Set height
	else																// Not spec'd
		$(con).height(options.width),h=w;								// Use width
	$(con).html("");													// Clear div
	var colors=d3.scale.category10();									// Default colors
	var opHeight=$(con).height();										// Get height in pixels
	var opWidth=$(con).width();											// Get width in pixels
 	var w=opWidth;														// Width
	var h=opHeight;														// Height

	// SVG /////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
	
	svg=d3.select(con)													// Add SVG to container div
		.append("svg")													// Add SVG shell
		.attr("width",w-margins[0]-margins[2]).attr("height",h-margins[1]-margins[3])	// Set size
		.call(d3Zoom=d3.behavior.zoom().scaleExtent([minZoom,maxZoom]).on("zoom",zoomed)) // Set zoom
 		.append("g")													// Needed for pan/zoom
    	
	svg.append("defs")													// Add defs section
	    .append("clipPath")
	    .attr("id","cp0")
	    .append("rect").attr("width",w).attr("height",h).attr("x",100).attr("y",0)
	    
	svg.append("rect")													// Pan and zoom rect
		.style({"fill":"none","pointer-events":"all"})					// Invisble
    	.attr("id","underLayer")										// Set id
    	.attr("width",w).attr("height",h)								// Set size
    	.on("click",function(){ $("#d3Popup").hide(); });				// Hide any open popups				
	
	// DATA //////////////////////////////////////////////////////////////////////////////////////////////////////
	
	if ((options.chartType == "Network") || (options.chartType == "Chord")) {	// Force directed or chord
		if (options.dataSourceUrl) 										// If a spreadsheet spec'd
	    	this.GetSpreadsheet(options.dataSourceUrl,false,null,function(data) {	// Get spreadsheet data
				var ids=new Object();
				dataSet={ nodes:[],edges:[]};							// Clear data
				styles={};												// Clear styles
				for (i=0;i<data.length;++i) {							// For each row
					if (!data[i][0])									// If no data
						continue;										// Skip
					for (j=0;j<5;++j)									// For each possible field
						if (data[i][j])									// If exists
							data[i][j]=data[i][j].replace(/[\n|\r]/,"");// Remove CR/LFs							
					if (data[i][0].match(/link-class/i)) {				// If a link-class
						if (!styles[data[i][1]])						// If new
							styles[data[i][1]]={};						// Create new style object
						if (data[i][2].match(/color/i))					// A color
							styles[data[i][1]].eCol=data[i][3];			// Set it
						if (data[i][2].match(/type/i))					// A shape
							styles[data[i][1]].shape=data[i][3];		// Set it
						if (data[i][2].match(/linewidth/i))				// A line width
							styles[data[i][1]].eWid=data[i][3];			// Set it
						if (data[i][2].match(/linecolor/i))				// A line color
							styles[data[i][1]].eCol=data[i][3];			// Set it
						if (data[i][2].match(/alpha/i))					// alpha
							styles[data[i][1]].alpha=data[i][3];		// Set it
						}
					else if (data[i][0].match(/class/i)) {				// If a class
						if (!styles[data[i][1]])						// If new
							styles[data[i][1]]={};						// Create new style object
						if (data[i][2].match(/color/i))					// A color
							styles[data[i][1]].col=data[i][3];			// Set it
						if (data[i][2].match(/type/i))					// A shape
							styles[data[i][1]].shape=data[i][3];		// Set it
						if (data[i][2].match(/linewidth/i))				// A line width
							styles[data[i][1]].eWid=data[i][3];			// Set it
						if (data[i][2].match(/linecolor/i))				// A line color
							styles[data[i][1]].eCol=data[i][3];			// Set it
						if (data[i][2].match(/alpha/i))					// Alpha
							styles[data[i][1]].alpha=data[i][3];		// Set it
						if (data[i][2].match(/dim/i))					// Size
							styles[data[i][1]].size=data[i][3];			// Set it
						}
					else if (data[i][0].match(/node/i)) {				// If a node
						o={};											// New object
						o.name=data[i][2];								// Add name
						o.id=data[i][1];								// Add id
						if (data[i][3])									// If a style set
							o.style=data[i][3];							// Add style
						if (data[i][4])									// If an info set
							o.info=data[i][4];							// Add info
						ids[o.id]=dataSet.nodes.length;					// Set index
						dataSet.nodes.push(o);							// Add node to list
						}
					else if (data[i][0].match(/link/i)) {				// If a link
						o={};											// New object
						o.source=data[i][1];							// Add name
						o.target=data[i][3];							// Add id
						o.style=data[i][2];								// Add style
						dataSet.edges.push(o);							// Add node to list
						}
					}
		
	 			for (j=0;j<dataSet.edges.length;++j) {					// For each edge
	 				dataSet.edges[j].source=ids[dataSet.edges[j].source];	// Convert id to index
	 				dataSet.edges[j].target=ids[dataSet.edges[j].target];	// Convert id to index
	 				}
	  			redraw();												// Draw graph
				});
		else if (dataSet)												// If data
			redraw();													// Draw graph
		}
	else if ((options.chartType == "Tree") || (options.chartType == "Bubble")) {	// Tree like data
		if (options.chartType == "Bubble")	minZoom=1;					// Cap zoom at 1
		if (options.dataSourceUrl) {									// If a spreadsheet spec'd
  			var nodeLink=false;											// Assume simple format
   			this.GetSpreadsheet(options.dataSourceUrl,false,null,function(data) {	// Get spreadsheet data
			var items=new Array();										// Holds items
			for (i=0;i<data.length;++i) 								// For each row
				if (data[i][0] == "link") {								// If link node
					nodeLink=true;										// Node/link format
					break;												// Quit looking
					}
			if (nodeLink) {												// If using line/node format
				var ids=new Object();
				dataSet={ nodes:[],edges:[]};							// Clear data
				for (i=0;i<data.length;++i) {							// For each row
					if (!data[i][0])									// If no data
						continue;										// Skip
					else if (data[i][0].match(/node/i)) {				// If a node
						o={};											// New object
						o.name=data[i][2];								// Add name
						o.id=data[i][1];								// Add id
						if (data[i][4])									// If an info set
							o.info=data[i][4];							// Add info
						ids[o.id]=dataSet.nodes.length;					// Set index
						dataSet.nodes.push(o);							// Add node to list
						}
					else if (data[i][0].match(/class/i)) {				// If a class
						if (!styles[data[i][1]])						// If new
							styles[data[i][1]]={};						// Create new style object
						if (data[i][2].match(/color/i))					// A color
							styles[data[i][1]].col=data[i][3];			// Set it
						if (data[i][2].match(/type/i))					// A shape
							styles[data[i][1]].shape=data[i][3];		// Set it
						if (data[i][2].match(/linewidth/i))				// A line width
							styles[data[i][1]].eWid=data[i][3];			// Set it
						if (data[i][2].match(/linecolor/i))				// A line color
							styles[data[i][1]].eCol=data[i][3];			// Set it
						if (data[i][2].match(/alpha/i))					// Alpha
							styles[data[i][1]].alpha=data[i][3];		// Set it
						if (data[i][2].match(/dim/i))					// Size
							styles[data[i][1]].size=data[i][3];			// Set it
						}
					else if (data[i][0].match(/link/i)) {				// If a link
						o={};											// New object
						o.source=data[i][1];							// Add name
						o.target=data[i][3];							// Add id
						o.style=data[i][2];								// Add style
						dataSet.edges.push(o);							// Add node to list
						}
					}
	 			for (i=0;i<dataSet.edges.length;++i) {						// For each edge
	 				dataSet.edges[i].source=ids[dataSet.edges[i].source];	// Convert id to index
	 				dataSet.edges[i].target=ids[dataSet.edges[i].target];	// Convert id to index
	 				}
				var v=[];
	 			for (i=0;i<dataSet.nodes.length;++i) {					// For each node
		 			v[i]=0;
		 			for (j=0;j<dataSet.edges.length;++j) {				// For each edge
						if (dataSet.edges[j].source == i) {				// Source is this node
							o={};										// New object
							o.val=1;									// Put 1 in
							v[dataSet.edges[j].target]=1;				// Has a parent
							o.parent=dataSet.nodes[i].name;				// Set name
							o.style=dataSet.edges[j].style;
							o.name=dataSet.nodes[dataSet.edges[j].target].name;	// Set parent
							items.push(o);								// Add to array
							}
						}
					}
	 			for (i=0;i<dataSet.nodes.length;++i) 					// For each node
	 				if (!v[i]) {										// If not linked to anything
	 					items.splice(0,0,{name:dataSet.nodes[i].name,parent:"root", val:1});	// Add as root
	 					break;											// Quit looking
						}
				}
			else{														// Simple tree format
				for (i=0;i<data.length;++i) {							// For each row
					if (!data[i][0])									// If no data
						continue;										// Skip
				 	if (!data[i][0].match(/node/i)) 					// If not a node
						continue;										// Skip
					o={};												// New object
					o.name=data[i][2];									// Add name
					o.parent=data[i][1];								// Add parent
					if (data[i][3])										// If an info set
						o.val=data[i][3];								// Add val
					else												// If nothing there
						o.val=1;										// Put 1 in
					if (data[i][4])										// If an info set
						o.info=data[i][4];								// Add info
					items.push(o);										// Add to array
					}
				}

		dataSet=[];														// Init as array first

		var dataMap=items.reduce(function(map, node) {					// Create datamap					
			map[node.name]=node;
			return map;
			},{});
 
 		items.forEach(function(node) {									// For each item	
			var parent=dataMap[node.parent];							// Make map
			if (parent) {												// If a parent
				(parent.children || (parent.children = []))				// If an array present
					.push(node);										// Add to it
				} 
			else														// No parent
				dataSet.push(node);										// Add node to root
			});
			
		dataSet=dataSet[0];												// Save as object
		dataSet.x0=h/2;													// Center x
		dataSet.y0=0;													// At top
		if (options.depth > 0)											// If limiting
			dataSet.children.forEach( function (d){ setOpen(d,0) }); 	// Initialize the display to show only certain levels

		function setOpen(d, depth) {								// SET OPEN NODES
			++depth;													// Add to depth
			if (d.children) {											// If node has children									
				d.children.forEach(function (d){ setOpen(d,depth) });	// Toggle all children
				if ((d.children) && (depth > (options.depth-1))) {		// If it has children and over depth
					d._children=d.children;								// Save old children
					d.children=null;									// Clear current children to close it
			  		} 
				}
			}
		redraw();														// Draw
		});
		}
	}
	else if (options.chartType == "Stream") {							// Stream
		minZoom=1;														// Cap zoom at 1
		if (options.dataSourceUrl) 										// If a spreadsheet spec'd
	    	this.GetSpreadsheet(options.dataSourceUrl,false,null,function(data) {	// Get spreadsheet data
			dataSet=[];													// Init as array 
			var nRows=data.length;										// Number of rows
			var nSets=data[0].length-1;									// Number of datasets
			for (i=1;i<nSets;++i) {										// For each dataset
				for (j=1;j<nRows;++j) {									// For time point
					o={};												// New obj
					o.key=data[0][i];									// Set field name as key
					o.date=new Date(data[j][0]).getTime();				// Set date in milliseconds < 1970
					o.value=data[j][i]-0;								// Set value
					dataSet.push(o);									// Add item
					}
				}
			redraw();													// Draw
			},true);
	}																	
	else if (options.chartType == "Parallel") {							// Parallel
		minZoom=1;														// Cap zoom at 1
		if (options.dataSourceUrl) 										// If a spreadsheet spec'd
	    	this.GetSpreadsheet(options.dataSourceUrl,false,null,function(data) {	// Get spreadsheet data
			dataSet=[];													// Init as array 
			var nRows=data.length;										// Number of rows
			var nSets=data[0].length;									// Number of datasets
			for (i=1;i<nRows;++i) {										// For each row
				var o={};												// New obj
				o.name=data[i][0];										// Set field name as key
				for (j=1;j<nSets;++j) 									// For each field
					o[data[0][j]]=data[i][j]-0;							// Set value
				dataSet.push(o);										// Add item
				}
			redraw();													// Draw
			},true);
	}																	
	
		
	function zoomed() {													// ZOOM HANDLER
 		var t;
 		if (!canPan)
 			return;
 		var scale=d3.event.scale;										// Set current scale
 		var tp=[margins[0]-0,margins[3]-0];								// Move to margins
 		if (options.chartType == "Tree")								// Tree is x/y flopped
 			t=tp[0],tp[0]=tp[1],tp[1]=t;								// Flop coords
		if (!d3.event.sourceEvent.shiftKey)								// Don't move with shift key down (to allow node dragging)
			tp[0]+=d3.event.translate[0],tp[1]+=d3.event.translate[1]	// Set translation
 		svg.attr("transform","translate("+tp+") scale("+scale+")");		// Do it
 		if (options.chartType == "Bubble")								// Bubble needs text control
		 	if (options.style == "Packed")
			 	svg.selectAll("text")									// Add text
					.attr("font-size",options.lSize/scale+"px")			// Size
					   .text(function(d) { return d.name.substring(0,d.r/3*scale); });	// Set text
			} 	
	
	
	// DRAW /////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
	
	
	function redraw(what) {												// DRAW

		// NETWORK /////////////////////////////////////////////////////////////////////////////////////////////////////////////////		

		if (options.chartType == "Network") {							// Force directed
			
			force=d3.layout.force()									// CREATE LAYOUT
				 .nodes(dataSet.nodes)									// Set nodes
				 .links(dataSet.edges)									// Set links
				 .size([w,h])											// Set size
				 .linkDistance([options.linkDist])						// Set link distance
				 .charge([options.linkCharge])							// Set charge
				 .gravity([options.linkGravity/100])					// Set gravity
				 .linkStrength(Math.min([options.linkStrength/100],1))	// Set link strength
				 .start();												// Draw
		
			edges=svg.selectAll("line")								// CREATE EDGES
				.data(dataSet.edges);									// Set data
			edges.enter()												// Enter
				.append("line")											// Add line
				.style("stroke", function(d, i) {						// Edge col
					if (d.style && styles[d.style] && styles[d.style].eCol)	// If a style spec'd
						return styles[d.style].eCol;					// Get col from data
					else												// Default
						return "#"+options.eCol;						// Set wid
						})									
				.style("stroke-width", function(d, i) {					// Edge width
					if (d.style && styles[d.style] && styles[d.style].eWid)	// If a style spec'd
						return styles[d.style].eWid;					// Get col from options
					else												// Default
						return options.eWid;							// Set wid
					})									
				.style("opacity", function(d, i) {						// Alpha
					if (d.style && styles[d.style] && styles[d.style].alpha) // If a style spec'd
						return styles[d.style].alpha;					// Get alpha from options
					else												// Default
						return 1;										// Full alpha			
						})

			edges.append("title")									// CREATE EDGE TOOLTIPS
		      	.text(function(d) {										// Set edge tooltip
					var str=d.source.name;								// From
		      		if (d.style)										// If a class
		      		 	str+=" "+d.style+" ";							// Use it
		      		else												// No class
		      		 	str+=" is linked to to ";						// Connects
	      			str+=d.target.name;									// To
		      		return str; 										// Return
		      		});					

			edges.exit().remove();										// Exit function							
	
			nodes=svg.selectAll("g")									// CREATE NODES
				.data(dataSet.nodes);									// Set data
			nodes.enter()												// Enter
				.append(function(d,i) {									// Add shape
					shape=options.nShape;								// Set shape
					if (d.style && styles[d.style] && styles[d.style].shape) // If a style spec'd
						shape=styles[d.style].shape;					// Get shape from options
					return document.createElementNS("http://www.w3.org/2000/svg",shape.toLowerCase() != "circle"?"polygon":"circle");	// Create svg based on shape
					})
				.attr("points",function(d,i) {							// Add points
					shape=options.nShape;								// Set shape
					if (d.style && styles[d.style] && styles[d.style].shape) // If a style spec'd
						shape=styles[d.style].shape;					// Get shape from options
					var size=options.nSize;								// Default size
					if (d.style && styles[d.style] && styles[d.style].size)	// If a style spec'd
						size=styles[d.style].size;						// Get size from options
					return DrawSVGShape(shape.toLowerCase(),size);		// Create svg based on shape
					})
				.attr("r",function(d,i) {								// Add points
					if (d.style && styles[d.style] && styles[d.style].size)	// If a style spec'd
						return styles[d.style].size/2;					// Get size from options
					else												// Default
						return options.nSize/2;							// Return size
					})
				.style("fill", function(d, i) {							// Color
					if (d.style && styles[d.style] && styles[d.style].col)	// If a style spec'd
						return styles[d.style].col;						// Get col from options
					else{												// Default	
						if (options.nCol == "none")						// If no color set														
							return colors(i); 							// Set color from auto colors
						else											// A color set
							return "#"+options.nCol;					// Set color
						}
					})									
				.style("stroke", function(d, i) {						// Edge col
					if (d.style && styles[d.style] && styles[d.style].eCol)	// If a style spec'd
						return styles[d.style].eCol;					// Get col from options
					})									
				.style("stroke-width", function(d, i) {					// Edge width
					if (d.style && styles[d.style] && styles[d.style].eWid)	// If a style spec'd
						return styles[d.style].eWid;					// Get col from options
					})									
				.style("opacity", function(d, i) {						// Alpha
					if (d.style && styles[d.style] && styles[d.style].alpha)	// If a style spec'd
						return styles[d.style].alpha;					// Get alpha from options
					})									
				.on("click",function(d){								// Click on node
			 		shivaLib.SendShivaMessage("ShivaGraph=click",d.name); // Send message
				 	if (!d3.event.shiftKey)								// If not shift key down 
				 		AddPopup(d); 									// Show popup, if one
				 	})	
				.call(force.drag);
			nodes.append("title")									// CREATE EDGE TOOLTIPS
		      	.text(function(d) { 
					var str=d.info;										// Copy info
					if (str && str.match(/http/)) {						// If an embedded url
						var v=(str+" ").match(/http.?:\/\/.*?\s/ig);	// Extract url(s)
						for (var i=0;i<v.length;++i) {					// For each url
							v[i]=v[i].trim();							// Trim it
							str=str.replace(RegExp(v[i].replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&")),"");	// Remove link
							}
						}
		      		return str; });										// Set label
			nodes.exit().remove();										// Exit function							
					  
			labels=svg.selectAll("text")							// CREATE LABELS
				.data(dataSet.nodes);									// Set data
			labels.enter()												// Enter
				.append("text")											// Add div
				.attr("font-family","sans-serif")						// Sans
				.attr("text-anchor", "middle")							// Centered
				.attr("font-size",options.lSize+"px")					// Size
				.attr("fill","#"+options.lCol)							// Color
				.text(function(d) { return d.name; });					// Set text
			labels.exit().remove();										// Exit function							
		
			force.on("tick", function() {								// Every time the simulation "ticks", this will be called
				var size;									
				labels.attr("x", function(d) { return d.x+"px"; })		// Position labels
					.attr("y", function(d) { 							// Set top
						if (d.style && styles[d.style] && styles[d.style].size)	// If a style spec'd
							size=styles[d.style].size;					// Get size from data
						else											// Use default
							size=options.nSize;							// Get size from options
						size=size*.6+options.lSize*1;					// Add text height
						return d.y+size+"px"; 							// Return pos
						});
				edges.attr("x1", function(d) { return d.source.x; })	// Move edges
					.attr("y1", function(d) { return d.source.y; })
					.attr("x2", function(d) { return d.target.x; })
					.attr("y2", function(d) { return d.target.y; });
			
				nodes.attr("transform",function(d) { return "translate("+d.x+" "+d.y+")" }); // Move nodes
				});
			
			}
		
		// TREE /////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
		
		else if (options.chartType == "Tree") {							// Tree
	
		 	margins=[8,8,8,options.spacing/2];						// Margins
	   	 	if (firstTime)
		   	 	svg.attr("transform","translate("+margins[3]+","+margins[0]+")"); // Move into margin area
	   	 	
	   	 	var tree=d3.layout.tree()									// Create tree layout
 		   		.size([h,w]);											// Set size
 			
 			var diagonal=d3.svg.diagonal()								// Create link lines
		    	.projection(function(d) { return [d.y, d.x]; });		// Set projection with x/y crossed
  			nodes=tree.nodes(dataSet).reverse();						// Compute the new tree layout.
			nodes.forEach(function(d) { d.y=d.depth*options.spacing; });// Normalize for fixed-depth.
				
			var node=svg.selectAll("g")									// Update the nodes
		      .data(nodes,function(d) { return d.id || (d.id=++id); });	// Get data
		
			var nodeEnter=node.enter().append("g")	  					// Enter any new nodes at the parent's previous position.
				.attr("transform", function(d) { 						// Initial position
					if (d.parent)										// If not dataSet
						return  "translate("+d.parent.y+","+d.parent.x+")"; // Position to parent dot
					else												// If dataSet
						return  "translate("+dataSet.y0+","+dataSet.x0+")"; // Position to dataSet
				});
		
			nodeEnter.append("circle")									// Add circle
				.attr("r",1e-6)											// Set size
				.style("stroke","#999")									// Edge
				.style("cursor", function(d) { return d._children ? "pointer" : "auto"; })	// Set cursor based on children
				.style("fill", function(d) { return d._children ? "#"+options.nCol : "#fff"; })	// Set color based on children
				.on("click", function(d) { 								// Add click handler
					toggle(d); 	redraw(d); 								// Toggle and redraw
					});	
		
			nodeEnter.append("text")									// Add label
				.style("font-family","sans-serif")						// San serif
				.attr("x", function(d) { var dx=options.lSize/1.5; return d.children || d._children ? -dx : dx; })	// Position based on children
				.attr("dy",".3em")
				.attr("text-anchor", function(d) { return d.children || d._children ? "end" : "start"; }) // Set anchor based on children
				.text(function(d) { return d.name; })					// Set name
				.style("fill-opacity", 1e-6)							// Transparent
				.style("fill",options.lCol)								// Color
				.style("font-size",options.lSize)						// Size
//				.style(unselectable)									// Unselectable
				.on("click", function(d) { 								// Add click handler
			 		shivaLib.SendShivaMessage("ShivaGraph=click",d.name+"|"+d.val); // Send message
					});	
			
			var nodeUpdate=node.transition()	  						// Transition nodes to their new position
				.duration(options.trans)								// Set time
				.attr("transform", function(d) { return "translate("+d.y+","+d.x+")"; });	// Move
		
			nodeUpdate.select("circle")									// Update circle
				.attr("r",options.lSize/2.67)							// Set size
				.style("fill", function(d) { return d._children ? "#"+options.nCol : "#fff"; });	// Set color based on children
		
			nodeUpdate.select("text")									// Update label
				.style("fill-opacity",1);								// Full alpha
		
			var nodeExit=node.exit().transition()	  					// Transition exiting nodes to the parent's new position.
				.duration(options.trans)								// Set time
				.attr("transform", function(d) { return "translate("+d.parent.y+","+d.parent.x+")"; })	// Move to 1st dot
				.remove();												// Remove
		
			nodeExit.select("circle")									// On circle exit
				.attr("r",1e-6);										// Make really small
		
			nodeExit.select("text")										// On text exit
		      .style("fill-opacity",1e-6);								// Make really transparent
		
			var link=svg.selectAll("path")	  							// Update the links
				.data(tree.links(nodes), function(d) { return d.target.id; });	// Set data
		
			link.enter().insert("path","g")	  							// Enter any new links at the parent's previous position
				.style("fill","none")									// No fule
				.style("stroke", function(d, i) {						// Edge col
					if (d.target.style && styles[d.target.style] && styles[d.target.style].eCol)	// If a style spec'd
						return styles[d.target.style].eCol;				// Get col from data
					else												// Default
						return "#"+options.eCol;						// Set wid
						})									
				.style("stroke-width", function(d, i) {					// Edge width
					if (d.target.style && styles[d.target.style] && styles[d.target.style].eWid)	// If a style spec'd
						return styles[d.target.style].eWid;				// Get col from options
					else												// Default
						return options.eWid;							// Set wid
					})									
				.attr("d", function(d) {								// Set path data
					var o={ x:d.source.x,y:d.source.y };				// dataSet dot											
			        return diagonal({source:o, target:o});				// Create diagonal
					})
			link.transition()	  										// Transition links to their new position
				.duration(options.trans)								// Set time
				.attr("d", diagonal);
		
		 	link.exit().transition()	  								// Transition exiting nodes to the parent's new position
				.duration(options.trans)								// Set time
				.attr("d", function(d) {								// Set path data
		       		var o={ x:d.source.x, y:d.source.y };				// Set dot
		       	 	return diagonal({source:o, target:o});				// Set diagonal
		     		})
				.remove();
		
			nodes.forEach(function(d) {	  								// Stash the old positions for transition
				d.x0=d.x;												// Save x
				d.y0=d.y;												// Y
				});
				
			function toggle(d) {										// CLICK HANDLER
				if (d.children) {										// If it has children
					d._children=d.children;								// Save old children
					d.children=null;									// Clear current children
		  			} 
		  		else{													// If no children
					d.children=d._children;								// Restore old children
					d._children=null;									// Clear saved children
				  	}
				}
			}															// End Tree

		// BUBBLE /////////////////////////////////////////////////////////////////////////////////////////////////////////////////		
		
		else if (options.chartType == "Bubble") {						// Bubble graph
  		    colors=d3.scale.category20c();								// Set colors
			var dia=Math.min(opHeight,opWidth)-8;			// Diameter
		  	if (options.style == "Packed") {							// If packed
				var pack=d3.layout.pack()								// Create layout
				    .size([dia,dia])									// Set size
				    .value(function(d) { return d.val ? d.val : 1 });	// Set value to use

				node=svg.datum(dataSet).selectAll(".node")				// Add nodes
				    .data(pack.nodes)									// Set data
				    .enter()											// Add
				    .append("g")										// Add element
	 		     	.attr("transform", function(d) { return "translate("+d.x+","+d.y+")"; });	// Position
				
				node.append("title").text(function(d) { 				// Set tool tip
	     			var str=d.name;										// Add name
	     			if (!d.children && d.val)							// If children and a value
	     				str+=": "+d.val;								// Show it
	     			return str });
				
				node.append("circle")									// Add circle
			      	.attr("r", function(d) {  return d.r; })			// Set diameter
				    .style("stroke","#"+options.gCol)					// Edge
	     			.style("fill", function(d) { return  d.children ? "#"+options.gCol : "#"+options.nCol; })
	 	  			.style("fill-opacity", function(d) { return  d.children ? .15 : 1})
					.style("cursor", function(d) { return d.info ? "pointer" : "auto"; })	// Set cursor presence of info
					.on("click", function(d) {							// Click on node
								shivaLib.SendShivaMessage("ShivaGraph=click",d.name+"|"+d.val); // Send message
								AddPopup(d);							// Show popup
								});								
				node.filter(function(d) { return !d.children; })		// Filter
					.append("text")
			      	.attr("dy",".3em")									// Shift
					.attr("font-family","sans-serif")					// Sans
					.attr("text-anchor", "middle")						// Centered
					.attr("font-size",options.lSize+"px")				// Size
					.attr("fill","#"+options.lCol)						// Color
			      	.style("text-anchor","middle")						// Center
			      	.style(unselectable)								// Unselectable
			      	.text(function(d) { return d.name.substring(0,d.r/3); });	// Set text
					}
		  	else{														// Not packed
				function classes(root) {								// Returns a flattened hierarchy 
					var classes=[];
					
					function recurse(name, node) {
				    	if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
				    	else classes.push({packageName: name, className: node.name, value: node.val});
				  		}
				  	
				  	recurse(null, root);
				  	return {children: classes};
					}
	
				var bubble=d3.layout.pack()								// Create layout
					.size([dia,dia])									// Set size
		    		.padding(options.padding);							// Padding
			  	
				if (options.style != "Spiral")							// If not a spiral
			  		bubble.sort(null)									// Don't sort
			  	
			  	var node=svg.selectAll("node")							// Select the nodes
					.data(bubble.nodes(classes(dataSet))				// Set data							
					.filter(function(d) { return !d.children; }))		// Filter by children
			   
			    node.enter().append("g")								// Add node
			      .attr("transform",function(d) { return "translate("+d.x+","+d.y+")"; });	// Position
			  	
			  	node.append("title")									// Set tool tip
			      .text(function(d) { return d.className + ": " + d.value; });	// Value
				
				node.append("circle")									// Add circle
			      	.attr("r", function(d) { return d.r; })				// Set diameter
			      	.style("fill", function(d) { return colors(d.packageName); })	// Set color
					.on("click", function(d) {							// Click on node
								shivaLib.SendShivaMessage("ShivaGraph=click",d.className+"|"+d.value); // Send message
								AddPopup(d);							// Show popup
								});								
		
		 		node.append("text")										// Add text
			      	.attr("dy",".3em")									// Shift
					.attr("font-family","sans-serif")					// Sans
					.attr("text-anchor", "middle")						// Centered
					.attr("font-size",options.lSize+"px")				// Size
					.attr("fill","#"+options.lCol)						// Color
			      	.style("text-anchor","middle")						// Center
			      	.style(unselectable)								// Unselectable
			      	.text(function(d) { return d.className.substring(0,d.r/3); });
						
			d3.select(self.frameElement).style("height",dia+"px");
			}
		}															// End bubble
	
		// STREAM /////////////////////////////////////////////////////////////////////////////////////////////////////////////////		

		else if (options.chartType == "Stream") {						// Stream graph
			canPan=false;												// No pan/zoom
			var colorRange=["#B30000", "#E34A33", "#FC8D59", "#FDBB84", "#FDD49E", "#FEF0D9"];
			if (options.sCol != "none") {								// Using a specified color set
				colorRange=[];
				var v=options.sCol.split(",");
				for (i=0;i<v.length;++i)	colorRange.push("#"+v[i]);
				}
			var colorSet=d3.scale.ordinal().range(colorRange);			// Scale colorset
			var x=d3.time.scale().range([0,opWidth]);				// Scale x
			var y=d3.scale.linear().range([opHeight-options.lSize-10,options.lSize*1+10]);	// Scale y
						
			var timeBar=d3.select(con)									// Add start/end date bar
		        .append("div")											// Add div
		        .style("position","absolute")							// Setup
		        .style("top",(opHeight-options.lSize-6)+"px").style("left","0px") // Pos
		    	.style("font-size",options.lSize+"px").style("color","#"+options.lCol).style("font-family","sans-serif")
				.html("<span id='startDate'></span><span id='endDate' style='position:absolute;left:"+(opWidth-200)+"px;width:200px;text-align:right'></span>")
			
			var dataBar=d3.select(con)									// Add vertical data bar
		        .append("div")											// Add div
		        .style("position","absolute")							// Setup
		        .style("width","2px").style("height",opHeight-options.lSize*2-20+"px")			// Size
		        .style("pointer-events","none")							// No mouse hits
		        .style("top",(options.lSize-0+10)+"px").style("left","0px").style("background","#fff")  // Pos
		    	.style("font-size",options.lSize+"px").style("color","#"+options.lCol).style("font-family","sans-serif")
				.html("<div id='vdat' style='background-color:#"+options.backCol+";position:absolute;left:-100px;top:"+(-options.lSize-6)+"px;width:200px;text-align:center'></div><div id='vnow' style='background-color:#"+options.backCol+";position:absolute;left:-100px;top:"+(opHeight-options.lSize*2-16)+"px;width:200px;text-align:center'></div>")		
						
			var stack=d3.layout.stack()									// Create layout
					.offset("silhouette")								// Center the stream
			    	.values(function(d) { return d.values; })			// Get values
			   	 	.x(function(d) { return d.date; })					// Plot date on x axis
			    	.y(function(d) { return d.value; });				// Vaalue on y
			
			if (options.style == "Full")	stack.offset("expand")		// Full varient
			if (options.style == "Stacked")	stack.offset("zero")		// Stacked varient
						
			var nest=d3.nest().key(function(d) { return d.key; });		// Nest on keys
			var layers=stack(nest.entries(dataSet));					// Create layers
				
			var area=d3.svg.area()										// Create stream
			    .interpolate("cardinal")								// Use cardinal spline
			    .x(function(d) { return x(d.date); })					// Plot date on x axis
			    .y0(function(d) { return y(d.y0); })					// Plot y0 
			    .y1(function(d) { return y(d.y0+d.y); });				// Plot y1
			  
			x.domain(d3.extent(dataSet, function(d) { return d.date; }));	
		 	y.domain([0,d3.max(dataSet, function(d) { return d.y0+d.y; })]);	
		
			if (options.area == "Flat")	area.interpolate("linear")		// Linear varient
			if (options.area == "Stepped")	area.interpolate("step")	// Stepped varient
		
				svg.selectAll(".layer")									// Add layers
			      		.data(layers)									// Set data
		    			.enter().append("path")							// Add path
				      	.attr("class","layer")							// Set class
			      		.attr("d", function(d) { return area(d.values); })		// Set position
			      		.style("fill", function(d, i) { return colorSet(i); });	// Set color
			
				 svg.selectAll(".layer")								// Point at layers
						.attr("opacity",1)								//  Assunme fully opaque if mouse is out
						.on("mouseover", function(d,i) {				// On mouse over
				      		svg.selectAll(".layer")						// Point at layers
	      		     		.transition().duration(250)					// Quick transition
				     	 	.attr("opacity", function(d,j) {			// Set opacity
				        		return j != i ? 0.6 : 1;				// If over, set to 1, else .6
				    		})
				   	 	})
		
				.on("mousemove", function(d, i) {						// When hovering over layer
						var date=x.invert(d3.mouse(this)[0]).getTime();	// Get date from x pos
				      	var now=date;									// Unique now
				      	var selected=(d.values);						// Selected layer						
						var k=selected.length-1;						// Start at end
						while (k >= 0) {								// Work backwards
		        			if (selected[k].date <= now) {				// If this one
			        			break;									// Quit looking
			        			}
			        		--k;										// Next time
							}				
						d3.select(this).attr("stroke","#000").attr("stroke-width","0.5px")			// Show border
			        	dataBar.style("left",d3.mouse(this)[0]+"px");	// Position data bar
			      		
			      		$("#vnow").text(shivaLib.FormatDate(date,options.dateFormat))
			      		$("#vdat").text(d.key+": "+d.values[k].value)	// Show value
			      		dataBar.style("visibility","visible");			// Show data bar
			    		})

			    .on("mouseout", function(d, i) {						// Stop hovering on layer
			     		svg.selectAll(".layer")							// Get all layers
			      			.transition().duration(250)					// Quick transition
			      			.attr("opacity","1");						// Make layer opaque
			      		d3.select(this).attr("stroke-width","0px");		// Add border	
			      		dataBar.style("visibility","hidden");			// Hide data bar
			  			})
				.on("click",function(d) {								// Click on node
						var date=x.invert(d3.mouse(this)[0]).getTime();	// Get date from x pos
				      	var now=date;									// Unique now
				      	var selected=(d.values);						// Selected layer						
						var k=selected.length-1;						// Start at end
						while (k >= 0) {								// Work backwards
		        			if (selected[k].date <= now) {				// If this one
							 	shivaLib.SendShivaMessage("ShivaGraph=click",shivaLib.FormatDate(date,options.dateFormat)+"|"+d.key+"|"+d.values[k].value); // Send message
			        			break;									// Quit looking
			        			}
			        		--k;										// Next time
							}
				 		});	

			    
			$("#startDate").text(shivaLib.FormatDate(x.invert(0),options.dateFormat));		// Set start date
			$("#endDate").text(shivaLib.FormatDate(x.invert(opWidth),options.dateFormat));	// Set end date
			}															// End Stream
	
		// PARALLEL /////////////////////////////////////////////////////////////////////////////////////////////////////////////////		

		else if (options.chartType == "Parallel") {						// Parallel coords
	    	var y={};
		    var dragging={};
			canPan=false;												// No pan/zoom
			var x=d3.scale.ordinal().rangePoints([0,opWidth],1);	// X scale
			var line=d3.svg.line();										// Lines
			var axis=d3.svg.axis().orient("left").ticks(4).outerTickSize(0); // Axes

			
			svg.attr("height",opHeight-options.lSize*2+"px");
		   	svg.attr("transform", "translate(0,"+options.lSize*3+")");// Move
		   	
		  	x.domain(dimensions=d3.keys(dataSet[0]).filter(function(d) {		// Extract the list of dimensions and create a scale for each.
		  	  	return d != "name" && (y[d]=d3.scale.linear()					// If not a name, scale data point
		        	.domain(d3.extent(dataSet, function(p) { return +p[d]; }))	// Link to domain
		        	.range([opHeight-options.lSize*4,0]));								// Set range
		 	 	}));	
	

			function position(d) {										// GET POSITION
				var v=dragging[d];										// Dragging
			  	return v == null ? x(d) : v;							// Return pos based on in dragging or not
				}
			
			function path(d) {											// GET PATH
		  		return line(dimensions.map(function(p) { return [position(p), y[p](d[p])]; }));
				}
			
			function brush() {											// Handles a brush event, toggling the display of highlight lines.
			  	var actives=dimensions.filter(function(p) { return !y[p].brush.empty(); });
			 	var extents=actives.map(function(p) { return y[p].brush.extent(); });
			 	highlight.style("display", function(d) {
				  		return actives.every(function(p, i) {
							return extents[i][0] <= d[p] && d[p] <= extents[i][1];
				    		}) ? null : "none";
					  });
				}
	
   		   var background=svg.append("g")  								// Draw lines in grey
		   		.selectAll("path")										// All paths
		      	.data(dataSet)											// Set data
		    	.enter().append("path")									// Add path
		      	.attr("d",path)											// Set path data using path()
				.attr("fill","none")									// Lines
				.attr("stroke","#"+options.iCol)						// Inactive color
 				.attr("stroke-opacity",.4)								// Opacity
 	
		   var highlight=svg.append("g")  								// Draw lines in highlight color
		   		.selectAll("path")										// All paths
		      	.data(dataSet)											// Set data
		    	.enter().append("path")									// Add path
		      	.attr("d", path)										// Set path data
				.attr("fill","none")									// Lines
 				.attr("stroke","#"+options.eCol)						// Highlight color
 				.attr("stroke-width",options.eWid)						// Highlight color
				.attr("stroke-opacity",.7)								// Opacity
 
  			background.append("title").text(function(d) { return d.name })	// Tooltip
			highlight.append("title").text(function(d) { return d.name })	// Tooltip
 		 	var g=svg.selectAll(".dimension")  							// Add a dimension group for each dataset
      			.data(dimensions)										// Get dataset names
    			.enter().append("g")									// Add group
		      	.attr("transform", function(d) { return "translate("+x(d)+")"; })	// Position
		      	.call(d3.behavior.drag()								// Create new drag behavior
		        .on("dragstart", function(d) {							// On drag start
		          	dragging[d]=this.__origin__=x(d);					// Set associatie array by name and set origin to xpos of axis
		          	background.attr("visibility", "hidden");			// Hide grey lines
		       		})
   		        .on("drag", function(d) {								// On drag
		          	dragging[d]=Math.min(w,Math.max(0,this.__origin__+=d3.event.dx));	// New xpos
		         	highlight.attr("d",path);											// Set lines
		          	dimensions.sort(function(a,b) { return position(a)-position(b); });	// Sort by position
		          	x.domain(dimensions);
		         	g.attr("transform", function(d) { return "translate("+position(d)+")"; })	
		        	})
		        .on("dragend", function(d) {							// On drag end
		          	delete this.__origin__;								// Remove origin
		          	delete dragging[d];									// Remove from dragging[]
		          	transition(d3.select(this)).attr("transform","translate("+x(d)+")");	// Transition to new position
		          	transition(highlight)								// Reshow highlighted lines
		              	.attr("d",path);								// Move them to new place
		         	background.attr("d",path)							// Set pos of grey lines
		              	.transition().delay(500).duration(0)			// Wait 1/2 sec
		             	.attr("visibility","visible");					// Show grey lines
		        	})
		        );
		 
			 g.append("g")  											// Add an axis and title.
				.style("font-family","sans-serif")						// Sans
				.style("font-size","10px")								// Size
				.attr("fill","#999")									// Text color
 				.style(unselectable)									// Unselectable
				.each(function(d) { d3.select(this).call(axis.scale(y[d])); })
			    .append("text")											// Add axis title
 				.style("font-size",options.lSize+"px")					// Size
				.attr("stroke","none")									// No fill
				.attr("stroke-width",0)									// No fill
				.attr("text-anchor","middle")							// Centered
				.attr("fill","#"+options.lCol)							// Text color
				.attr("y",-options.lSize)								// Position
				.attr("font-weight","bold")								// Bold
				.text(String);
	
		    g.selectAll("path")											// Select the paths
				.attr("fill","none")									// No fill
				.attr("stroke","#999")									// Set loine color
 
 		    g.selectAll(".tick")										// Select the ticks
				.each(function(d,i) {									// For each tick
					 if (!this.transform.baseVal.getItem(0).matrix.f)	// If top-most
					 	this.style['opacity']=0;						// Hide it
					})
		
			g.append("g")		  										// Add and store a brush for each axis.
				.each(function(d) { d3.select(this).call(y[d].brush = d3.svg.brush().y(y[d]).on("brush", brush)); })
		    	.selectAll("rect")										// Select the rect
		      	.attr("x",-8)											// Position left of line
		      	.attr("width",16)										// Set width
				.attr("fill-opacity",.3)								// Set opacity
 	
			function transition(g) {									// TRANSITION
			  return g.transition().duration(500);						// Wait 1/2 sec
				}

			}															// End Parallel

		// CHORD /////////////////////////////////////////////////////////////////////////////////////////////////////////////////		

		else if (options.chartType == "Chord") {						// Chord graph
			canPan=false;												// No pan/zoom
			opHeight=opWidth;											// Got to be square
			var outerRadius=opWidth/2;									// Radius
			var innerRadius=outerRadius-options.padding;				// Real chart area
	
			var cols=[];												// Holds chart colors
			if (options.sCol && (options.sCol != "none")) {				// Using a specified color set
				var v=options.sCol.split(",");							// Get from optiona
				for (i=0;i<v.length;++i)	cols.push("#"+v[i]);		// Add to array
				}
			else{
		 		var c=d3.scale.category20c();							// Default colors
		 		for (i=0;i<20;++i)	cols.push(c(i));					// Add to array
		 		}
			var clen=cols.length-1;										// Wrap factor
	
			function fade(opacity, src) {								// FADE IN/OUT GROUPING
	 			 svg.selectAll(".chord")								// Get all chords
					.filter(function(d,i) { return d.source.index != src && d.target.index != src; })	// If not current
					.transition()										// Transition
			 		.style("opacity", opacity);							// Fade
				}
			
			var chord=d3.layout.chord()									// Set layout
			    .padding(.04)											// Set padding
			    .sortSubgroups(d3.descending)							// Sort bands by subgroups
			    .sortChords(d3.descending);								// Sort chords
			
			var arc=d3.svg.arc()										// Outer band
			    .innerRadius(innerRadius)								// Inner radius
			    .outerRadius((innerRadius+options.bandWidth*1));		// Outer radius
	
		 	svg.attr("transform", "translate("+outerRadius+","+outerRadius+")"); // Position
		  
			var indexByName=d3.map();									// Maps names to index
			var nameByIndex=d3.map();									// Maps index to names
		   	var	matrix=[];												// Correspondence matrix
		
			dataSet.nodes.forEach(function(d,i) {  						// Compute name maps
				nameByIndex.set(i,d.name);								// Add it to map
		 		indexByName.set(d.name,i);								// Add it to inverse map
				});
				
			dataSet.nodes.forEach(function(d) {							// For each node
				var row=[];												// Make new row
				for (i=0;i<dataSet.nodes.length;++i) row[i]=0;			// Add row elements
				matrix.push(row);										// Add row
				});
		
			dataSet.edges.forEach(function(d,i) { 						// For each edge
		    	matrix[d.source][d.target]++;							// Add to count of connections			
		    	matrix[d.target][d.source]++;							// And back			
				});
				
				chord.matrix(matrix);										// Set correspondence matrix
		
			var g=svg.selectAll(".group")								// Add outer groupings
	      		.data(chord.groups)										// For each node
	    		.enter().append("g")									// Add group
	      		.attr("class","group");									// Call it a 'group'
	
		  	g.append("path")											// Add grouping arc
		      	.style("fill",   function(d) { return cols[d.index%clen]; })	// Set fill color
		      	.style("stroke", function(d) { return cols[d.index%clen]; })	// Set edge color
		      	.attr("d",arc)											// Draw grouping
	   			.on("mouseover",function(d,i) { fade(.15,i);} )			// Fade down
	  			.on("mouseout", function() { fade(.67,i);} )				// Fade up
				.on("click",function(d) {								// Click on node
				 		shivaLib.SendShivaMessage("ShivaGraph=click",nameByIndex.get(d.index)+"|"+d.index); // Send message
				 		});	
	    
		  	g.append("text")											// Add node label						
		  		.each(function(d) { d.angle=(d.startAngle+d.endAngle)/2; })	// Angle
		     	.attr("dy",".35em")										// Y offset
		     	.style("font-family","sans-serif")						// Sans
		     	.style("font-size",options.lSize+"px")					// Size
		    	.style("fill","#"+options.lCol)							// Color
		      	.attr("transform", function(d) {						// Position
		       		 return "rotate("+(d.angle*180/Math.PI-90)+")"		// Rotate
		            	+"translate("+(innerRadius*1+options.bandWidth*1+6)+")"	// Position
		            	+(d.angle > Math.PI ? "rotate(180)" : "");		// Flip if over 180 degrees
		     		 })
		      	.style("text-anchor", function(d) { return d.angle > Math.PI ? "end" : null; })	// Flip anchor is > 180 degrees
		      	.text(function(d) { return nameByIndex.get(d.index); });  
	           
                g.append("title").text(function(d, i) {					// Adds mouse over title for nodes.
                    return dataSet.nodes[d.index].info;
              		});
	
			svg.selectAll(".chord")										// Add chords
				.data(chord.chords)										// For each chord
			    .enter().append("path")									// Add a path
			    .attr("class","chord")									// Call it a 'chord'
				.style("stroke-width",options.eWid)
				.style("opacity",.67)
			    .style("stroke", function(d) { return d3.rgb(cols[d.source.index%clen]).darker(); }) // Darker color edge 
			    .style("fill",   function(d) { return options.fill == "false" ?  "none" : cols[d.source.index%clen] })	// Set fill color
			    .attr("d", d3.svg.chord().radius(innerRadius))			// Position
	            .append("title").text(function(d, i) {
	                 var nid1 = d.target.index,
	                       nid2 = d.target.subindex,
	                       rel = FindRelationship(nid1, nid2);
                    return (typeof(rel.label) == "string") ? rel.label : false;
                });



			}															// End Chord

	if (firstTime)														// If first time thru
		shivaLib.SendReadyMessage(true);								// Send ready msg to drupal manager
	firstTime=false;													// Not first time thru
	}																	// End update


/////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////

function AddPopup(d)												// SHOW A POPUP
{
	if (!d || !d.info)													// Nothing to show
		return;															// Quit
	var x=d3.event.clientX+8;											// Set xPos
	var y=d3.event.clientY+8;											// Y
	$("#d3Popup").css({left:x,top:y});									// Position
	$("#d3Popup").html(shivaLib.LinkToAnchor(d.info));					// Add text										
	$("#d3Popup").show();												// Show it
	if (shivaLib.options.popupTime == undefined)						// If not defined
		shivaLib.options.popupTime=2;									// Set default
	$("#d3Popup").delay(shivaLib.options.popupTime*1000).fadeOut(400);	// Close after n seconds
	}

function FindRelationship(n1, n2) 
{
    var rel = {}
	for (var dn in dataSet.edges) {
		var edge = dataSet.edges[dn];
		if ((edge.source == n1 && edge.target == n2)) {
               rel.color = (edge.style in styles) ? styles[edge.style].col : false;
               rel.label = dataSet.nodes[n1].name + " " + edge.style + " " + dataSet.nodes[n2].name;
                break;
           } else if ((edge.source == n2 && edge.target == n1)) {
               rel.color = (edge.style in styles) ? styles[edge.style].col : false;
               rel.label = dataSet.nodes[n2].name + " " + edge.style + " " + dataSet.nodes[n1].name;
               break;
          } 
        }
	return rel;
}


function DrawSVGShape(shape, size)									// DRAW A SHAPE
{
	var i,r,o,pts="";
	size/=2;															// Halve size
	var s2=size/2;														// Quarter
	if (shape == "square") {											// A square
		pts=-size+","+(-size)+" ";
		pts+=size+","+(-size)+" ";
		pts+=size+","+size+" ";
		pts+=-size+","+size+" ";
		return pts;														// Return points
		}
	else if (shape == "triangle") {										// A triangle
		pts="0,"+(-size)+" ";
		pts+=size+","+s2+" ";
		pts+=-size+","+s2+" ";
		return pts;														// Return points
		}
	else if (shape == "caret") {										// A caret
		pts="0,"+(-s2)+" ";
		pts+=size+","+size+" ";
		pts+="0,"+(+s2)+" ";
		pts+=-size+","+size+" ";
		return pts;														// Return points
		}
	else if (shape == "diamond") {										// A diamond
		pts="0,"+(-size*3/2)+" ";
		pts+=size+",0 ";
		pts+="0,"+(size*3/2)+" ";
		pts+=-size+",0 ";
		return pts;														// Return points
		}
	else if (shape == "plus") {											// A plus
		pts=-s2+","+(-s2*3)+" ";
		pts+=s2+","+(-s2*3)+" ";
		pts+=s2+","+(-s2)+" ";
		pts+=(s2+size)+","+(-s2)+" ";
		pts+=(s2+size)+","+(s2)+" ";
		pts+=s2+","+s2+" ";
		pts+=s2+","+(s2*3)+" ";
		pts+=-s2+","+(s2*3)+" ";
		pts+=-s2+","+s2+" ";
		pts+=-s2*3+","+s2+" ";
		pts+=-s2*3+","+(-s2)+" ";
		pts+=-(s2)+","+(-s2)+" ";
		return pts;														// Return points
	}

	var a=(2*Math.PI)/10; 
	for (i=11;i!=0;i--) {												// For each point
	    r=size*(i%2+.6);												// Radius
	    o=a*i;															// Angle
	    pts+=(r*Math.sin(o))+",";										// Get X
	    pts+=(r*Math.cos(o))+" ";										// Y
		}
	return pts;															// Return points
	}

}	
	
SHIVA_Show.prototype.GraphActions=function(msg)						// REACT TO SHIVA ACTION MESSAGE
{
	var v=msg.split("|");												// Split msg into parts
	if (v[0] == "ShivaAct=resize") {  									// RESIZE
		if (v[1] == "100") 												// If forcing 100%
			shivaLib.opWidth=shivaLib.opHeight="100%";		// Set values
		shivaLib.DrawGraph();											// Redraw
		}
	else if (v[0] == "ShivaAct=data") {									// DATA
//		var data=$.parseJSON(v[1]);										// Convert to table format
//		shivaLib.map.setDataTable(data);								// Set data
		shivaLib.DrawGraph();											// Redraw
		}
}
                      